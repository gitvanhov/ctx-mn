!function(t){var i={};function e(n){if(i[n])return i[n].exports;var o=i[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=i,e.d=function(t,i,n){e.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,i){if(1&i&&(t=e(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var o in t)e.d(n,o,function(i){return t[i]}.bind(null,o));return n},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},e.p="",e(e.s=11)}({0:function(t,i,e){"use strict";t.exports=o,t.exports.default=o;var n=e(10);function o(t,i){if(!(this instanceof o))return new o(t,i);this._maxEntries=Math.max(4,t||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),i&&this._initFormat(i),this.clear()}function r(t,i,e){if(!e)return i.indexOf(t);for(var n=0;n<i.length;n++)if(e(t,i[n]))return n;return-1}function s(t,i){a(t,0,t.children.length,i,t)}function a(t,i,e,n,o){o||(o=f(null)),o.minX=1/0,o.minY=1/0,o.maxX=-1/0,o.maxY=-1/0;for(var r,s=i;s<e;s++)r=t.children[s],h(o,t.leaf?n(r):r);return o}function h(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function u(t,i){return t.minX-i.minX}function p(t,i){return t.minY-i.minY}function l(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function c(t){return t.maxX-t.minX+(t.maxY-t.minY)}function _(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function d(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function f(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function v(t,i,e,o,r){for(var s,a=[i,e];a.length;)(e=a.pop())-(i=a.pop())<=o||(s=i+Math.ceil((e-i)/o/2)*o,n(t,s,i,e,r),a.push(i,s,s,e))}o.prototype={all:function(){return this._all(this.data,[])},search:function(t){var i=this.data,e=[],n=this.toBBox;if(!d(t,i))return e;for(var o,r,s,a,h=[];i;){for(o=0,r=i.children.length;o<r;o++)s=i.children[o],d(t,a=i.leaf?n(s):s)&&(i.leaf?e.push(s):_(t,a)?this._all(s,e):h.push(s));i=h.pop()}return e},collides:function(t){var i=this.data,e=this.toBBox;if(!d(t,i))return!1;for(var n,o,r,s,a=[];i;){for(n=0,o=i.children.length;n<o;n++)if(r=i.children[n],d(t,s=i.leaf?e(r):r)){if(i.leaf||_(t,s))return!0;a.push(r)}i=a.pop()}return!1},load:function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0,e=t.length;i<e;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var o=this.data;this.data=n,n=o}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},insert:function(t){return t&&this._insert(t,this.data.height-1),this},clear:function(){return this.data=f([]),this},remove:function(t,i){if(!t)return this;for(var e,n,o,s,a=this.data,h=this.toBBox(t),u=[],p=[];a||u.length;){if(a||(a=u.pop(),n=u[u.length-1],e=p.pop(),s=!0),a.leaf&&-1!==(o=r(t,a.children,i)))return a.children.splice(o,1),u.push(a),this._condense(u),this;s||a.leaf||!_(a,h)?n?(e++,a=n.children[e],s=!1):a=null:(u.push(a),p.push(e),e=0,n=a,a=a.children[0])}return this},toBBox:function(t){return t},compareMinX:u,compareMinY:p,toJSON:function(){return this.data},fromJSON:function(t){return this.data=t,this},_all:function(t,i){for(var e=[];t;)t.leaf?i.push.apply(i,t.children):e.push.apply(e,t.children),t=e.pop();return i},_build:function(t,i,e,n){var o,r=e-i+1,a=this._maxEntries;if(r<=a)return s(o=f(t.slice(i,e+1)),this.toBBox),o;n||(n=Math.ceil(Math.log(r)/Math.log(a)),a=Math.ceil(r/Math.pow(a,n-1))),(o=f([])).leaf=!1,o.height=n;var h,u,p,l,c=Math.ceil(r/a),_=c*Math.ceil(Math.sqrt(a));for(v(t,i,e,_,this.compareMinX),h=i;h<=e;h+=_)for(v(t,h,p=Math.min(h+_-1,e),c,this.compareMinY),u=h;u<=p;u+=c)l=Math.min(u+c-1,p),o.children.push(this._build(t,u,l,n-1));return s(o,this.toBBox),o},_chooseSubtree:function(t,i,e,n){for(var o,r,s,a,h,u,p,c,_,d;n.push(i),!i.leaf&&n.length-1!==e;){for(p=c=1/0,o=0,r=i.children.length;o<r;o++)h=l(s=i.children[o]),_=t,d=s,(u=(Math.max(d.maxX,_.maxX)-Math.min(d.minX,_.minX))*(Math.max(d.maxY,_.maxY)-Math.min(d.minY,_.minY))-h)<c?(c=u,p=h<p?h:p,a=s):u===c&&h<p&&(p=h,a=s);i=a||i.children[0]}return i},_insert:function(t,i,e){var n=this.toBBox,o=e?t:n(t),r=[],s=this._chooseSubtree(o,this.data,i,r);for(s.children.push(t),h(s,o);i>=0&&r[i].children.length>this._maxEntries;)this._split(r,i),i--;this._adjustParentBBoxes(o,r,i)},_split:function(t,i){var e=t[i],n=e.children.length,o=this._minEntries;this._chooseSplitAxis(e,o,n);var r=this._chooseSplitIndex(e,o,n),a=f(e.children.splice(r,e.children.length-r));a.height=e.height,a.leaf=e.leaf,s(e,this.toBBox),s(a,this.toBBox),i?t[i-1].children.push(a):this._splitRoot(e,a)},_splitRoot:function(t,i){this.data=f([t,i]),this.data.height=t.height+1,this.data.leaf=!1,s(this.data,this.toBBox)},_chooseSplitIndex:function(t,i,e){var n,o,r,s,h,u,p,c,_,d,f,v,g,y;for(u=p=1/0,n=i;n<=e-i;n++)o=a(t,0,n,this.toBBox),r=a(t,n,e,this.toBBox),_=o,d=r,f=void 0,v=void 0,g=void 0,y=void 0,f=Math.max(_.minX,d.minX),v=Math.max(_.minY,d.minY),g=Math.min(_.maxX,d.maxX),y=Math.min(_.maxY,d.maxY),s=Math.max(0,g-f)*Math.max(0,y-v),h=l(o)+l(r),s<u?(u=s,c=n,p=h<p?h:p):s===u&&h<p&&(p=h,c=n);return c},_chooseSplitAxis:function(t,i,e){var n=t.leaf?this.compareMinX:u,o=t.leaf?this.compareMinY:p;this._allDistMargin(t,i,e,n)<this._allDistMargin(t,i,e,o)&&t.children.sort(n)},_allDistMargin:function(t,i,e,n){t.children.sort(n);var o,r,s=this.toBBox,u=a(t,0,i,s),p=a(t,e-i,e,s),l=c(u)+c(p);for(o=i;o<e-i;o++)r=t.children[o],h(u,t.leaf?s(r):r),l+=c(u);for(o=e-i-1;o>=i;o--)r=t.children[o],h(p,t.leaf?s(r):r),l+=c(p);return l},_adjustParentBBoxes:function(t,i,e){for(var n=e;n>=0;n--)h(i[n],t)},_condense:function(t){for(var i,e=t.length-1;e>=0;e--)0===t[e].children.length?e>0?(i=t[e-1].children).splice(i.indexOf(t[e]),1):this.clear():s(t[e],this.toBBox)},_initFormat:function(t){var i=["return a"," - b",";"];this.compareMinX=new Function("a","b",i.join(t[0])),this.compareMinY=new Function("a","b",i.join(t[1])),this.toBBox=new Function("a","return {minX: a"+t[0]+", minY: a"+t[1]+", maxX: a"+t[2]+", maxY: a"+t[3]+"};")}}},10:function(t,i,e){t.exports=function(){"use strict";function t(t,i,e){var n=t[i];t[i]=t[e],t[e]=n}function i(t,i){return t<i?-1:t>i?1:0}return function(e,n,o,r,s){!function i(e,n,o,r,s){for(;r>o;){if(r-o>600){var a=r-o+1,h=n-o+1,u=Math.log(a),p=.5*Math.exp(2*u/3),l=.5*Math.sqrt(u*p*(a-p)/a)*(h-a/2<0?-1:1),c=Math.max(o,Math.floor(n-h*p/a+l)),_=Math.min(r,Math.floor(n+(a-h)*p/a+l));i(e,n,c,_,s)}var d=e[n],f=o,v=r;for(t(e,o,n),s(e[r],d)>0&&t(e,o,r);f<v;){for(t(e,f,v),f++,v--;s(e[f],d)<0;)f++;for(;s(e[v],d)>0;)v--}0===s(e[o],d)?t(e,o,v):t(e,++v,r),v<=n&&(o=v+1),n<=v&&(r=v-1)}}(e,n,o||0,r||e.length-1,s||i)}}()},11:function(t,i,e){"use strict";function n(){return function(){throw new Error("Unimplemented abstract method.")}()}e.r(i);var o=0;function r(t){return t.ol_uid||(t.ol_uid=String(++o))}var s="5.3.0",a=function(t){function i(i){var e="Assertion failed. See https://openlayers.org/en/"+("latest"===s?s:"v"+s.split("-")[0])+"/doc/errors/#"+i+" for details.";t.call(this,e),this.code=i,this.name="AssertionError",this.message=e}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(Error),h={ADD:"add",REMOVE:"remove"},u="propertychange",p="function"==typeof Object.assign?Object.assign:function(t,i){var e=arguments;if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(t),o=1,r=arguments.length;o<r;++o){var s=e[o];if(null!=s)for(var a in s)s.hasOwnProperty(a)&&(n[a]=s[a])}return n};function l(t){for(var i in t)delete t[i]}function c(t){var i;for(i in t)return!1;return!i}function _(t,i,e,n){for(var o,r=0,s=t.length;r<s;++r)if((o=t[r]).listener===i&&o.bindTo===e)return n&&(o.deleteIndex=r),o}function d(t,i){var e=f(t);return e?e[i]:void 0}function f(t,i){var e=t.ol_lm;return!e&&i&&(e=t.ol_lm={}),e}function v(t,i){var e=d(t,i);if(e){for(var n=0,o=e.length;n<o;++n)t.removeEventListener(i,e[n].boundListener),l(e[n]);e.length=0;var r=f(t);r&&(delete r[i],0===Object.keys(r).length&&function(t){delete t.ol_lm}(t))}}function g(t,i,e,n,o){var r=f(t,!0),s=r[i];s||(s=r[i]=[]);var a=_(s,e,n,!1);return a?o||(a.callOnce=!1):(a={bindTo:n,callOnce:!!o,listener:e,target:t,type:i},t.addEventListener(i,function(t){var i=function(i){var e=t.listener,n=t.bindTo||t.target;return t.callOnce&&E(t),e.call(n,i)};return t.boundListener=i,i}(a)),s.push(a)),a}function y(t,i,e,n){return g(t,i,e,n,!0)}function m(t,i,e,n){var o=d(t,i);if(o){var r=_(o,e,n,!0);r&&E(r)}}function E(t){if(t&&t.target){t.target.removeEventListener(t.type,t.boundListener);var i=d(t.target,t.type);if(i){var e="deleteIndex"in t?t.deleteIndex:i.indexOf(t);-1!==e&&i.splice(e,1),0===i.length&&v(t.target,t.type)}l(t)}}var T=function(){this.disposed_=!1};T.prototype.dispose=function(){this.disposed_||(this.disposed_=!0,this.disposeInternal())},T.prototype.disposeInternal=function(){};var C=T;function R(){return!0}function I(){return!1}function w(){}var M=function(t){this.propagationStopped,this.type=t,this.target=null};function O(t){t.stopPropagation()}M.prototype.preventDefault=function(){this.propagationStopped=!0},M.prototype.stopPropagation=function(){this.propagationStopped=!0};var b=M,P=function(t){function i(){t.call(this),this.pendingRemovals_={},this.dispatching_={},this.listeners_={}}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.addEventListener=function(t,i){var e=this.listeners_[t];e||(e=this.listeners_[t]=[]),-1===e.indexOf(i)&&e.push(i)},i.prototype.dispatchEvent=function(t){var i="string"==typeof t?new b(t):t,e=i.type;i.target=this;var n,o=this.listeners_[e];if(o){e in this.dispatching_||(this.dispatching_[e]=0,this.pendingRemovals_[e]=0),++this.dispatching_[e];for(var r=0,s=o.length;r<s;++r)if(!1===o[r].call(this,i)||i.propagationStopped){n=!1;break}if(--this.dispatching_[e],0===this.dispatching_[e]){var a=this.pendingRemovals_[e];for(delete this.pendingRemovals_[e];a--;)this.removeEventListener(e,w);delete this.dispatching_[e]}return n}},i.prototype.disposeInternal=function(){!function(t){var i=f(t);if(i)for(var e in i)v(t,e)}(this)},i.prototype.getListeners=function(t){return this.listeners_[t]},i.prototype.hasListener=function(t){return t?t in this.listeners_:Object.keys(this.listeners_).length>0},i.prototype.removeEventListener=function(t,i){var e=this.listeners_[t];if(e){var n=e.indexOf(i);t in this.pendingRemovals_?(e[n]=w,++this.pendingRemovals_[t]):(e.splice(n,1),0===e.length&&delete this.listeners_[t])}},i}(C),A={CHANGE:"change",CLEAR:"clear",CONTEXTMENU:"contextmenu",CLICK:"click",DBLCLICK:"dblclick",DRAGENTER:"dragenter",DRAGOVER:"dragover",DROP:"drop",ERROR:"error",KEYDOWN:"keydown",KEYPRESS:"keypress",LOAD:"load",MOUSEDOWN:"mousedown",MOUSEMOVE:"mousemove",MOUSEOUT:"mouseout",MOUSEUP:"mouseup",MOUSEWHEEL:"mousewheel",MSPOINTERDOWN:"MSPointerDown",RESIZE:"resize",TOUCHSTART:"touchstart",TOUCHMOVE:"touchmove",TOUCHEND:"touchend",WHEEL:"wheel"};var L=function(t){function i(){t.call(this),this.revision_=0}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.changed=function(){++this.revision_,this.dispatchEvent(A.CHANGE)},i.prototype.getRevision=function(){return this.revision_},i.prototype.on=function(t,i){if(Array.isArray(t)){for(var e=t.length,n=new Array(e),o=0;o<e;++o)n[o]=g(this,t[o],i);return n}return g(this,t,i)},i.prototype.once=function(t,i){if(Array.isArray(t)){for(var e=t.length,n=new Array(e),o=0;o<e;++o)n[o]=y(this,t[o],i);return n}return y(this,t,i)},i.prototype.un=function(t,i){if(Array.isArray(t))for(var e=0,n=t.length;e<n;++e)m(this,t[e],i);else m(this,t,i)},i}(P),D=function(t){function i(i,e,n){t.call(this,i),this.key=e,this.oldValue=n}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(b),F={};function N(t){return F.hasOwnProperty(t)?F[t]:F[t]="change:"+t}var G=function(t){function i(i){t.call(this),r(this),this.values_={},void 0!==i&&this.setProperties(i)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.get=function(t){var i;return this.values_.hasOwnProperty(t)&&(i=this.values_[t]),i},i.prototype.getKeys=function(){return Object.keys(this.values_)},i.prototype.getProperties=function(){return p({},this.values_)},i.prototype.notify=function(t,i){var e;e=N(t),this.dispatchEvent(new D(e,t,i)),e=u,this.dispatchEvent(new D(e,t,i))},i.prototype.set=function(t,i,e){if(e)this.values_[t]=i;else{var n=this.values_[t];this.values_[t]=i,n!==i&&this.notify(t,n)}},i.prototype.setProperties=function(t,i){for(var e in t)this.set(e,t[e],i)},i.prototype.unset=function(t,i){if(t in this.values_){var e=this.values_[t];delete this.values_[t],i||this.notify(t,e)}},i}(L),K="length",Z=function(t){function i(i,e){t.call(this,i),this.element=e}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(b),z=function(t){function i(i,e){t.call(this);var n=e||{};if(this.unique_=!!n.unique,this.array_=i||[],this.unique_)for(var o=0,r=this.array_.length;o<r;++o)this.assertUnique_(this.array_[o],o);this.updateLength_()}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.clear=function(){for(;this.getLength()>0;)this.pop()},i.prototype.extend=function(t){for(var i=0,e=t.length;i<e;++i)this.push(t[i]);return this},i.prototype.forEach=function(t){for(var i=this.array_,e=0,n=i.length;e<n;++e)t(i[e],e,i)},i.prototype.getArray=function(){return this.array_},i.prototype.item=function(t){return this.array_[t]},i.prototype.getLength=function(){return this.get(K)},i.prototype.insertAt=function(t,i){this.unique_&&this.assertUnique_(i),this.array_.splice(t,0,i),this.updateLength_(),this.dispatchEvent(new Z(h.ADD,i))},i.prototype.pop=function(){return this.removeAt(this.getLength()-1)},i.prototype.push=function(t){this.unique_&&this.assertUnique_(t);var i=this.getLength();return this.insertAt(i,t),this.getLength()},i.prototype.remove=function(t){for(var i=this.array_,e=0,n=i.length;e<n;++e)if(i[e]===t)return this.removeAt(e)},i.prototype.removeAt=function(t){var i=this.array_[t];return this.array_.splice(t,1),this.updateLength_(),this.dispatchEvent(new Z(h.REMOVE,i)),i},i.prototype.setAt=function(t,i){var e=this.getLength();if(t<e){this.unique_&&this.assertUnique_(i,t);var n=this.array_[t];this.array_[t]=i,this.dispatchEvent(new Z(h.REMOVE,n)),this.dispatchEvent(new Z(h.ADD,i))}else{for(var o=e;o<t;++o)this.insertAt(o,void 0);this.insertAt(t,i)}},i.prototype.updateLength_=function(){this.set(K,this.array_.length)},i.prototype.assertUnique_=function(t,i){for(var e=0,n=this.array_.length;e<n;++e)if(this.array_[e]===t&&e!==i)throw new a(58)},i}(G),U=function(t){function i(i,e,n){t.call(this,i),this.map=e,this.frameState=void 0!==n?n:null}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(b),x=function(t){function i(i,e,n,o,r){t.call(this,i,e,r),this.originalEvent=n,this.pixel=e.getEventPixel(n),this.coordinate=e.getCoordinateFromPixel(this.pixel),this.dragging=void 0!==o&&o}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.preventDefault=function(){t.prototype.preventDefault.call(this),this.originalEvent.preventDefault()},i.prototype.stopPropagation=function(){t.prototype.stopPropagation.call(this),this.originalEvent.stopPropagation()},i}(U),j="undefined"!=typeof navigator?navigator.userAgent.toLowerCase():"",V=-1!==j.indexOf("firefox"),B=-1!==j.indexOf("safari")&&-1==j.indexOf("chrom"),Y=-1!==j.indexOf("webkit")&&-1==j.indexOf("edge"),H=-1!==j.indexOf("macintosh"),W=window.devicePixelRatio||1,X=function(){var t=!1;try{t=!!document.createElement("canvas").getContext("2d").setLineDash}catch(t){}return t}(),q=(navigator,"ontouchstart"in window),Q="PointerEvent"in window,$=!!navigator.msPointerEnabled,J={SINGLECLICK:"singleclick",CLICK:A.CLICK,DBLCLICK:A.DBLCLICK,POINTERDRAG:"pointerdrag",POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"},k=function(t){function i(i,e,n,o,r){t.call(this,i,e,n.originalEvent,o,r),this.pointerEvent=n}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(x),S={POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"},tt=function(t,i){this.dispatcher=t,this.mapping_=i};tt.prototype.getEvents=function(){return Object.keys(this.mapping_)},tt.prototype.getHandlerForEvent=function(t){return this.mapping_[t]};var it=tt,et=1,nt="mouse";function ot(t){if(!this.isEventSimulatedFromTouch_(t)){et.toString()in this.pointerMap&&this.cancel(t);var i=ut(t,this.dispatcher);this.pointerMap[et.toString()]=t,this.dispatcher.down(i,t)}}function rt(t){if(!this.isEventSimulatedFromTouch_(t)){var i=ut(t,this.dispatcher);this.dispatcher.move(i,t)}}function st(t){if(!this.isEventSimulatedFromTouch_(t)){var i=this.pointerMap[et.toString()];if(i&&i.button===t.button){var e=ut(t,this.dispatcher);this.dispatcher.up(e,t),this.cleanupMouse()}}}function at(t){if(!this.isEventSimulatedFromTouch_(t)){var i=ut(t,this.dispatcher);this.dispatcher.enterOver(i,t)}}function ht(t){if(!this.isEventSimulatedFromTouch_(t)){var i=ut(t,this.dispatcher);this.dispatcher.leaveOut(i,t)}}function ut(t,i){var e=i.cloneEvent(t,t),n=e.preventDefault;return e.preventDefault=function(){t.preventDefault(),n()},e.pointerId=et,e.isPrimary=!0,e.pointerType=nt,e}var pt=function(t){function i(i){var e={mousedown:ot,mousemove:rt,mouseup:st,mouseover:at,mouseout:ht};t.call(this,i,e),this.pointerMap=i.pointerMap,this.lastTouches=[]}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.isEventSimulatedFromTouch_=function(t){for(var i=this.lastTouches,e=t.clientX,n=t.clientY,o=0,r=i.length,s=void 0;o<r&&(s=i[o]);o++){var a=Math.abs(e-s[0]),h=Math.abs(n-s[1]);if(a<=25&&h<=25)return!0}return!1},i.prototype.cancel=function(t){var i=ut(t,this.dispatcher);this.dispatcher.cancel(i,t),this.cleanupMouse()},i.prototype.cleanupMouse=function(){delete this.pointerMap[et.toString()]},i}(it),lt=["","unavailable","touch","pen","mouse"];function ct(t){this.pointerMap[t.pointerId.toString()]=t;var i=this.prepareEvent_(t);this.dispatcher.down(i,t)}function _t(t){var i=this.prepareEvent_(t);this.dispatcher.move(i,t)}function dt(t){var i=this.prepareEvent_(t);this.dispatcher.up(i,t),this.cleanup(t.pointerId)}function ft(t){var i=this.prepareEvent_(t);this.dispatcher.leaveOut(i,t)}function vt(t){var i=this.prepareEvent_(t);this.dispatcher.enterOver(i,t)}function gt(t){var i=this.prepareEvent_(t);this.dispatcher.cancel(i,t),this.cleanup(t.pointerId)}function yt(t){var i=this.dispatcher.makeEvent("lostpointercapture",t,t);this.dispatcher.dispatchEvent(i)}function mt(t){var i=this.dispatcher.makeEvent("gotpointercapture",t,t);this.dispatcher.dispatchEvent(i)}var Et=function(t){function i(i){var e={MSPointerDown:ct,MSPointerMove:_t,MSPointerUp:dt,MSPointerOut:ft,MSPointerOver:vt,MSPointerCancel:gt,MSGotPointerCapture:mt,MSLostPointerCapture:yt};t.call(this,i,e),this.pointerMap=i.pointerMap}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.prepareEvent_=function(t){var i=t;return"number"==typeof t.pointerType&&((i=this.dispatcher.cloneEvent(t,t)).pointerType=lt[t.pointerType]),i},i.prototype.cleanup=function(t){delete this.pointerMap[t.toString()]},i}(it);function Tt(t){this.dispatcher.fireNativeEvent(t)}function Ct(t){this.dispatcher.fireNativeEvent(t)}function Rt(t){this.dispatcher.fireNativeEvent(t)}function It(t){this.dispatcher.fireNativeEvent(t)}function wt(t){this.dispatcher.fireNativeEvent(t)}function Mt(t){this.dispatcher.fireNativeEvent(t)}function Ot(t){this.dispatcher.fireNativeEvent(t)}function bt(t){this.dispatcher.fireNativeEvent(t)}var Pt=function(t){function i(i){var e={pointerdown:Tt,pointermove:Ct,pointerup:Rt,pointerout:It,pointerover:wt,pointercancel:Mt,gotpointercapture:bt,lostpointercapture:Ot};t.call(this,i,e)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(it),At=!1,Lt=function(t){function i(i,e,n){t.call(this,i),this.originalEvent=e;var o=n||{};this.buttons=function(t){var i;if(t.buttons||At)i=t.buttons;else switch(t.which){case 1:i=1;break;case 2:i=4;break;case 3:i=2;break;default:i=0}return i}(o),this.pressure=function(t,i){var e=0;e=t.pressure?t.pressure:i?.5:0;return e}(o,this.buttons),this.bubbles="bubbles"in o&&o.bubbles,this.cancelable="cancelable"in o&&o.cancelable,this.view="view"in o?o.view:null,this.detail="detail"in o?o.detail:null,this.screenX="screenX"in o?o.screenX:0,this.screenY="screenY"in o?o.screenY:0,this.clientX="clientX"in o?o.clientX:0,this.clientY="clientY"in o?o.clientY:0,this.ctrlKey="ctrlKey"in o&&o.ctrlKey,this.altKey="altKey"in o&&o.altKey,this.shiftKey="shiftKey"in o&&o.shiftKey,this.metaKey="metaKey"in o&&o.metaKey,this.button="button"in o?o.button:0,this.relatedTarget="relatedTarget"in o?o.relatedTarget:null,this.pointerId="pointerId"in o?o.pointerId:0,this.width="width"in o?o.width:0,this.height="height"in o?o.height:0,this.tiltX="tiltX"in o?o.tiltX:0,this.tiltY="tiltY"in o?o.tiltY:0,this.pointerType="pointerType"in o?o.pointerType:"",this.hwTimestamp="hwTimestamp"in o?o.hwTimestamp:0,this.isPrimary="isPrimary"in o&&o.isPrimary,e.preventDefault&&(this.preventDefault=function(){e.preventDefault()})}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(b);!function(){try{var t=new MouseEvent("click",{buttons:1});At=1===t.buttons}catch(t){}}();var Dt=Lt;function Ft(t,i){return t>i?1:t<i?-1:0}function Nt(t,i,e){var n,o=t.length;if(t[0]<=i)return 0;if(i<=t[o-1])return o-1;if(e>0){for(n=1;n<o;++n)if(t[n]<i)return n-1}else if(e<0){for(n=1;n<o;++n)if(t[n]<=i)return n}else for(n=1;n<o;++n){if(t[n]==i)return n;if(t[n]<i)return t[n-1]-i<i-t[n]?n-1:n}return o-1}function Gt(t,i,e){for(;i<e;){var n=t[i];t[i]=t[e],t[e]=n,++i,--e}}function Kt(t,i){for(var e=Array.isArray(i)?i:[i],n=e.length,o=0;o<n;o++)t[t.length]=e[o]}function Zt(t,i){var e=t.length;if(e!==i.length)return!1;for(var n=0;n<e;n++)if(t[n]!==i[n])return!1;return!0}function zt(t){this.vacuumTouches_(t),this.setPrimaryTouch_(t.changedTouches[0]),this.dedupSynthMouse_(t),this.clickCount_++,this.processTouches_(t,this.overDown_)}function Ut(t){this.processTouches_(t,this.moveOverOut_)}function xt(t){this.dedupSynthMouse_(t),this.processTouches_(t,this.upOut_)}function jt(t){this.processTouches_(t,this.cancelOut_)}var Vt=function(t){function i(i,e){var n={touchstart:zt,touchmove:Ut,touchend:xt,touchcancel:jt};t.call(this,i,n),this.pointerMap=i.pointerMap,this.mouseSource=e,this.firstTouchId_=void 0,this.clickCount_=0,this.resetId_,this.dedupTimeout_=2500}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.isPrimaryTouch_=function(t){return this.firstTouchId_===t.identifier},i.prototype.setPrimaryTouch_=function(t){var i=Object.keys(this.pointerMap).length;(0===i||1===i&&et.toString()in this.pointerMap)&&(this.firstTouchId_=t.identifier,this.cancelResetClickCount_())},i.prototype.removePrimaryPointer_=function(t){t.isPrimary&&(this.firstTouchId_=void 0,this.resetClickCount_())},i.prototype.resetClickCount_=function(){this.resetId_=setTimeout(this.resetClickCountHandler_.bind(this),200)},i.prototype.resetClickCountHandler_=function(){this.clickCount_=0,this.resetId_=void 0},i.prototype.cancelResetClickCount_=function(){void 0!==this.resetId_&&clearTimeout(this.resetId_)},i.prototype.touchToPointer_=function(t,i){var e=this.dispatcher.cloneEvent(t,i);return e.pointerId=i.identifier+2,e.bubbles=!0,e.cancelable=!0,e.detail=this.clickCount_,e.button=0,e.buttons=1,e.width=i.radiusX||0,e.height=i.radiusY||0,e.pressure=i.force||.5,e.isPrimary=this.isPrimaryTouch_(i),e.pointerType="touch",e.clientX=i.clientX,e.clientY=i.clientY,e.screenX=i.screenX,e.screenY=i.screenY,e},i.prototype.processTouches_=function(t,i){var e=Array.prototype.slice.call(t.changedTouches),n=e.length;function o(){t.preventDefault()}for(var r=0;r<n;++r){var s=this.touchToPointer_(t,e[r]);s.preventDefault=o,i.call(this,t,s)}},i.prototype.findTouch_=function(t,i){for(var e=t.length,n=0;n<e;n++){if(t[n].identifier===i)return!0}return!1},i.prototype.vacuumTouches_=function(t){var i=t.touches,e=Object.keys(this.pointerMap),n=e.length;if(n>=i.length){for(var o=[],r=0;r<n;++r){var s=Number(e[r]),a=this.pointerMap[s];s==et||this.findTouch_(i,s-2)||o.push(a.out)}for(var h=0;h<o.length;++h)this.cancelOut_(t,o[h])}},i.prototype.overDown_=function(t,i){this.pointerMap[i.pointerId]={target:i.target,out:i,outTarget:i.target},this.dispatcher.over(i,t),this.dispatcher.enter(i,t),this.dispatcher.down(i,t)},i.prototype.moveOverOut_=function(t,i){var e=i,n=this.pointerMap[e.pointerId];if(n){var o=n.out,r=n.outTarget;this.dispatcher.move(e,t),o&&r!==e.target&&(o.relatedTarget=e.target,e.relatedTarget=r,o.target=r,e.target?(this.dispatcher.leaveOut(o,t),this.dispatcher.enterOver(e,t)):(e.target=r,e.relatedTarget=null,this.cancelOut_(t,e))),n.out=e,n.outTarget=e.target}},i.prototype.upOut_=function(t,i){this.dispatcher.up(i,t),this.dispatcher.out(i,t),this.dispatcher.leave(i,t),this.cleanUpPointer_(i)},i.prototype.cancelOut_=function(t,i){this.dispatcher.cancel(i,t),this.dispatcher.out(i,t),this.dispatcher.leave(i,t),this.cleanUpPointer_(i)},i.prototype.cleanUpPointer_=function(t){delete this.pointerMap[t.pointerId],this.removePrimaryPointer_(t)},i.prototype.dedupSynthMouse_=function(t){var i=this.mouseSource.lastTouches,e=t.changedTouches[0];if(this.isPrimaryTouch_(e)){var n=[e.clientX,e.clientY];i.push(n),setTimeout(function(){var t,e,o;e=n,o=(t=i).indexOf(e),o>-1&&t.splice(o,1)},this.dedupTimeout_)}},i}(it),Bt=[["bubbles",!1],["cancelable",!1],["view",null],["detail",null],["screenX",0],["screenY",0],["clientX",0],["clientY",0],["ctrlKey",!1],["altKey",!1],["shiftKey",!1],["metaKey",!1],["button",0],["relatedTarget",null],["buttons",0],["pointerId",0],["width",0],["height",0],["pressure",0],["tiltX",0],["tiltY",0],["pointerType",""],["hwTimestamp",0],["isPrimary",!1],["type",""],["target",null],["currentTarget",null],["which",0]],Yt=function(t){function i(i){t.call(this),this.element_=i,this.pointerMap={},this.eventMap_={},this.eventSourceList_=[],this.registerSources()}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.registerSources=function(){if(Q)this.registerSource("native",new Pt(this));else if($)this.registerSource("ms",new Et(this));else{var t=new pt(this);this.registerSource("mouse",t),q&&this.registerSource("touch",new Vt(this,t))}this.register_()},i.prototype.registerSource=function(t,i){var e=i,n=e.getEvents();n&&(n.forEach(function(t){var i=e.getHandlerForEvent(t);i&&(this.eventMap_[t]=i.bind(e))}.bind(this)),this.eventSourceList_.push(e))},i.prototype.register_=function(){for(var t=this.eventSourceList_.length,i=0;i<t;i++){var e=this.eventSourceList_[i];this.addEvents_(e.getEvents())}},i.prototype.unregister_=function(){for(var t=this.eventSourceList_.length,i=0;i<t;i++){var e=this.eventSourceList_[i];this.removeEvents_(e.getEvents())}},i.prototype.eventHandler_=function(t){var i=t.type,e=this.eventMap_[i];e&&e(t)},i.prototype.addEvents_=function(t){t.forEach(function(t){g(this.element_,t,this.eventHandler_,this)}.bind(this))},i.prototype.removeEvents_=function(t){t.forEach(function(t){m(this.element_,t,this.eventHandler_,this)}.bind(this))},i.prototype.cloneEvent=function(t,i){for(var e={},n=0,o=Bt.length;n<o;n++){var r=Bt[n][0];e[r]=t[r]||i[r]||Bt[n][1]}return e},i.prototype.down=function(t,i){this.fireEvent(S.POINTERDOWN,t,i)},i.prototype.move=function(t,i){this.fireEvent(S.POINTERMOVE,t,i)},i.prototype.up=function(t,i){this.fireEvent(S.POINTERUP,t,i)},i.prototype.enter=function(t,i){t.bubbles=!1,this.fireEvent(S.POINTERENTER,t,i)},i.prototype.leave=function(t,i){t.bubbles=!1,this.fireEvent(S.POINTERLEAVE,t,i)},i.prototype.over=function(t,i){t.bubbles=!0,this.fireEvent(S.POINTEROVER,t,i)},i.prototype.out=function(t,i){t.bubbles=!0,this.fireEvent(S.POINTEROUT,t,i)},i.prototype.cancel=function(t,i){this.fireEvent(S.POINTERCANCEL,t,i)},i.prototype.leaveOut=function(t,i){this.out(t,i),this.contains_(t.target,t.relatedTarget)||this.leave(t,i)},i.prototype.enterOver=function(t,i){this.over(t,i),this.contains_(t.target,t.relatedTarget)||this.enter(t,i)},i.prototype.contains_=function(t,i){return!(!t||!i)&&t.contains(i)},i.prototype.makeEvent=function(t,i,e){return new Dt(t,e,i)},i.prototype.fireEvent=function(t,i,e){var n=this.makeEvent(t,i,e);this.dispatchEvent(n)},i.prototype.fireNativeEvent=function(t){var i=this.makeEvent(t.type,t,t);this.dispatchEvent(i)},i.prototype.wrapMouseEvent=function(t,i){return this.makeEvent(t,ut(i,this),i)},i.prototype.disposeInternal=function(){this.unregister_(),t.prototype.disposeInternal.call(this)},i}(P),Ht=function(t){function i(i,e){t.call(this),this.map_=i,this.clickTimeoutId_,this.dragging_=!1,this.dragListenerKeys_=[],this.moveTolerance_=e?e*W:W,this.down_=null;var n=this.map_.getViewport();this.activePointers_=0,this.trackedTouches_={},this.pointerEventHandler_=new Yt(n),this.documentPointerEventHandler_=null,this.pointerdownListenerKey_=g(this.pointerEventHandler_,S.POINTERDOWN,this.handlePointerDown_,this),this.relayedListenerKey_=g(this.pointerEventHandler_,S.POINTERMOVE,this.relayEvent_,this)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.emulateClick_=function(t){var i=new k(J.CLICK,this.map_,t);this.dispatchEvent(i),void 0!==this.clickTimeoutId_?(clearTimeout(this.clickTimeoutId_),this.clickTimeoutId_=void 0,i=new k(J.DBLCLICK,this.map_,t),this.dispatchEvent(i)):this.clickTimeoutId_=setTimeout(function(){this.clickTimeoutId_=void 0;var i=new k(J.SINGLECLICK,this.map_,t);this.dispatchEvent(i)}.bind(this),250)},i.prototype.updateActivePointers_=function(t){var i=t;i.type==J.POINTERUP||i.type==J.POINTERCANCEL?delete this.trackedTouches_[i.pointerId]:i.type==J.POINTERDOWN&&(this.trackedTouches_[i.pointerId]=!0),this.activePointers_=Object.keys(this.trackedTouches_).length},i.prototype.handlePointerUp_=function(t){this.updateActivePointers_(t);var i=new k(J.POINTERUP,this.map_,t);this.dispatchEvent(i),i.propagationStopped||this.dragging_||!this.isMouseActionButton_(t)||this.emulateClick_(this.down_),0===this.activePointers_&&(this.dragListenerKeys_.forEach(E),this.dragListenerKeys_.length=0,this.dragging_=!1,this.down_=null,this.documentPointerEventHandler_.dispose(),this.documentPointerEventHandler_=null)},i.prototype.isMouseActionButton_=function(t){return 0===t.button},i.prototype.handlePointerDown_=function(t){this.updateActivePointers_(t);var i=new k(J.POINTERDOWN,this.map_,t);this.dispatchEvent(i),this.down_=t,0===this.dragListenerKeys_.length&&(this.documentPointerEventHandler_=new Yt(document),this.dragListenerKeys_.push(g(this.documentPointerEventHandler_,J.POINTERMOVE,this.handlePointerMove_,this),g(this.documentPointerEventHandler_,J.POINTERUP,this.handlePointerUp_,this),g(this.pointerEventHandler_,J.POINTERCANCEL,this.handlePointerUp_,this)))},i.prototype.handlePointerMove_=function(t){if(this.isMoving_(t)){this.dragging_=!0;var i=new k(J.POINTERDRAG,this.map_,t,this.dragging_);this.dispatchEvent(i)}t.preventDefault()},i.prototype.relayEvent_=function(t){var i=!(!this.down_||!this.isMoving_(t));this.dispatchEvent(new k(t.type,this.map_,t,i))},i.prototype.isMoving_=function(t){return this.dragging_||Math.abs(t.clientX-this.down_.clientX)>this.moveTolerance_||Math.abs(t.clientY-this.down_.clientY)>this.moveTolerance_},i.prototype.disposeInternal=function(){this.relayedListenerKey_&&(E(this.relayedListenerKey_),this.relayedListenerKey_=null),this.pointerdownListenerKey_&&(E(this.pointerdownListenerKey_),this.pointerdownListenerKey_=null),this.dragListenerKeys_.forEach(E),this.dragListenerKeys_.length=0,this.documentPointerEventHandler_&&(this.documentPointerEventHandler_.dispose(),this.documentPointerEventHandler_=null),this.pointerEventHandler_&&(this.pointerEventHandler_.dispose(),this.pointerEventHandler_=null),t.prototype.disposeInternal.call(this)},i}(P),Wt="postrender",Xt="movestart",qt="moveend",Qt={LAYERGROUP:"layergroup",SIZE:"size",TARGET:"target",VIEW:"view"},$t="postcompose",Jt="precompose",kt="render",St="rendercomplete",ti={IDLE:0,LOADING:1,LOADED:2,ERROR:3,EMPTY:4,ABORT:5};function ii(t,i){if(!t)throw new a(i)}var ei=function(t,i){this.priorityFunction_=t,this.keyFunction_=i,this.elements_=[],this.priorities_=[],this.queuedElements_={}};ei.prototype.clear=function(){this.elements_.length=0,this.priorities_.length=0,l(this.queuedElements_)},ei.prototype.dequeue=function(){var t=this.elements_,i=this.priorities_,e=t[0];1==t.length?(t.length=0,i.length=0):(t[0]=t.pop(),i[0]=i.pop(),this.siftUp_(0));var n=this.keyFunction_(e);return delete this.queuedElements_[n],e},ei.prototype.enqueue=function(t){ii(!(this.keyFunction_(t)in this.queuedElements_),31);var i=this.priorityFunction_(t);return i!=1/0&&(this.elements_.push(t),this.priorities_.push(i),this.queuedElements_[this.keyFunction_(t)]=!0,this.siftDown_(0,this.elements_.length-1),!0)},ei.prototype.getCount=function(){return this.elements_.length},ei.prototype.getLeftChildIndex_=function(t){return 2*t+1},ei.prototype.getRightChildIndex_=function(t){return 2*t+2},ei.prototype.getParentIndex_=function(t){return t-1>>1},ei.prototype.heapify_=function(){var t;for(t=(this.elements_.length>>1)-1;t>=0;t--)this.siftUp_(t)},ei.prototype.isEmpty=function(){return 0===this.elements_.length},ei.prototype.isKeyQueued=function(t){return t in this.queuedElements_},ei.prototype.isQueued=function(t){return this.isKeyQueued(this.keyFunction_(t))},ei.prototype.siftUp_=function(t){for(var i=this.elements_,e=this.priorities_,n=i.length,o=i[t],r=e[t],s=t;t<n>>1;){var a=this.getLeftChildIndex_(t),h=this.getRightChildIndex_(t),u=h<n&&e[h]<e[a]?h:a;i[t]=i[u],e[t]=e[u],t=u}i[t]=o,e[t]=r,this.siftDown_(s,t)},ei.prototype.siftDown_=function(t,i){for(var e=this.elements_,n=this.priorities_,o=e[i],r=n[i];i>t;){var s=this.getParentIndex_(i);if(!(n[s]>r))break;e[i]=e[s],n[i]=n[s],i=s}e[i]=o,n[i]=r},ei.prototype.reprioritize=function(){var t,i,e,n=this.priorityFunction_,o=this.elements_,r=this.priorities_,s=0,a=o.length;for(i=0;i<a;++i)(e=n(t=o[i]))==1/0?delete this.queuedElements_[this.keyFunction_(t)]:(r[s]=e,o[s++]=t);o.length=s,r.length=s,this.heapify_()};var ni=function(t){function i(i,e){t.call(this,function(t){return i.apply(null,t)},function(t){return t[0].getKey()}),this.tileChangeCallback_=e,this.tilesLoading_=0,this.tilesLoadingKeys_={}}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.enqueue=function(i){var e=t.prototype.enqueue.call(this,i);e&&g(i[0],A.CHANGE,this.handleTileChange,this);return e},i.prototype.getTilesLoading=function(){return this.tilesLoading_},i.prototype.handleTileChange=function(t){var i=t.target,e=i.getState();if(e===ti.LOADED||e===ti.ERROR||e===ti.EMPTY||e===ti.ABORT){m(i,A.CHANGE,this.handleTileChange,this);var n=i.getKey();n in this.tilesLoadingKeys_&&(delete this.tilesLoadingKeys_[n],--this.tilesLoading_),this.tileChangeCallback_()}},i.prototype.loadMoreTiles=function(t,i){for(var e,n,o,r=0,s=!1;this.tilesLoading_<t&&r<i&&this.getCount()>0;)o=(n=this.dequeue()[0]).getKey(),(e=n.getState())===ti.ABORT?s=!0:e!==ti.IDLE||o in this.tilesLoadingKeys_||(this.tilesLoadingKeys_[o]=!0,++this.tilesLoading_,++r,n.load());0===r&&s&&this.tileChangeCallback_()},i}(ei),oi=42,ri=256;function si(t,i,e){return Math.min(Math.max(t,i),e)}var ai="cosh"in Math?Math.cosh:function(t){var i=Math.exp(t);return(i+1/i)/2};function hi(t,i,e,n,o,r){var s=o-e,a=r-n;if(0!==s||0!==a){var h=((t-e)*s+(i-n)*a)/(s*s+a*a);h>1?(e=o,n=r):h>0&&(e+=s*h,n+=a*h)}return ui(t,i,e,n)}function ui(t,i,e,n){var o=e-t,r=n-i;return o*o+r*r}function pi(t){return t*Math.PI/180}function li(t,i){var e=t%i;return e*i<0?e+i:e}function ci(t,i,e){return t+e*(i-t)}function _i(t){return function(i){return i?[si(i[0],t[0],t[2]),si(i[1],t[1],t[3])]:void 0}}function di(t){return t}function fi(t){return function(i,e,n){if(void 0!==i){var o=Nt(t,i,n);o=si(o+e,0,t.length-1);var r=Math.floor(o);if(o!=r&&r<t.length-1){var s=t[r]/t[r+1];return t[r]/Math.pow(s,o-r)}return t[r]}}}function vi(t,i,e){return function(n,o,r){if(void 0!==n){var s=-r/2+.5,a=Math.floor(Math.log(i/n)/Math.log(t)+s),h=Math.max(a+o,0);return void 0!==e&&(h=Math.min(h,e)),i/Math.pow(t,h)}}}function gi(t,i){return void 0!==t?0:void 0}function yi(t,i){return void 0!==t?t+i:void 0}function mi(t){var i=2*Math.PI/t;return function(t,e){return void 0!==t?t=Math.floor((t+e)/i+.5)*i:void 0}}function Ei(t){var i=t||pi(5);return function(t,e){return void 0!==t?Math.abs(t+e)<=i?0:t+e:void 0}}var Ti=0,Ci=1,Ri="center",Ii="resolution",wi="rotation";function Mi(t,i){return t[0]+=i[0],t[1]+=i[1],t}function Oi(t,i){for(var e=!0,n=t.length-1;n>=0;--n)if(t[n]!=i[n]){e=!1;break}return e}function bi(t,i){var e=Math.cos(i),n=Math.sin(i),o=t[0]*e-t[1]*n,r=t[1]*e+t[0]*n;return t[0]=o,t[1]=r,t}function Pi(t,i){return t[0]*=i,t[1]*=i,t}function Ai(t){return Math.pow(t,3)}function Li(t){return 1-Ai(1-t)}function Di(t){return 3*t*t-2*t*t*t}function Fi(t){return t}var Ni={BOTTOM_LEFT:"bottom-left",BOTTOM_RIGHT:"bottom-right",TOP_LEFT:"top-left",TOP_RIGHT:"top-right"},Gi={UNKNOWN:0,INTERSECTING:1,ABOVE:2,RIGHT:4,BELOW:8,LEFT:16};function Ki(t){for(var i=Yi(),e=0,n=t.length;e<n;++e)Qi(i,t[e]);return i}function Zi(t,i,e){return e?(e[0]=t[0]-i,e[1]=t[1]-i,e[2]=t[2]+i,e[3]=t[3]+i,e):[t[0]-i,t[1]-i,t[2]+i,t[3]+i]}function zi(t,i){return i?(i[0]=t[0],i[1]=t[1],i[2]=t[2],i[3]=t[3],i):t.slice()}function Ui(t,i,e){var n,o;return(n=i<t[0]?t[0]-i:t[2]<i?i-t[2]:0)*n+(o=e<t[1]?t[1]-e:t[3]<e?e-t[3]:0)*o}function xi(t,i){return Vi(t,i[0],i[1])}function ji(t,i){return t[0]<=i[0]&&i[2]<=t[2]&&t[1]<=i[1]&&i[3]<=t[3]}function Vi(t,i,e){return t[0]<=i&&i<=t[2]&&t[1]<=e&&e<=t[3]}function Bi(t,i){var e=t[0],n=t[1],o=t[2],r=t[3],s=i[0],a=i[1],h=Gi.UNKNOWN;return s<e?h|=Gi.LEFT:s>o&&(h|=Gi.RIGHT),a<n?h|=Gi.BELOW:a>r&&(h|=Gi.ABOVE),h===Gi.UNKNOWN&&(h=Gi.INTERSECTING),h}function Yi(){return[1/0,1/0,-1/0,-1/0]}function Hi(t,i,e,n,o){return o?(o[0]=t,o[1]=i,o[2]=e,o[3]=n,o):[t,i,e,n]}function Wi(t){return Hi(1/0,1/0,-1/0,-1/0,t)}function Xi(t,i){return t[0]==i[0]&&t[2]==i[2]&&t[1]==i[1]&&t[3]==i[3]}function qi(t,i){return i[0]<t[0]&&(t[0]=i[0]),i[2]>t[2]&&(t[2]=i[2]),i[1]<t[1]&&(t[1]=i[1]),i[3]>t[3]&&(t[3]=i[3]),t}function Qi(t,i){i[0]<t[0]&&(t[0]=i[0]),i[0]>t[2]&&(t[2]=i[0]),i[1]<t[1]&&(t[1]=i[1]),i[1]>t[3]&&(t[3]=i[1])}function $i(t,i){for(var e=0,n=i.length;e<n;++e)Qi(t,i[e]);return t}function Ji(t,i,e,n,o){for(;e<n;e+=o)ki(t,i[e],i[e+1]);return t}function ki(t,i,e){t[0]=Math.min(t[0],i),t[1]=Math.min(t[1],e),t[2]=Math.max(t[2],i),t[3]=Math.max(t[3],e)}function Si(t){var i=0;return le(t)||(i=ue(t)*re(t)),i}function te(t){return[t[0],t[1]]}function ie(t){return[t[2],t[1]]}function ee(t){return[(t[0]+t[2])/2,(t[1]+t[3])/2]}function ne(t,i){var e;return i===Ni.BOTTOM_LEFT?e=te(t):i===Ni.BOTTOM_RIGHT?e=ie(t):i===Ni.TOP_LEFT?e=ae(t):i===Ni.TOP_RIGHT?e=he(t):ii(!1,13),e}function oe(t,i,e,n,o){var r=i*n[0]/2,s=i*n[1]/2,a=Math.cos(e),h=Math.sin(e),u=r*a,p=r*h,l=s*a,c=s*h,_=t[0],d=t[1],f=_-u+c,v=_-u-c,g=_+u-c,y=_+u+c,m=d-p-l,E=d-p+l,T=d+p+l,C=d+p-l;return Hi(Math.min(f,v,g,y),Math.min(m,E,T,C),Math.max(f,v,g,y),Math.max(m,E,T,C),o)}function re(t){return t[3]-t[1]}function se(t,i,e){var n=e||[1/0,1/0,-1/0,-1/0];return pe(t,i)?(t[0]>i[0]?n[0]=t[0]:n[0]=i[0],t[1]>i[1]?n[1]=t[1]:n[1]=i[1],t[2]<i[2]?n[2]=t[2]:n[2]=i[2],t[3]<i[3]?n[3]=t[3]:n[3]=i[3]):Wi(n),n}function ae(t){return[t[0],t[3]]}function he(t){return[t[2],t[3]]}function ue(t){return t[2]-t[0]}function pe(t,i){return t[0]<=i[2]&&t[2]>=i[0]&&t[1]<=i[3]&&t[3]>=i[1]}function le(t){return t[2]<t[0]||t[3]<t[1]}var ce={POINT:"Point",LINE_STRING:"LineString",LINEAR_RING:"LinearRing",POLYGON:"Polygon",MULTI_POINT:"MultiPoint",MULTI_LINE_STRING:"MultiLineString",MULTI_POLYGON:"MultiPolygon",GEOMETRY_COLLECTION:"GeometryCollection",CIRCLE:"Circle"},_e={XY:"XY",XYZ:"XYZ",XYM:"XYM",XYZM:"XYZM"};function de(t,i,e,n,o,r){for(var s=r||[],a=0,h=i;h<e;h+=n){var u=t[h],p=t[h+1];s[a++]=o[0]*u+o[2]*p+o[4],s[a++]=o[1]*u+o[3]*p+o[5]}return r&&s.length!=a&&(s.length=a),s}
/**
 * @license
 * Latitude/longitude spherical geodesy formulae taken from
 * http://www.movable-type.co.uk/scripts/latlong.html
 * Licensed under CC-BY-3.0.
 */
var fe=6371008.8;function ve(t,i,e){var n=e||fe,o=pi(t[1]),r=pi(i[1]),s=(r-o)/2,a=pi(i[0]-t[0])/2,h=Math.sin(s)*Math.sin(s)+Math.sin(a)*Math.sin(a)*Math.cos(o)*Math.cos(r);return 2*n*Math.atan2(Math.sqrt(h),Math.sqrt(1-h))}var ge={DEGREES:"degrees",FEET:"ft",METERS:"m",PIXELS:"pixels",TILE_PIXELS:"tile-pixels",USFEET:"us-ft"},ye={};ye[ge.DEGREES]=2*Math.PI*6370997/360,ye[ge.FEET]=.3048,ye[ge.METERS]=1,ye[ge.USFEET]=1200/3937;var me=ge,Ee=function(t){this.code_=t.code,this.units_=t.units,this.extent_=void 0!==t.extent?t.extent:null,this.worldExtent_=void 0!==t.worldExtent?t.worldExtent:null,this.axisOrientation_=void 0!==t.axisOrientation?t.axisOrientation:"enu",this.global_=void 0!==t.global&&t.global,this.canWrapX_=!(!this.global_||!this.extent_),this.getPointResolutionFunc_=t.getPointResolution,this.defaultTileGrid_=null,this.metersPerUnit_=t.metersPerUnit};Ee.prototype.canWrapX=function(){return this.canWrapX_},Ee.prototype.getCode=function(){return this.code_},Ee.prototype.getExtent=function(){return this.extent_},Ee.prototype.getUnits=function(){return this.units_},Ee.prototype.getMetersPerUnit=function(){return this.metersPerUnit_||ye[this.units_]},Ee.prototype.getWorldExtent=function(){return this.worldExtent_},Ee.prototype.getAxisOrientation=function(){return this.axisOrientation_},Ee.prototype.isGlobal=function(){return this.global_},Ee.prototype.setGlobal=function(t){this.global_=t,this.canWrapX_=!(!t||!this.extent_)},Ee.prototype.getDefaultTileGrid=function(){return this.defaultTileGrid_},Ee.prototype.setDefaultTileGrid=function(t){this.defaultTileGrid_=t},Ee.prototype.setExtent=function(t){this.extent_=t,this.canWrapX_=!(!this.global_||!t)},Ee.prototype.setWorldExtent=function(t){this.worldExtent_=t},Ee.prototype.setGetPointResolution=function(t){this.getPointResolutionFunc_=t},Ee.prototype.getPointResolutionFunc=function(){return this.getPointResolutionFunc_};var Te=Ee,Ce=6378137,Re=Math.PI*Ce,Ie=[-Re,-Re,Re,Re],we=[-180,-85,180,85],Me=function(t){function i(i){t.call(this,{code:i,units:me.METERS,extent:Ie,global:!0,worldExtent:we,getPointResolution:function(t,i){return t/ai(i[1]/Ce)}})}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(Te),Oe=[new Me("EPSG:3857"),new Me("EPSG:102100"),new Me("EPSG:102113"),new Me("EPSG:900913"),new Me("urn:ogc:def:crs:EPSG:6.18:3:3857"),new Me("urn:ogc:def:crs:EPSG::3857"),new Me("http://www.opengis.net/gml/srs/epsg.xml#3857")];function be(t,i,e){var n=t.length,o=e>1?e:2,r=i;void 0===r&&(r=o>2?t.slice():new Array(n));for(var s=Re,a=0;a<n;a+=o){r[a]=s*t[a]/180;var h=Ce*Math.log(Math.tan(Math.PI*(t[a+1]+90)/360));h>s?h=s:h<-s&&(h=-s),r[a+1]=h}return r}function Pe(t,i,e){var n=t.length,o=e>1?e:2,r=i;void 0===r&&(r=o>2?t.slice():new Array(n));for(var s=0;s<n;s+=o)r[s]=180*t[s]/Re,r[s+1]=360*Math.atan(Math.exp(t[s+1]/Ce))/Math.PI-90;return r}var Ae=[-180,-90,180,90],Le=6378137*Math.PI/180,De=function(t){function i(i,e){t.call(this,{code:i,units:me.DEGREES,extent:Ae,axisOrientation:e,global:!0,metersPerUnit:Le,worldExtent:Ae})}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(Te),Fe=[new De("CRS:84"),new De("EPSG:4326","neu"),new De("urn:ogc:def:crs:EPSG::4326","neu"),new De("urn:ogc:def:crs:EPSG:6.6:4326","neu"),new De("urn:ogc:def:crs:OGC:1.3:CRS84"),new De("urn:ogc:def:crs:OGC:2:84"),new De("http://www.opengis.net/gml/srs/epsg.xml#4326","neu"),new De("urn:x-ogc:def:crs:EPSG:4326","neu")],Ne={};var Ge,Ke,Ze,ze={};function Ue(t,i,e){var n=t.getCode(),o=i.getCode();n in ze||(ze[n]={}),ze[n][o]=e}function xe(t,i,e){var n;if(void 0!==i){for(var o=0,r=t.length;o<r;++o)i[o]=t[o];n=i}else n=t.slice();return n}function je(t,i,e){if(void 0!==i&&t!==i){for(var n=0,o=t.length;n<o;++n)i[n]=t[n];t=i}return t}function Ve(t){!function(t,i){Ne[t]=i}(t.getCode(),t),Ue(t,t,xe)}function Be(t){return"string"==typeof t?Ne[t]||null:t||null}function Ye(t,i,e,n){var o,r=(t=Be(t)).getPointResolutionFunc();if(r)o=r(i,e);else if(t.getUnits()==me.DEGREES&&!n||n==me.DEGREES)o=i;else{var s=qe(t,Be("EPSG:4326")),a=[e[0]-i/2,e[1],e[0]+i/2,e[1],e[0],e[1]-i/2,e[0],e[1]+i/2];o=(ve((a=s(a,a,2)).slice(0,2),a.slice(2,4))+ve(a.slice(4,6),a.slice(6,8)))/2;var h=n?ye[n]:t.getMetersPerUnit();void 0!==h&&(o/=h)}return o}function He(t){!function(t){t.forEach(Ve)}(t),t.forEach(function(i){t.forEach(function(t){i!==t&&Ue(i,t,xe)})})}function We(t,i){return t?"string"==typeof t?Be(t):t:Be(i)}function Xe(t,i){if(t===i)return!0;var e=t.getUnits()===i.getUnits();return t.getCode()===i.getCode()?e:qe(t,i)===xe&&e}function qe(t,i){var e=function(t,i){var e;return t in ze&&i in ze[t]&&(e=ze[t][i]),e}(t.getCode(),i.getCode());return e||(e=je),e}function Qe(t,i){return qe(Be(t),Be(i))}function $e(t,i,e){return Qe(i,e)(t,void 0,t.length)}He(Oe),He(Fe),Ge=Oe,Ke=be,Ze=Pe,Fe.forEach(function(t){Ge.forEach(function(i){Ue(t,i,Ke),Ue(i,t,Ze)})});var Je=new Array(6);function ke(t){return tn(t,1,0,0,1,0,0)}function Se(t,i){var e=t[0],n=t[1],o=t[2],r=t[3],s=t[4],a=t[5],h=i[0],u=i[1],p=i[2],l=i[3],c=i[4],_=i[5];return t[0]=e*h+o*u,t[1]=n*h+r*u,t[2]=e*p+o*l,t[3]=n*p+r*l,t[4]=e*c+o*_+s,t[5]=n*c+r*_+a,t}function tn(t,i,e,n,o,r,s){return t[0]=i,t[1]=e,t[2]=n,t[3]=o,t[4]=r,t[5]=s,t}function en(t,i){return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t}function nn(t,i){var e=i[0],n=i[1];return i[0]=t[0]*e+t[2]*n+t[4],i[1]=t[1]*e+t[3]*n+t[5],i}function on(t,i,e){return Se(t,tn(Je,i,0,0,e,0,0))}function rn(t,i,e){return Se(t,tn(Je,1,0,0,1,i,e))}function sn(t,i,e,n,o,r,s,a){var h=Math.sin(r),u=Math.cos(r);return t[0]=n*u,t[1]=o*h,t[2]=-n*h,t[3]=o*u,t[4]=s*n*u-a*n*h+i,t[5]=s*o*h+a*o*u+e,t}var an=[1,0,0,1,0,0];function hn(t){var i;return t==_e.XY?i=2:t==_e.XYZ||t==_e.XYM?i=3:t==_e.XYZM&&(i=4),i}var un=function(t){function i(){t.call(this),this.layout=_e.XY,this.stride=2,this.flatCoordinates=null}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.computeExtent=function(t){return i=this.flatCoordinates,e=0,n=this.flatCoordinates.length,o=this.stride,Ji(Wi(t),i,e,n,o);var i,e,n,o},i.prototype.getCoordinates=function(){return n()},i.prototype.getFirstCoordinate=function(){return this.flatCoordinates.slice(0,this.stride)},i.prototype.getFlatCoordinates=function(){return this.flatCoordinates},i.prototype.getLastCoordinate=function(){return this.flatCoordinates.slice(this.flatCoordinates.length-this.stride)},i.prototype.getLayout=function(){return this.layout},i.prototype.getSimplifiedGeometry=function(t){if(this.simplifiedGeometryRevision!=this.getRevision()&&(l(this.simplifiedGeometryCache),this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=this.getRevision()),t<0||0!==this.simplifiedGeometryMaxMinSquaredTolerance&&t<=this.simplifiedGeometryMaxMinSquaredTolerance)return this;var i=t.toString();if(this.simplifiedGeometryCache.hasOwnProperty(i))return this.simplifiedGeometryCache[i];var e=this.getSimplifiedGeometryInternal(t);return e.getFlatCoordinates().length<this.flatCoordinates.length?(this.simplifiedGeometryCache[i]=e,e):(this.simplifiedGeometryMaxMinSquaredTolerance=t,this)},i.prototype.getSimplifiedGeometryInternal=function(t){return this},i.prototype.getStride=function(){return this.stride},i.prototype.setFlatCoordinates=function(t,i){this.stride=hn(t),this.layout=t,this.flatCoordinates=i},i.prototype.setCoordinates=function(t,i){n()},i.prototype.setLayout=function(t,i,e){var n;if(t)n=hn(t);else{for(var o=0;o<e;++o){if(0===i.length)return this.layout=_e.XY,void(this.stride=2);i=i[0]}t=function(t){var i;2==t?i=_e.XY:3==t?i=_e.XYZ:4==t&&(i=_e.XYZM);return i}(n=i.length)}this.layout=t,this.stride=n},i.prototype.applyTransform=function(t){this.flatCoordinates&&(t(this.flatCoordinates,this.flatCoordinates,this.stride),this.changed())},i.prototype.rotate=function(t,i){var e=this.getFlatCoordinates();if(e){var n=this.getStride();!function(t,i,e,n,o,r,s){for(var a=s||[],h=Math.cos(o),u=Math.sin(o),p=r[0],l=r[1],c=0,_=i;_<e;_+=n){var d=t[_]-p,f=t[_+1]-l;a[c++]=p+d*h-f*u,a[c++]=l+d*u+f*h;for(var v=_+2;v<_+n;++v)a[c++]=t[v]}s&&a.length!=c&&(a.length=c)}(e,0,e.length,n,t,i,e),this.changed()}},i.prototype.scale=function(t,i,e){var n=i;void 0===n&&(n=t);var o=e;o||(o=ee(this.getExtent()));var r=this.getFlatCoordinates();if(r){var s=this.getStride();!function(t,i,e,n,o,r,s,a){for(var h=a||[],u=s[0],p=s[1],l=0,c=i;c<e;c+=n){var _=t[c]-u,d=t[c+1]-p;h[l++]=u+o*_,h[l++]=p+r*d;for(var f=c+2;f<c+n;++f)h[l++]=t[f]}a&&h.length!=l&&(h.length=l)}(r,0,r.length,s,t,n,o,r),this.changed()}},i.prototype.translate=function(t,i){var e=this.getFlatCoordinates();if(e){var n=this.getStride();!function(t,i,e,n,o,r,s){for(var a=s||[],h=0,u=i;u<e;u+=n){a[h++]=t[u]+o,a[h++]=t[u+1]+r;for(var p=u+2;p<u+n;++p)a[h++]=t[p]}s&&a.length!=h&&(a.length=h)}(e,0,e.length,n,t,i,e),this.changed()}},i}(function(t){function i(){t.call(this),this.extent_=[1/0,1/0,-1/0,-1/0],this.extentRevision_=-1,this.simplifiedGeometryCache={},this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=0}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.clone=function(){return n()},i.prototype.closestPointXY=function(t,i,e,o){return n()},i.prototype.containsXY=function(t,i){return!1},i.prototype.getClosestPoint=function(t,i){var e=i||[NaN,NaN];return this.closestPointXY(t[0],t[1],e,1/0),e},i.prototype.intersectsCoordinate=function(t){return this.containsXY(t[0],t[1])},i.prototype.computeExtent=function(t){return n()},i.prototype.getExtent=function(t){return this.extentRevision_!=this.getRevision()&&(this.extent_=this.computeExtent(this.extent_),this.extentRevision_=this.getRevision()),function(t,i){return i?(i[0]=t[0],i[1]=t[1],i[2]=t[2],i[3]=t[3],i):t}(this.extent_,t)},i.prototype.rotate=function(t,i){n()},i.prototype.scale=function(t,i,e){n()},i.prototype.simplify=function(t){return this.getSimplifiedGeometry(t*t)},i.prototype.getSimplifiedGeometry=function(t){return n()},i.prototype.getType=function(){return n()},i.prototype.applyTransform=function(t){n()},i.prototype.intersectsExtent=function(t){return n()},i.prototype.translate=function(t,i){n()},i.prototype.transform=function(t,i){var e=Be(t),n=e.getUnits()==me.TILE_PIXELS?function(t,n,o){var r=e.getExtent(),s=e.getWorldExtent(),a=re(s)/re(r);return sn(an,s[0],s[3],a,-a,0,0,0),de(t,0,t.length,o,an,n),Qe(e,i)(t,n,o)}:Qe(e,i);return this.applyTransform(n),this},i}(G));function pn(t,i,e,n){for(var o=0,r=t[e-n],s=t[e-n+1];i<e;i+=n){var a=t[i],h=t[i+1];o+=s*a-r*h,r=a,s=h}return o/2}function ln(t,i,e,n){for(var o=0,r=0,s=e.length;r<s;++r){var a=e[r];o+=pn(t,i,a,n),i=a}return o}function cn(t,i,e,n,o,r,s){var a,h=t[i],u=t[i+1],p=t[e]-h,l=t[e+1]-u;if(0===p&&0===l)a=i;else{var c=((o-h)*p+(r-u)*l)/(p*p+l*l);if(c>1)a=e;else{if(c>0){for(var _=0;_<n;++_)s[_]=ci(t[i+_],t[e+_],c);return void(s.length=n)}a=i}}for(var d=0;d<n;++d)s[d]=t[a+d];s.length=n}function _n(t,i,e,n,o){var r=t[i],s=t[i+1];for(i+=n;i<e;i+=n){var a=t[i],h=t[i+1],u=ui(r,s,a,h);u>o&&(o=u),r=a,s=h}return o}function dn(t,i,e,n,o){for(var r=0,s=e.length;r<s;++r){var a=e[r];o=_n(t,i,a,n,o),i=a}return o}function fn(t,i,e,n,o,r,s,a,h,u,p){if(i==e)return u;var l,c;if(0===o){if((c=ui(s,a,t[i],t[i+1]))<u){for(l=0;l<n;++l)h[l]=t[i+l];return h.length=n,c}return u}for(var _=p||[NaN,NaN],d=i+n;d<e;)if(cn(t,d-n,d,n,s,a,_),(c=ui(s,a,_[0],_[1]))<u){for(u=c,l=0;l<n;++l)h[l]=_[l];h.length=n,d+=n}else d+=n*Math.max((Math.sqrt(c)-Math.sqrt(u))/o|0,1);if(r&&(cn(t,e-n,i,n,s,a,_),(c=ui(s,a,_[0],_[1]))<u)){for(u=c,l=0;l<n;++l)h[l]=_[l];h.length=n}return u}function vn(t,i,e,n,o,r,s,a,h,u,p){for(var l=p||[NaN,NaN],c=0,_=e.length;c<_;++c){var d=e[c];u=fn(t,i,d,n,o,r,s,a,h,u,l),i=d}return u}function gn(t,i,e,n){for(var o=0,r=e.length;o<r;++o)for(var s=e[o],a=0;a<n;++a)t[i++]=s[a];return i}function yn(t,i,e,n,o){for(var r=o||[],s=0,a=0,h=e.length;a<h;++a){var u=gn(t,i,e[a],n);r[s++]=u,i=u}return r.length=s,r}function mn(t,i,e,n,o){for(var r=void 0!==o?o:[],s=0,a=i;a<e;a+=n)r[s++]=t.slice(a,a+n);return r.length=s,r}function En(t,i,e,n,o){for(var r=void 0!==o?o:[],s=0,a=0,h=e.length;a<h;++a){var u=e[a];r[s++]=mn(t,i,u,n,r[s]),i=u}return r.length=s,r}function Tn(t,i,e,n,o){for(var r=void 0!==o?o:[],s=0,a=0,h=e.length;a<h;++a){var u=e[a];r[s++]=En(t,i,u,n,r[s]),i=u[u.length-1]}return r.length=s,r}function Cn(t,i,e,n,o,r,s){var a=(e-i)/n;if(a<3){for(;i<e;i+=n)r[s++]=t[i],r[s++]=t[i+1];return s}var h=new Array(a);h[0]=1,h[a-1]=1;for(var u=[i,e-n],p=0;u.length>0;){for(var l=u.pop(),c=u.pop(),_=0,d=t[c],f=t[c+1],v=t[l],g=t[l+1],y=c+n;y<l;y+=n){var m=hi(t[y],t[y+1],d,f,v,g);m>_&&(p=y,_=m)}_>o&&(h[(p-i)/n]=1,c+n<p&&u.push(c,p),p+n<l&&u.push(p,l))}for(var E=0;E<a;++E)h[E]&&(r[s++]=t[i+E*n],r[s++]=t[i+E*n+1]);return s}function Rn(t,i){return i*Math.round(t/i)}function In(t,i,e,n,o,r,s){if(i==e)return s;var a,h,u=Rn(t[i],o),p=Rn(t[i+1],o);i+=n,r[s++]=u,r[s++]=p;do{if(a=Rn(t[i],o),h=Rn(t[i+1],o),(i+=n)==e)return r[s++]=a,r[s++]=h,s}while(a==u&&h==p);for(;i<e;){var l=Rn(t[i],o),c=Rn(t[i+1],o);if(i+=n,l!=a||c!=h){var _=a-u,d=h-p,f=l-u,v=c-p;_*v==d*f&&(_<0&&f<_||_==f||_>0&&f>_)&&(d<0&&v<d||d==v||d>0&&v>d)?(a=l,h=c):(r[s++]=a,r[s++]=h,u=a,p=h,a=l,h=c)}}return r[s++]=a,r[s++]=h,s}function wn(t,i,e,n,o,r,s,a){for(var h=0,u=e.length;h<u;++h){var p=e[h];s=In(t,i,p,n,o,r,s),a.push(s),i=p}return s}var Mn=function(t){function i(i,e){t.call(this),this.maxDelta_=-1,this.maxDeltaRevision_=-1,void 0===e||Array.isArray(i[0])?this.setCoordinates(i,e):this.setFlatCoordinates(e,i)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.clone=function(){return new i(this.flatCoordinates.slice(),this.layout)},i.prototype.closestPointXY=function(t,i,e,n){return n<Ui(this.getExtent(),t,i)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(_n(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),fn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!0,t,i,e,n))},i.prototype.getArea=function(){return pn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},i.prototype.getCoordinates=function(){return mn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},i.prototype.getSimplifiedGeometryInternal=function(t){var e=[];return e.length=Cn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,e,0),new i(e,_e.XY)},i.prototype.getType=function(){return ce.LINEAR_RING},i.prototype.intersectsExtent=function(t){return!1},i.prototype.setCoordinates=function(t,i){this.setLayout(i,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=gn(this.flatCoordinates,0,t,this.stride),this.changed()},i}(un),On=function(t){function i(i,e){t.call(this),this.setCoordinates(i,e)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.clone=function(){return new i(this.flatCoordinates.slice(),this.layout)},i.prototype.closestPointXY=function(t,i,e,n){var o=this.flatCoordinates,r=ui(t,i,o[0],o[1]);if(r<n){for(var s=this.stride,a=0;a<s;++a)e[a]=o[a];return e.length=s,r}return n},i.prototype.getCoordinates=function(){return this.flatCoordinates?this.flatCoordinates.slice():[]},i.prototype.computeExtent=function(t){return i=this.flatCoordinates,e=t,n=i[0],o=i[1],Hi(n,o,n,o,e);var i,e,n,o},i.prototype.getType=function(){return ce.POINT},i.prototype.intersectsExtent=function(t){return Vi(t,this.flatCoordinates[0],this.flatCoordinates[1])},i.prototype.setCoordinates=function(t,i){this.setLayout(i,t,0),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=function(t,i,e,n){for(var o=0,r=e.length;o<r;++o)t[i++]=e[o];return i}(this.flatCoordinates,0,t,this.stride),this.changed()},i}(un);function bn(t,i,e,n,o){return!function(t,i,e){var n;return(n=i.call(e,te(t)))?n:(n=i.call(e,ie(t)))?n:(n=i.call(e,he(t)))?n:(n=i.call(e,ae(t)))||!1}(o,function(o){return!Pn(t,i,e,n,o[0],o[1])})}function Pn(t,i,e,n,o,r){for(var s=0,a=t[e-n],h=t[e-n+1];i<e;i+=n){var u=t[i],p=t[i+1];h<=r?p>r&&(u-a)*(r-h)-(o-a)*(p-h)>0&&s++:p<=r&&(u-a)*(r-h)-(o-a)*(p-h)<0&&s--,a=u,h=p}return 0!==s}function An(t,i,e,n,o,r){if(0===e.length)return!1;if(!Pn(t,i,e[0],n,o,r))return!1;for(var s=1,a=e.length;s<a;++s)if(Pn(t,e[s-1],e[s],n,o,r))return!1;return!0}function Ln(t,i,e,n,o,r,s){for(var a,h,u,p,l,c,_,d=o[r+1],f=[],v=0,g=e.length;v<g;++v){var y=e[v];for(p=t[y-n],c=t[y-n+1],a=i;a<y;a+=n)l=t[a],_=t[a+1],(d<=c&&_<=d||c<=d&&d<=_)&&(u=(d-c)/(_-c)*(l-p)+p,f.push(u)),p=l,c=_}var m=NaN,E=-1/0;for(f.sort(Ft),p=f[0],a=1,h=f.length;a<h;++a){l=f[a];var T=Math.abs(l-p);T>E&&An(t,i,e,n,u=(p+l)/2,d)&&(m=u,E=T),p=l}return isNaN(m)&&(m=o[r]),s?(s.push(m,d,E),s):[m,d,E]}function Dn(t,i,e,n,o){var r=Ji([1/0,1/0,-1/0,-1/0],t,i,e,n);return!!pe(o,r)&&(!!ji(o,r)||(r[0]>=o[0]&&r[2]<=o[2]||(r[1]>=o[1]&&r[3]<=o[3]||function(t,i,e,n,o,r){for(var s,a=[t[i],t[i+1]],h=[];i+n<e;i+=n){if(h[0]=t[i+n],h[1]=t[i+n+1],s=o.call(r,a,h))return s;a[0]=h[0],a[1]=h[1]}return!1}(t,i,e,n,function(t,i){return function(t,i,e){var n=!1,o=Bi(t,i),r=Bi(t,e);if(o===Gi.INTERSECTING||r===Gi.INTERSECTING)n=!0;else{var s,a,h=t[0],u=t[1],p=t[2],l=t[3],c=i[0],_=i[1],d=e[0],f=e[1],v=(f-_)/(d-c);r&Gi.ABOVE&&!(o&Gi.ABOVE)&&(n=(s=d-(f-l)/v)>=h&&s<=p),n||!(r&Gi.RIGHT)||o&Gi.RIGHT||(n=(a=f-(d-p)*v)>=u&&a<=l),n||!(r&Gi.BELOW)||o&Gi.BELOW||(n=(s=d-(f-u)/v)>=h&&s<=p),n||!(r&Gi.LEFT)||o&Gi.LEFT||(n=(a=f-(d-h)*v)>=u&&a<=l)}return n}(o,t,i)}))))}function Fn(t,i,e,n,o){if(!function(t,i,e,n,o){return!!(Dn(t,i,e,n,o)||Pn(t,i,e,n,o[0],o[1])||Pn(t,i,e,n,o[0],o[3])||Pn(t,i,e,n,o[2],o[1])||Pn(t,i,e,n,o[2],o[3]))}(t,i,e[0],n,o))return!1;if(1===e.length)return!0;for(var r=1,s=e.length;r<s;++r)if(bn(t,e[r-1],e[r],n,o)&&!Dn(t,e[r-1],e[r],n,o))return!1;return!0}function Nn(t,i,e,n){for(;i<e-n;){for(var o=0;o<n;++o){var r=t[i+o];t[i+o]=t[e-n+o],t[e-n+o]=r}i+=n,e-=n}}function Gn(t,i,e,n){for(var o=0,r=t[e-n],s=t[e-n+1];i<e;i+=n){var a=t[i],h=t[i+1];o+=(a-r)*(h+s),r=a,s=h}return o>0}function Kn(t,i,e,n,o){for(var r=void 0!==o&&o,s=0,a=e.length;s<a;++s){var h=e[s],u=Gn(t,i,h,n);if(0===s){if(r&&u||!r&&!u)return!1}else if(r&&!u||!r&&u)return!1;i=h}return!0}function Zn(t,i,e,n,o){for(var r=void 0!==o&&o,s=0,a=e.length;s<a;++s){var h=e[s],u=Gn(t,i,h,n);(0===s?r&&u||!r&&!u:r&&!u||!r&&u)&&Nn(t,i,h,n),i=h}return i}var zn=function(t){function i(i,e,n){t.call(this),this.ends_=[],this.flatInteriorPointRevision_=-1,this.flatInteriorPoint_=null,this.maxDelta_=-1,this.maxDeltaRevision_=-1,this.orientedRevision_=-1,this.orientedFlatCoordinates_=null,void 0!==e&&n?(this.setFlatCoordinates(e,i),this.ends_=n):this.setCoordinates(i,e)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.appendLinearRing=function(t){this.flatCoordinates?Kt(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()},i.prototype.clone=function(){return new i(this.flatCoordinates.slice(),this.layout,this.ends_.slice())},i.prototype.closestPointXY=function(t,i,e,n){return n<Ui(this.getExtent(),t,i)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(dn(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),vn(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!0,t,i,e,n))},i.prototype.containsXY=function(t,i){return An(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,i)},i.prototype.getArea=function(){return ln(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride)},i.prototype.getCoordinates=function(t){var i;return void 0!==t?Zn(i=this.getOrientedFlatCoordinates().slice(),0,this.ends_,this.stride,t):i=this.flatCoordinates,En(i,0,this.ends_,this.stride)},i.prototype.getEnds=function(){return this.ends_},i.prototype.getFlatInteriorPoint=function(){if(this.flatInteriorPointRevision_!=this.getRevision()){var t=ee(this.getExtent());this.flatInteriorPoint_=Ln(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,0),this.flatInteriorPointRevision_=this.getRevision()}return this.flatInteriorPoint_},i.prototype.getInteriorPoint=function(){return new On(this.getFlatInteriorPoint(),_e.XYM)},i.prototype.getLinearRingCount=function(){return this.ends_.length},i.prototype.getLinearRing=function(t){return t<0||this.ends_.length<=t?null:new Mn(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)},i.prototype.getLinearRings=function(){for(var t=this.layout,i=this.flatCoordinates,e=this.ends_,n=[],o=0,r=0,s=e.length;r<s;++r){var a=e[r],h=new Mn(i.slice(o,a),t);n.push(h),o=a}return n},i.prototype.getOrientedFlatCoordinates=function(){if(this.orientedRevision_!=this.getRevision()){var t=this.flatCoordinates;Kn(t,0,this.ends_,this.stride)?this.orientedFlatCoordinates_=t:(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=Zn(this.orientedFlatCoordinates_,0,this.ends_,this.stride)),this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_},i.prototype.getSimplifiedGeometryInternal=function(t){var e=[],n=[];return e.length=wn(this.flatCoordinates,0,this.ends_,this.stride,Math.sqrt(t),e,0,n),new i(e,_e.XY,n)},i.prototype.getType=function(){return ce.POLYGON},i.prototype.intersectsExtent=function(t){return Fn(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t)},i.prototype.setCoordinates=function(t,i){this.setLayout(i,t,2),this.flatCoordinates||(this.flatCoordinates=[]);var e=yn(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===e.length?0:e[e.length-1],this.changed()},i}(un),Un=zn;function xn(t){var i=t[0],e=t[1],n=t[2],o=t[3],r=[i,e,i,o,n,o,n,e,i,e];return new zn(r,_e.XY,[r.length])}var jn=0;function Vn(t,i){setTimeout(function(){t(i)},0)}function Bn(t){return!(t.sourceCenter&&t.targetCenter&&!Oi(t.sourceCenter,t.targetCenter))&&(t.sourceResolution===t.targetResolution&&t.sourceRotation===t.targetRotation)}var Yn=function(t){function i(i){t.call(this);var e=p({},i);this.hints_=[0,0],this.animations_=[],this.updateAnimationKey_,this.updateAnimations_=this.updateAnimations_.bind(this),this.projection_=We(e.projection,"EPSG:3857"),this.applyOptions_(e)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.applyOptions_=function(t){var i={};i[Ri]=void 0!==t.center?t.center:null;var e=function(t){var i,e,n,o=void 0!==t.minZoom?t.minZoom:jn,r=void 0!==t.maxZoom?t.maxZoom:28,s=void 0!==t.zoomFactor?t.zoomFactor:2;if(void 0!==t.resolutions){var a=t.resolutions;e=a[o],n=void 0!==a[r]?a[r]:a[a.length-1],i=fi(a)}else{var h=We(t.projection,"EPSG:3857"),u=h.getExtent(),p=u?Math.max(ue(u),re(u)):360*ye[me.DEGREES]/h.getMetersPerUnit(),l=p/ri/Math.pow(2,jn),c=l/Math.pow(2,28-jn);void 0!==(e=t.maxResolution)?o=0:e=l/Math.pow(s,o),void 0===(n=t.minResolution)&&(n=void 0!==t.maxZoom?void 0!==t.maxResolution?e/Math.pow(s,r):l/Math.pow(s,r):c),r=o+Math.floor(Math.log(e/n)/Math.log(s)),n=e/Math.pow(s,r-o),i=vi(s,e,r-o)}return{constraint:i,maxResolution:e,minResolution:n,minZoom:o,zoomFactor:s}}(t);this.maxResolution_=e.maxResolution,this.minResolution_=e.minResolution,this.zoomFactor_=e.zoomFactor,this.resolutions_=t.resolutions,this.minZoom_=e.minZoom;var n=function(t){return void 0!==t.extent?_i(t.extent):di}(t),o=e.constraint,r=function(t){if(void 0===t.enableRotation||t.enableRotation){var i=t.constrainRotation;return void 0===i||!0===i?Ei():!1===i?yi:"number"==typeof i?mi(i):yi}return gi}(t);this.constraints_={center:n,resolution:o,rotation:r},void 0!==t.resolution?i[Ii]=t.resolution:void 0!==t.zoom&&(i[Ii]=this.constrainResolution(this.maxResolution_,t.zoom-this.minZoom_),this.resolutions_&&(i[Ii]=si(Number(this.getResolution()||i[Ii]),this.minResolution_,this.maxResolution_))),i[wi]=void 0!==t.rotation?t.rotation:0,this.setProperties(i),this.options_=t},i.prototype.getUpdatedOptions_=function(t){var i=p({},this.options_);return void 0!==i.resolution?i.resolution=this.getResolution():i.zoom=this.getZoom(),i.center=this.getCenter(),i.rotation=this.getRotation(),p({},i,t)},i.prototype.animate=function(t){var i,e=arguments,n=arguments.length;if(n>1&&"function"==typeof arguments[n-1]&&(i=arguments[n-1],--n),!this.isDef()){var o=arguments[n-1];return o.center&&this.setCenter(o.center),void 0!==o.zoom&&this.setZoom(o.zoom),void 0!==o.rotation&&this.setRotation(o.rotation),void(i&&Vn(i,!0))}for(var r=Date.now(),s=this.getCenter().slice(),a=this.getResolution(),h=this.getRotation(),u=[],p=0;p<n;++p){var l=e[p],c={start:r,complete:!1,anchor:l.anchor,duration:void 0!==l.duration?l.duration:1e3,easing:l.easing||Di};if(l.center&&(c.sourceCenter=s,c.targetCenter=l.center,s=c.targetCenter),void 0!==l.zoom?(c.sourceResolution=a,c.targetResolution=this.constrainResolution(this.maxResolution_,l.zoom-this.minZoom_,0),a=c.targetResolution):l.resolution&&(c.sourceResolution=a,c.targetResolution=l.resolution,a=c.targetResolution),void 0!==l.rotation){c.sourceRotation=h;var _=li(l.rotation-h+Math.PI,2*Math.PI)-Math.PI;c.targetRotation=h+_,h=c.targetRotation}c.callback=i,Bn(c)?c.complete=!0:r+=c.duration,u.push(c)}this.animations_.push(u),this.setHint(Ti,1),this.updateAnimations_()},i.prototype.getAnimating=function(){return this.hints_[Ti]>0},i.prototype.getInteracting=function(){return this.hints_[Ci]>0},i.prototype.cancelAnimations=function(){this.setHint(Ti,-this.hints_[Ti]);for(var t=0,i=this.animations_.length;t<i;++t){var e=this.animations_[t];e[0].callback&&Vn(e[0].callback,!1)}this.animations_.length=0},i.prototype.updateAnimations_=function(){if(void 0!==this.updateAnimationKey_&&(cancelAnimationFrame(this.updateAnimationKey_),this.updateAnimationKey_=void 0),this.getAnimating()){for(var t=Date.now(),i=!1,e=this.animations_.length-1;e>=0;--e){for(var n=this.animations_[e],o=!0,r=0,s=n.length;r<s;++r){var a=n[r];if(!a.complete){var h=t-a.start,u=a.duration>0?h/a.duration:1;u>=1?(a.complete=!0,u=1):o=!1;var p=a.easing(u);if(a.sourceCenter){var l=a.sourceCenter[0],c=a.sourceCenter[1],_=l+p*(a.targetCenter[0]-l),d=c+p*(a.targetCenter[1]-c);this.set(Ri,[_,d])}if(a.sourceResolution&&a.targetResolution){var f=1===p?a.targetResolution:a.sourceResolution+p*(a.targetResolution-a.sourceResolution);a.anchor&&this.set(Ri,this.calculateCenterZoom(f,a.anchor)),this.set(Ii,f)}if(void 0!==a.sourceRotation&&void 0!==a.targetRotation){var v=1===p?li(a.targetRotation+Math.PI,2*Math.PI)-Math.PI:a.sourceRotation+p*(a.targetRotation-a.sourceRotation);a.anchor&&this.set(Ri,this.calculateCenterRotate(v,a.anchor)),this.set(wi,v)}if(i=!0,!a.complete)break}}if(o){this.animations_[e]=null,this.setHint(Ti,-1);var g=n[0].callback;g&&Vn(g,!0)}}this.animations_=this.animations_.filter(Boolean),i&&void 0===this.updateAnimationKey_&&(this.updateAnimationKey_=requestAnimationFrame(this.updateAnimations_))}},i.prototype.calculateCenterRotate=function(t,i){var e,n=this.getCenter();return void 0!==n&&(bi(e=[n[0]-i[0],n[1]-i[1]],t-this.getRotation()),Mi(e,i)),e},i.prototype.calculateCenterZoom=function(t,i){var e,n=this.getCenter(),o=this.getResolution();void 0!==n&&void 0!==o&&(e=[i[0]-t*(i[0]-n[0])/o,i[1]-t*(i[1]-n[1])/o]);return e},i.prototype.getSizeFromViewport_=function(){var t=[100,100],i='.ol-viewport[data-view="'+r(this)+'"]',e=document.querySelector(i);if(e){var n=getComputedStyle(e);t[0]=parseInt(n.width,10),t[1]=parseInt(n.height,10)}return t},i.prototype.constrainCenter=function(t){return this.constraints_.center(t)},i.prototype.constrainResolution=function(t,i,e){var n=i||0,o=e||0;return this.constraints_.resolution(t,n,o)},i.prototype.constrainRotation=function(t,i){var e=i||0;return this.constraints_.rotation(t,e)},i.prototype.getCenter=function(){return this.get(Ri)},i.prototype.getConstraints=function(){return this.constraints_},i.prototype.getHints=function(t){return void 0!==t?(t[0]=this.hints_[0],t[1]=this.hints_[1],t):this.hints_.slice()},i.prototype.calculateExtent=function(t){var i=t||this.getSizeFromViewport_(),e=this.getCenter();ii(e,1);var n=this.getResolution();ii(void 0!==n,2);var o=this.getRotation();return ii(void 0!==o,3),oe(e,n,o,i)},i.prototype.getMaxResolution=function(){return this.maxResolution_},i.prototype.getMinResolution=function(){return this.minResolution_},i.prototype.getMaxZoom=function(){return this.getZoomForResolution(this.minResolution_)},i.prototype.setMaxZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({maxZoom:t}))},i.prototype.getMinZoom=function(){return this.getZoomForResolution(this.maxResolution_)},i.prototype.setMinZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({minZoom:t}))},i.prototype.getProjection=function(){return this.projection_},i.prototype.getResolution=function(){return this.get(Ii)},i.prototype.getResolutions=function(){return this.resolutions_},i.prototype.getResolutionForExtent=function(t,i){var e=i||this.getSizeFromViewport_(),n=ue(t)/e[0],o=re(t)/e[1];return Math.max(n,o)},i.prototype.getResolutionForValueFunction=function(t){var i=t||2,e=this.maxResolution_,n=this.minResolution_,o=Math.log(e/n)/Math.log(i);return function(t){return e/Math.pow(i,t*o)}},i.prototype.getRotation=function(){return this.get(wi)},i.prototype.getValueForResolutionFunction=function(t){var i=t||2,e=this.maxResolution_,n=this.minResolution_,o=Math.log(e/n)/Math.log(i);return function(t){return Math.log(e/t)/Math.log(i)/o}},i.prototype.getState=function(t){var i=this.getCenter(),e=this.getProjection(),n=this.getResolution(),o=n/t,r=this.getRotation();return{center:[Math.round(i[0]/o)*o,Math.round(i[1]/o)*o],projection:void 0!==e?e:null,resolution:n,rotation:r,zoom:this.getZoom()}},i.prototype.getZoom=function(){var t,i=this.getResolution();return void 0!==i&&(t=this.getZoomForResolution(i)),t},i.prototype.getZoomForResolution=function(t){var i,e,n=this.minZoom_||0;if(this.resolutions_){var o=Nt(this.resolutions_,t,1);n=o,i=this.resolutions_[o],e=o==this.resolutions_.length-1?2:i/this.resolutions_[o+1]}else i=this.maxResolution_,e=this.zoomFactor_;return n+Math.log(i/t)/Math.log(e)},i.prototype.getResolutionForZoom=function(t){return this.constrainResolution(this.maxResolution_,t-this.minZoom_,0)},i.prototype.fit=function(t,i){var e,n=i||{},o=n.size;o||(o=this.getSizeFromViewport_()),ii(Array.isArray(t)||"function"==typeof t.getSimplifiedGeometry,24),Array.isArray(t)?(ii(!le(t),25),e=xn(t)):t.getType()===ce.CIRCLE?(e=xn(t=t.getExtent())).rotate(this.getRotation(),ee(t)):e=t;var r,s=void 0!==n.padding?n.padding:[0,0,0,0],a=void 0===n.constrainResolution||n.constrainResolution,h=void 0!==n.nearest&&n.nearest;r=void 0!==n.minResolution?n.minResolution:void 0!==n.maxZoom?this.constrainResolution(this.maxResolution_,n.maxZoom-this.minZoom_,0):0;for(var u=e.getFlatCoordinates(),p=this.getRotation(),l=Math.cos(-p),c=Math.sin(-p),_=1/0,d=1/0,f=-1/0,v=-1/0,g=e.getStride(),y=0,m=u.length;y<m;y+=g){var E=u[y]*l-u[y+1]*c,T=u[y]*c+u[y+1]*l;_=Math.min(_,E),d=Math.min(d,T),f=Math.max(f,E),v=Math.max(v,T)}var C=this.getResolutionForExtent([_,d,f,v],[o[0]-s[1]-s[3],o[1]-s[0]-s[2]]);if(C=isNaN(C)?r:Math.max(C,r),a){var R=this.constrainResolution(C,0,0);!h&&R<C&&(R=this.constrainResolution(R,-1,0)),C=R}c=-c;var I=(_+f)/2,M=(d+v)/2,O=[(I+=(s[1]-s[3])/2*C)*l-(M+=(s[0]-s[2])/2*C)*c,M*l+I*c],b=n.callback?n.callback:w;void 0!==n.duration?this.animate({resolution:C,center:O,duration:n.duration,easing:n.easing},b):(this.setResolution(C),this.setCenter(O),Vn(b,!0))},i.prototype.centerOn=function(t,i,e){var n=this.getRotation(),o=Math.cos(-n),r=Math.sin(-n),s=t[0]*o-t[1]*r,a=t[1]*o+t[0]*r,h=this.getResolution(),u=(s+=(i[0]/2-e[0])*h)*o-(a+=(e[1]-i[1]/2)*h)*(r=-r),p=a*o+s*r;this.setCenter([u,p])},i.prototype.isDef=function(){return!!this.getCenter()&&void 0!==this.getResolution()},i.prototype.rotate=function(t,i){if(void 0!==i){var e=this.calculateCenterRotate(t,i);this.setCenter(e)}this.setRotation(t)},i.prototype.setCenter=function(t){this.set(Ri,t),this.getAnimating()&&this.cancelAnimations()},i.prototype.setHint=function(t,i){return this.hints_[t]+=i,this.changed(),this.hints_[t]},i.prototype.setResolution=function(t){this.set(Ii,t),this.getAnimating()&&this.cancelAnimations()},i.prototype.setRotation=function(t){this.set(wi,t),this.getAnimating()&&this.cancelAnimations()},i.prototype.setZoom=function(t){this.setResolution(this.getResolutionForZoom(t))},i}(G);function Hn(t,i){var e=document.createElement("canvas");return t&&(e.width=t),i&&(e.height=i),e.getContext("2d")}function Wn(t,i){var e=i.parentNode;e&&e.replaceChild(t,i)}function Xn(t){return t&&t.parentNode?t.parentNode.removeChild(t):null}var qn={OPACITY:"opacity",VISIBLE:"visible",EXTENT:"extent",Z_INDEX:"zIndex",MAX_RESOLUTION:"maxResolution",MIN_RESOLUTION:"minResolution",SOURCE:"source"},Qn=function(t){function i(i){t.call(this);var e=p({},i);e[qn.OPACITY]=void 0!==i.opacity?i.opacity:1,e[qn.VISIBLE]=void 0===i.visible||i.visible,e[qn.Z_INDEX]=i.zIndex,e[qn.MAX_RESOLUTION]=void 0!==i.maxResolution?i.maxResolution:1/0,e[qn.MIN_RESOLUTION]=void 0!==i.minResolution?i.minResolution:0,this.setProperties(e),this.state_=null,this.type}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.getType=function(){return this.type},i.prototype.getLayerState=function(){var t=this.state_||{layer:this,managed:!0};return t.opacity=si(this.getOpacity(),0,1),t.sourceState=this.getSourceState(),t.visible=this.getVisible(),t.extent=this.getExtent(),t.zIndex=this.getZIndex()||0,t.maxResolution=this.getMaxResolution(),t.minResolution=Math.max(this.getMinResolution(),0),this.state_=t,t},i.prototype.getLayersArray=function(t){return n()},i.prototype.getLayerStatesArray=function(t){return n()},i.prototype.getExtent=function(){return this.get(qn.EXTENT)},i.prototype.getMaxResolution=function(){return this.get(qn.MAX_RESOLUTION)},i.prototype.getMinResolution=function(){return this.get(qn.MIN_RESOLUTION)},i.prototype.getOpacity=function(){return this.get(qn.OPACITY)},i.prototype.getSourceState=function(){return n()},i.prototype.getVisible=function(){return this.get(qn.VISIBLE)},i.prototype.getZIndex=function(){return this.get(qn.Z_INDEX)},i.prototype.setExtent=function(t){this.set(qn.EXTENT,t)},i.prototype.setMaxResolution=function(t){this.set(qn.MAX_RESOLUTION,t)},i.prototype.setMinResolution=function(t){this.set(qn.MIN_RESOLUTION,t)},i.prototype.setOpacity=function(t){this.set(qn.OPACITY,t)},i.prototype.setVisible=function(t){this.set(qn.VISIBLE,t)},i.prototype.setZIndex=function(t){this.set(qn.Z_INDEX,t)},i}(G),$n={UNDEFINED:"undefined",LOADING:"loading",READY:"ready",ERROR:"error"},Jn={LAYERS:"layers"},kn=function(t){function i(i){var e=i||{},n=p({},e);delete n.layers;var o=e.layers;t.call(this,n),this.layersListenerKeys_=[],this.listenerKeys_={},g(this,N(Jn.LAYERS),this.handleLayersChanged_,this),o?Array.isArray(o)?o=new z(o.slice(),{unique:!0}):ii("function"==typeof o.getArray,43):o=new z(void 0,{unique:!0}),this.setLayers(o)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.handleLayerChange_=function(){this.changed()},i.prototype.handleLayersChanged_=function(){this.layersListenerKeys_.forEach(E),this.layersListenerKeys_.length=0;var t=this.getLayers();for(var i in this.layersListenerKeys_.push(g(t,h.ADD,this.handleLayersAdd_,this),g(t,h.REMOVE,this.handleLayersRemove_,this)),this.listenerKeys_)this.listenerKeys_[i].forEach(E);l(this.listenerKeys_);for(var e=t.getArray(),n=0,o=e.length;n<o;n++){var s=e[n];this.listenerKeys_[r(s)]=[g(s,u,this.handleLayerChange_,this),g(s,A.CHANGE,this.handleLayerChange_,this)]}this.changed()},i.prototype.handleLayersAdd_=function(t){var i=t.element;this.listenerKeys_[r(i)]=[g(i,u,this.handleLayerChange_,this),g(i,A.CHANGE,this.handleLayerChange_,this)],this.changed()},i.prototype.handleLayersRemove_=function(t){var i=r(t.element);this.listenerKeys_[i].forEach(E),delete this.listenerKeys_[i],this.changed()},i.prototype.getLayers=function(){return this.get(Jn.LAYERS)},i.prototype.setLayers=function(t){this.set(Jn.LAYERS,t)},i.prototype.getLayersArray=function(t){var i=void 0!==t?t:[];return this.getLayers().forEach(function(t){t.getLayersArray(i)}),i},i.prototype.getLayerStatesArray=function(t){var i=void 0!==t?t:[],e=i.length;this.getLayers().forEach(function(t){t.getLayerStatesArray(i)});for(var n=this.getLayerState(),o=e,r=i.length;o<r;o++){var s=i[o];s.opacity*=n.opacity,s.visible=s.visible&&n.visible,s.maxResolution=Math.min(s.maxResolution,n.maxResolution),s.minResolution=Math.max(s.minResolution,n.minResolution),void 0!==n.extent&&(void 0!==s.extent?s.extent=se(s.extent,n.extent):s.extent=n.extent)}return i},i.prototype.getSourceState=function(){return $n.READY},i}(Qn);function Sn(t,i){return Array.isArray(t)?t:(void 0===i?i=[t,t]:i[0]=i[1]=t,i)}var to=function(t){function i(i){t.call(this);var e=function(t){var i=null;void 0!==t.keyboardEventTarget&&(i="string"==typeof t.keyboardEventTarget?document.getElementById(t.keyboardEventTarget):t.keyboardEventTarget);var e,n,o,r={},s=t.layers&&"function"==typeof t.layers.getLayers?t.layers:new kn({layers:t.layers});r[Qt.LAYERGROUP]=s,r[Qt.TARGET]=t.target,r[Qt.VIEW]=void 0!==t.view?t.view:new Yn,void 0!==t.controls&&(Array.isArray(t.controls)?e=new z(t.controls.slice()):(ii("function"==typeof t.controls.getArray,47),e=t.controls));void 0!==t.interactions&&(Array.isArray(t.interactions)?n=new z(t.interactions.slice()):(ii("function"==typeof t.interactions.getArray,48),n=t.interactions));void 0!==t.overlays?Array.isArray(t.overlays)?o=new z(t.overlays.slice()):(ii("function"==typeof t.overlays.getArray,49),o=t.overlays):o=new z;return{controls:e,interactions:n,keyboardEventTarget:i,overlays:o,values:r}}(i);this.maxTilesLoading_=void 0!==i.maxTilesLoading?i.maxTilesLoading:16,this.loadTilesWhileAnimating_=void 0!==i.loadTilesWhileAnimating&&i.loadTilesWhileAnimating,this.loadTilesWhileInteracting_=void 0!==i.loadTilesWhileInteracting&&i.loadTilesWhileInteracting,this.pixelRatio_=void 0!==i.pixelRatio?i.pixelRatio:W,this.animationDelayKey_,this.animationDelay_=function(){this.animationDelayKey_=void 0,this.renderFrame_.call(this,Date.now())}.bind(this),this.coordinateToPixelTransform_=[1,0,0,1,0,0],this.pixelToCoordinateTransform_=[1,0,0,1,0,0],this.frameIndex_=0,this.frameState_=null,this.previousExtent_=null,this.viewPropertyListenerKey_=null,this.viewChangeListenerKey_=null,this.layerGroupPropertyListenerKeys_=null,this.viewport_=document.createElement("div"),this.viewport_.className="ol-viewport"+(q?" ol-touch":""),this.viewport_.style.position="relative",this.viewport_.style.overflow="hidden",this.viewport_.style.width="100%",this.viewport_.style.height="100%",this.viewport_.style.msTouchAction="none",this.viewport_.style.touchAction="none",this.overlayContainer_=document.createElement("div"),this.overlayContainer_.className="ol-overlaycontainer",this.viewport_.appendChild(this.overlayContainer_),this.overlayContainerStopEvent_=document.createElement("div"),this.overlayContainerStopEvent_.className="ol-overlaycontainer-stopevent";for(var n=[A.CLICK,A.DBLCLICK,A.MOUSEDOWN,A.TOUCHSTART,A.MSPOINTERDOWN,J.POINTERDOWN,A.MOUSEWHEEL,A.WHEEL],o=0,r=n.length;o<r;++o)g(this.overlayContainerStopEvent_,n[o],O);for(var s in this.viewport_.appendChild(this.overlayContainerStopEvent_),this.mapBrowserEventHandler_=new Ht(this,i.moveTolerance),J)g(this.mapBrowserEventHandler_,J[s],this.handleMapBrowserEvent,this);this.keyboardEventTarget_=e.keyboardEventTarget,this.keyHandlerKeys_=null,g(this.viewport_,A.CONTEXTMENU,this.handleBrowserEvent,this),g(this.viewport_,A.WHEEL,this.handleBrowserEvent,this),g(this.viewport_,A.MOUSEWHEEL,this.handleBrowserEvent,this),this.controls=e.controls||new z,this.interactions=e.interactions||new z,this.overlays_=e.overlays,this.overlayIdIndex_={},this.renderer_=this.createRenderer(),this.handleResize_,this.focus_=null,this.postRenderFunctions_=[],this.tileQueue_=new ni(this.getTilePriority.bind(this),this.handleTileChange_.bind(this)),this.skippedFeatureUids_={},g(this,N(Qt.LAYERGROUP),this.handleLayerGroupChanged_,this),g(this,N(Qt.VIEW),this.handleViewChanged_,this),g(this,N(Qt.SIZE),this.handleSizeChanged_,this),g(this,N(Qt.TARGET),this.handleTargetChanged_,this),this.setProperties(e.values),this.controls.forEach(function(t){t.setMap(this)}.bind(this)),g(this.controls,h.ADD,function(t){t.element.setMap(this)},this),g(this.controls,h.REMOVE,function(t){t.element.setMap(null)},this),this.interactions.forEach(function(t){t.setMap(this)}.bind(this)),g(this.interactions,h.ADD,function(t){t.element.setMap(this)},this),g(this.interactions,h.REMOVE,function(t){t.element.setMap(null)},this),this.overlays_.forEach(this.addOverlayInternal_.bind(this)),g(this.overlays_,h.ADD,function(t){this.addOverlayInternal_(t.element)},this),g(this.overlays_,h.REMOVE,function(t){var i=t.element.getId();void 0!==i&&delete this.overlayIdIndex_[i.toString()],t.element.setMap(null)},this)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.createRenderer=function(){throw new Error("Use a map type that has a createRenderer method")},i.prototype.addControl=function(t){this.getControls().push(t)},i.prototype.addInteraction=function(t){this.getInteractions().push(t)},i.prototype.addLayer=function(t){this.getLayerGroup().getLayers().push(t)},i.prototype.addOverlay=function(t){this.getOverlays().push(t)},i.prototype.addOverlayInternal_=function(t){var i=t.getId();void 0!==i&&(this.overlayIdIndex_[i.toString()]=t),t.setMap(this)},i.prototype.disposeInternal=function(){this.mapBrowserEventHandler_.dispose(),m(this.viewport_,A.CONTEXTMENU,this.handleBrowserEvent,this),m(this.viewport_,A.WHEEL,this.handleBrowserEvent,this),m(this.viewport_,A.MOUSEWHEEL,this.handleBrowserEvent,this),void 0!==this.handleResize_&&(removeEventListener(A.RESIZE,this.handleResize_,!1),this.handleResize_=void 0),this.animationDelayKey_&&(cancelAnimationFrame(this.animationDelayKey_),this.animationDelayKey_=void 0),this.setTarget(null),t.prototype.disposeInternal.call(this)},i.prototype.forEachFeatureAtPixel=function(t,i,e){if(this.frameState_){var n=this.getCoordinateFromPixel(t),o=void 0!==(e=void 0!==e?e:{}).hitTolerance?e.hitTolerance*this.frameState_.pixelRatio:0,r=void 0!==e.layerFilter?e.layerFilter:R;return this.renderer_.forEachFeatureAtCoordinate(n,this.frameState_,o,i,null,r,null)}},i.prototype.getFeaturesAtPixel=function(t,i){var e=null;return this.forEachFeatureAtPixel(t,function(t){e||(e=[]),e.push(t)},i),e},i.prototype.forEachLayerAtPixel=function(t,i,e){if(this.frameState_){var n=e||{},o=void 0!==n.hitTolerance?e.hitTolerance*this.frameState_.pixelRatio:0,r=n.layerFilter||R;return this.renderer_.forEachLayerAtPixel(t,this.frameState_,o,i,null,r,null)}},i.prototype.hasFeatureAtPixel=function(t,i){if(!this.frameState_)return!1;var e=this.getCoordinateFromPixel(t),n=void 0!==(i=void 0!==i?i:{}).layerFilter?i.layerFilter:R,o=void 0!==i.hitTolerance?i.hitTolerance*this.frameState_.pixelRatio:0;return this.renderer_.hasFeatureAtCoordinate(e,this.frameState_,o,n,null)},i.prototype.getEventCoordinate=function(t){return this.getCoordinateFromPixel(this.getEventPixel(t))},i.prototype.getEventPixel=function(t){var i=this.viewport_.getBoundingClientRect(),e="changedTouches"in t?t.changedTouches[0]:t;return[e.clientX-i.left,e.clientY-i.top]},i.prototype.getTarget=function(){return this.get(Qt.TARGET)},i.prototype.getTargetElement=function(){var t=this.getTarget();return void 0!==t?"string"==typeof t?document.getElementById(t):t:null},i.prototype.getCoordinateFromPixel=function(t){var i=this.frameState_;return i?nn(i.pixelToCoordinateTransform,t.slice()):null},i.prototype.getControls=function(){return this.controls},i.prototype.getOverlays=function(){return this.overlays_},i.prototype.getOverlayById=function(t){var i=this.overlayIdIndex_[t.toString()];return void 0!==i?i:null},i.prototype.getInteractions=function(){return this.interactions},i.prototype.getLayerGroup=function(){return this.get(Qt.LAYERGROUP)},i.prototype.getLayers=function(){return this.getLayerGroup().getLayers()},i.prototype.getPixelFromCoordinate=function(t){var i=this.frameState_;return i?nn(i.coordinateToPixelTransform,t.slice(0,2)):null},i.prototype.getRenderer=function(){return this.renderer_},i.prototype.getSize=function(){return this.get(Qt.SIZE)},i.prototype.getView=function(){return this.get(Qt.VIEW)},i.prototype.getViewport=function(){return this.viewport_},i.prototype.getOverlayContainer=function(){return this.overlayContainer_},i.prototype.getOverlayContainerStopEvent=function(){return this.overlayContainerStopEvent_},i.prototype.getTilePriority=function(t,i,e,n){var o=this.frameState_;if(!(o&&i in o.wantedTiles))return 1/0;if(!o.wantedTiles[i][t.getKey()])return 1/0;var r=e[0]-o.focus[0],s=e[1]-o.focus[1];return 65536*Math.log(n)+Math.sqrt(r*r+s*s)/n},i.prototype.handleBrowserEvent=function(t,i){var e=i||t.type,n=new x(e,this,t);this.handleMapBrowserEvent(n)},i.prototype.handleMapBrowserEvent=function(t){if(this.frameState_){this.focus_=t.coordinate,t.frameState=this.frameState_;var i=this.getInteractions().getArray();if(!1!==this.dispatchEvent(t))for(var e=i.length-1;e>=0;e--){var n=i[e];if(n.getActive())if(!n.handleEvent(t))break}}},i.prototype.handlePostRender=function(){var t=this.frameState_,i=this.tileQueue_;if(!i.isEmpty()){var e=this.maxTilesLoading_,n=e;if(t){var o=t.viewHints;o[Ti]&&(e=this.loadTilesWhileAnimating_?8:0,n=2),o[Ci]&&(e=this.loadTilesWhileInteracting_?8:0,n=2)}i.getTilesLoading()<e&&(i.reprioritize(),i.loadMoreTiles(e,n))}!t||!this.hasListener(St)||t.animate||this.tileQueue_.getTilesLoading()||function t(i){for(var e=0,n=i.length;e<n;++e){var o=i[e];if("function"==typeof o.getLayers)return t(o.getLayers().getArray());var r=o.getSource();if(r&&r.loading)return!0}return!1}(this.getLayers().getArray())||this.renderer_.dispatchRenderEvent(St,t);for(var r=this.postRenderFunctions_,s=0,a=r.length;s<a;++s)r[s](this,t);r.length=0},i.prototype.handleSizeChanged_=function(){this.render()},i.prototype.handleTargetChanged_=function(){var t;if(this.getTarget()&&(t=this.getTargetElement()),this.keyHandlerKeys_){for(var i=0,e=this.keyHandlerKeys_.length;i<e;++i)E(this.keyHandlerKeys_[i]);this.keyHandlerKeys_=null}if(t){t.appendChild(this.viewport_);var n=this.keyboardEventTarget_?this.keyboardEventTarget_:t;this.keyHandlerKeys_=[g(n,A.KEYDOWN,this.handleBrowserEvent,this),g(n,A.KEYPRESS,this.handleBrowserEvent,this)],this.handleResize_||(this.handleResize_=this.updateSize.bind(this),addEventListener(A.RESIZE,this.handleResize_,!1))}else this.renderer_.removeLayerRenderers(),Xn(this.viewport_),void 0!==this.handleResize_&&(removeEventListener(A.RESIZE,this.handleResize_,!1),this.handleResize_=void 0);this.updateSize()},i.prototype.handleTileChange_=function(){this.render()},i.prototype.handleViewPropertyChanged_=function(){this.render()},i.prototype.handleViewChanged_=function(){this.viewPropertyListenerKey_&&(E(this.viewPropertyListenerKey_),this.viewPropertyListenerKey_=null),this.viewChangeListenerKey_&&(E(this.viewChangeListenerKey_),this.viewChangeListenerKey_=null);var t=this.getView();t&&(this.viewport_.setAttribute("data-view",r(t)),this.viewPropertyListenerKey_=g(t,u,this.handleViewPropertyChanged_,this),this.viewChangeListenerKey_=g(t,A.CHANGE,this.handleViewPropertyChanged_,this)),this.render()},i.prototype.handleLayerGroupChanged_=function(){this.layerGroupPropertyListenerKeys_&&(this.layerGroupPropertyListenerKeys_.forEach(E),this.layerGroupPropertyListenerKeys_=null);var t=this.getLayerGroup();t&&(this.layerGroupPropertyListenerKeys_=[g(t,u,this.render,this),g(t,A.CHANGE,this.render,this)]),this.render()},i.prototype.isRendered=function(){return!!this.frameState_},i.prototype.renderSync=function(){this.animationDelayKey_&&cancelAnimationFrame(this.animationDelayKey_),this.animationDelay_()},i.prototype.render=function(){void 0===this.animationDelayKey_&&(this.animationDelayKey_=requestAnimationFrame(this.animationDelay_))},i.prototype.removeControl=function(t){return this.getControls().remove(t)},i.prototype.removeInteraction=function(t){return this.getInteractions().remove(t)},i.prototype.removeLayer=function(t){return this.getLayerGroup().getLayers().remove(t)},i.prototype.removeOverlay=function(t){return this.getOverlays().remove(t)},i.prototype.renderFrame_=function(t){var i,e=this.getSize(),n=this.getView(),o=[1/0,1/0,-1/0,-1/0],s=this.frameState_,a=null;if(void 0!==e&&function(t){return t[0]>0&&t[1]>0}(e)&&n&&n.isDef()){for(var h=n.getHints(this.frameState_?this.frameState_.viewHints:void 0),u=this.getLayerGroup().getLayerStatesArray(),p={},l=0,c=u.length;l<c;++l)p[r(u[l].layer)]=u[l];i=n.getState(this.pixelRatio_),a={animate:!1,coordinateToPixelTransform:this.coordinateToPixelTransform_,extent:o,focus:this.focus_?this.focus_:i.center,index:this.frameIndex_++,layerStates:p,layerStatesArray:u,pixelRatio:this.pixelRatio_,pixelToCoordinateTransform:this.pixelToCoordinateTransform_,postRenderFunctions:[],size:e,skippedFeatureUids:this.skippedFeatureUids_,tileQueue:this.tileQueue_,time:t,usedTiles:{},viewState:i,viewHints:h,wantedTiles:{}}}if(a&&(a.extent=oe(i.center,i.resolution,i.rotation,a.size,o)),this.frameState_=a,this.renderer_.renderFrame(a),a){if(a.animate&&this.render(),Array.prototype.push.apply(this.postRenderFunctions_,a.postRenderFunctions),s)(!this.previousExtent_||!le(this.previousExtent_)&&!Xi(a.extent,this.previousExtent_))&&(this.dispatchEvent(new U(Xt,this,s)),this.previousExtent_=Wi(this.previousExtent_));this.previousExtent_&&!a.viewHints[Ti]&&!a.viewHints[Ci]&&!Xi(a.extent,this.previousExtent_)&&(this.dispatchEvent(new U(qt,this,a)),zi(a.extent,this.previousExtent_))}this.dispatchEvent(new U(Wt,this,a)),setTimeout(this.handlePostRender.bind(this),0)},i.prototype.setLayerGroup=function(t){this.set(Qt.LAYERGROUP,t)},i.prototype.setSize=function(t){this.set(Qt.SIZE,t)},i.prototype.setTarget=function(t){this.set(Qt.TARGET,t)},i.prototype.setView=function(t){this.set(Qt.VIEW,t)},i.prototype.skipFeature=function(t){this.skippedFeatureUids_[r(t)]=!0,this.render()},i.prototype.updateSize=function(){var t=this.getTargetElement();if(t){var i=getComputedStyle(t);this.setSize([t.offsetWidth-parseFloat(i.borderLeftWidth)-parseFloat(i.paddingLeft)-parseFloat(i.paddingRight)-parseFloat(i.borderRightWidth),t.offsetHeight-parseFloat(i.borderTopWidth)-parseFloat(i.paddingTop)-parseFloat(i.paddingBottom)-parseFloat(i.borderBottomWidth)])}else this.setSize(void 0)},i.prototype.unskipFeature=function(t){delete this.skippedFeatureUids_[r(t)],this.render()},i}(G);var io,eo,no=function(t){function i(i){t.call(this),this.element=i.element?i.element:null,this.target_=null,this.map_=null,this.listenerKeys=[],this.render=i.render?i.render:w,i.target&&this.setTarget(i.target)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.disposeInternal=function(){Xn(this.element),t.prototype.disposeInternal.call(this)},i.prototype.getMap=function(){return this.map_},i.prototype.setMap=function(t){this.map_&&Xn(this.element);for(var i=0,e=this.listenerKeys.length;i<e;++i)E(this.listenerKeys[i]);(this.listenerKeys.length=0,this.map_=t,this.map_)&&((this.target_?this.target_:t.getOverlayContainerStopEvent()).appendChild(this.element),this.render!==w&&this.listenerKeys.push(g(t,Wt,this.render,this)),t.render())},i.prototype.setTarget=function(t){this.target_="string"==typeof t?document.getElementById(t):t},i}(G),oo="ol-hidden",ro="ol-unselectable",so="ol-control",ao="ol-collapsed",ho=(eo={},function(t){if(io||(io=document.createElement("div").style),!(t in eo)){io.font=t;var i=io.fontFamily;if(io.font="",!i)return null;eo[t]=i.split(/,\s?/)}return eo[t]});function uo(t,i){return t.visible&&i>=t.minResolution&&i<t.maxResolution}var po=function(t){function i(i){var e=p({},i);delete e.source,t.call(this,e),this.mapPrecomposeKey_=null,this.mapRenderKey_=null,this.sourceChangeKey_=null,i.map&&this.setMap(i.map),g(this,N(qn.SOURCE),this.handleSourcePropertyChange_,this);var n=i.source?i.source:null;this.setSource(n)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.getLayersArray=function(t){var i=t||[];return i.push(this),i},i.prototype.getLayerStatesArray=function(t){var i=t||[];return i.push(this.getLayerState()),i},i.prototype.getSource=function(){return this.get(qn.SOURCE)||null},i.prototype.getSourceState=function(){var t=this.getSource();return t?t.getState():$n.UNDEFINED},i.prototype.handleSourceChange_=function(){this.changed()},i.prototype.handleSourcePropertyChange_=function(){this.sourceChangeKey_&&(E(this.sourceChangeKey_),this.sourceChangeKey_=null);var t=this.getSource();t&&(this.sourceChangeKey_=g(t,A.CHANGE,this.handleSourceChange_,this)),this.changed()},i.prototype.setMap=function(t){this.mapPrecomposeKey_&&(E(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),t||this.changed(),this.mapRenderKey_&&(E(this.mapRenderKey_),this.mapRenderKey_=null),t&&(this.mapPrecomposeKey_=g(t,Jt,function(t){var i=t,e=this.getLayerState();e.managed=!1,void 0===this.getZIndex()&&(e.zIndex=1/0),i.frameState.layerStatesArray.push(e),i.frameState.layerStates[r(this)]=e},this),this.mapRenderKey_=g(this,A.CHANGE,t.render,t),this.changed())},i.prototype.setSource=function(t){this.set(qn.SOURCE,t)},i}(Qn);function lo(t){this.updateElement_(t.frameState)}var co=function(t){function i(i){var e=i||{};t.call(this,{element:document.createElement("div"),render:e.render||lo,target:e.target}),this.ulElement_=document.createElement("ul"),this.collapsed_=void 0===e.collapsed||e.collapsed,this.overrideCollapsible_=void 0!==e.collapsible,this.collapsible_=void 0===e.collapsible||e.collapsible,this.collapsible_||(this.collapsed_=!1);var n=void 0!==e.className?e.className:"ol-attribution",o=void 0!==e.tipLabel?e.tipLabel:"Attributions",r=void 0!==e.collapseLabel?e.collapseLabel:"»";"string"==typeof r?(this.collapseLabel_=document.createElement("span"),this.collapseLabel_.textContent=r):this.collapseLabel_=r;var s=void 0!==e.label?e.label:"i";"string"==typeof s?(this.label_=document.createElement("span"),this.label_.textContent=s):this.label_=s;var a=this.collapsible_&&!this.collapsed_?this.collapseLabel_:this.label_,h=document.createElement("button");h.setAttribute("type","button"),h.title=o,h.appendChild(a),g(h,A.CLICK,this.handleClick_,this);var u=n+" "+ro+" "+so+(this.collapsed_&&this.collapsible_?" "+ao:"")+(this.collapsible_?"":" ol-uncollapsible"),p=this.element;p.className=u,p.appendChild(this.ulElement_),p.appendChild(h),this.renderedAttributions_=[],this.renderedVisible_=!0}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.collectSourceAttributions_=function(t){for(var i={},e=[],n=t.layerStatesArray,o=t.viewState.resolution,r=0,s=n.length;r<s;++r){var a=n[r];if(uo(a,o)){var h=a.layer.getSource();if(h){var u=h.getAttributions();if(u){var p=u(t);if(p)if(this.overrideCollapsible_||!1!==h.getAttributionsCollapsible()||this.setCollapsible(!1),Array.isArray(p))for(var l=0,c=p.length;l<c;++l)p[l]in i||(e.push(p[l]),i[p[l]]=!0);else p in i||(e.push(p),i[p]=!0)}}}}return e},i.prototype.updateElement_=function(t){if(t){var i=this.collectSourceAttributions_(t),e=i.length>0;if(this.renderedVisible_!=e&&(this.element.style.display=e?"":"none",this.renderedVisible_=e),!Zt(i,this.renderedAttributions_)){!function(t){for(;t.lastChild;)t.removeChild(t.lastChild)}(this.ulElement_);for(var n=0,o=i.length;n<o;++n){var r=document.createElement("li");r.innerHTML=i[n],this.ulElement_.appendChild(r)}this.renderedAttributions_=i}}else this.renderedVisible_&&(this.element.style.display="none",this.renderedVisible_=!1)},i.prototype.handleClick_=function(t){t.preventDefault(),this.handleToggle_()},i.prototype.handleToggle_=function(){this.element.classList.toggle(ao),this.collapsed_?Wn(this.collapseLabel_,this.label_):Wn(this.label_,this.collapseLabel_),this.collapsed_=!this.collapsed_},i.prototype.getCollapsible=function(){return this.collapsible_},i.prototype.setCollapsible=function(t){this.collapsible_!==t&&(this.collapsible_=t,this.element.classList.toggle("ol-uncollapsible"),!t&&this.collapsed_&&this.handleToggle_())},i.prototype.setCollapsed=function(t){this.collapsible_&&this.collapsed_!==t&&this.handleToggle_()},i.prototype.getCollapsed=function(){return this.collapsed_},i}(no);function _o(t){var i=t.frameState;if(i){var e=i.viewState.rotation;if(e!=this.rotation_){var n="rotate("+e+"rad)";if(this.autoHide_){var o=this.element.classList.contains(oo);o||0!==e?o&&0!==e&&this.element.classList.remove(oo):this.element.classList.add(oo)}this.label_.style.msTransform=n,this.label_.style.webkitTransform=n,this.label_.style.transform=n}this.rotation_=e}}var fo=function(t){function i(i){var e=i||{};t.call(this,{element:document.createElement("div"),render:e.render||_o,target:e.target});var n=void 0!==e.className?e.className:"ol-rotate",o=void 0!==e.label?e.label:"⇧";this.label_=null,"string"==typeof o?(this.label_=document.createElement("span"),this.label_.className="ol-compass",this.label_.textContent=o):(this.label_=o,this.label_.classList.add("ol-compass"));var r=e.tipLabel?e.tipLabel:"Reset rotation",s=document.createElement("button");s.className=n+"-reset",s.setAttribute("type","button"),s.title=r,s.appendChild(this.label_),g(s,A.CLICK,this.handleClick_,this);var a=n+" "+ro+" "+so,h=this.element;h.className=a,h.appendChild(s),this.callResetNorth_=e.resetNorth?e.resetNorth:void 0,this.duration_=void 0!==e.duration?e.duration:250,this.autoHide_=void 0===e.autoHide||e.autoHide,this.rotation_=void 0,this.autoHide_&&this.element.classList.add(oo)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.handleClick_=function(t){t.preventDefault(),void 0!==this.callResetNorth_?this.callResetNorth_():this.resetNorth_()},i.prototype.resetNorth_=function(){var t=this.getMap().getView();t&&void 0!==t.getRotation()&&(this.duration_>0?t.animate({rotation:0,duration:this.duration_,easing:Li}):t.setRotation(0))},i}(no),vo=function(t){function i(i){var e=i||{};t.call(this,{element:document.createElement("div"),target:e.target});var n=void 0!==e.className?e.className:"ol-zoom",o=void 0!==e.delta?e.delta:1,r=void 0!==e.zoomInLabel?e.zoomInLabel:"+",s=void 0!==e.zoomOutLabel?e.zoomOutLabel:"−",a=void 0!==e.zoomInTipLabel?e.zoomInTipLabel:"Zoom in",h=void 0!==e.zoomOutTipLabel?e.zoomOutTipLabel:"Zoom out",u=document.createElement("button");u.className=n+"-in",u.setAttribute("type","button"),u.title=a,u.appendChild("string"==typeof r?document.createTextNode(r):r),g(u,A.CLICK,this.handleClick_.bind(this,o));var p=document.createElement("button");p.className=n+"-out",p.setAttribute("type","button"),p.title=h,p.appendChild("string"==typeof s?document.createTextNode(s):s),g(p,A.CLICK,this.handleClick_.bind(this,-o));var l=n+" "+ro+" "+so,c=this.element;c.className=l,c.appendChild(u),c.appendChild(p),this.duration_=void 0!==e.duration?e.duration:250}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.handleClick_=function(t,i){i.preventDefault(),this.zoomByDelta_(t)},i.prototype.zoomByDelta_=function(t){var i=this.getMap().getView();if(i){var e=i.getResolution();if(e){var n=i.constrainResolution(e,t);this.duration_>0?(i.getAnimating()&&i.cancelAnimations(),i.animate({resolution:n,duration:this.duration_,easing:Li})):i.setResolution(n)}}},i}(no);var go=function(t,i,e){this.decay_=t,this.minVelocity_=i,this.delay_=e,this.points_=[],this.angle_=0,this.initialVelocity_=0};go.prototype.begin=function(){this.points_.length=0,this.angle_=0,this.initialVelocity_=0},go.prototype.update=function(t,i){this.points_.push(t,i,Date.now())},go.prototype.end=function(){if(this.points_.length<6)return!1;var t=Date.now()-this.delay_,i=this.points_.length-3;if(this.points_[i+2]<t)return!1;for(var e=i-3;e>0&&this.points_[e+2]>t;)e-=3;var n=this.points_[i+2]-this.points_[e+2];if(n<1e3/60)return!1;var o=this.points_[i]-this.points_[e],r=this.points_[i+1]-this.points_[e+1];return this.angle_=Math.atan2(r,o),this.initialVelocity_=Math.sqrt(o*o+r*r)/n,this.initialVelocity_>this.minVelocity_},go.prototype.getDistance=function(){return(this.minVelocity_-this.initialVelocity_)/this.decay_},go.prototype.getAngle=function(){return this.angle_};var yo=go,mo="active";function Eo(t,i,e,n){i=t.constrainRotation(i,0),To(t,i,e,n)}function To(t,i,e,n){if(void 0!==i){var o=t.getRotation(),r=t.getCenter();void 0!==o&&r&&n>0?t.animate({rotation:i,anchor:e,duration:n,easing:Li}):t.rotate(i,e)}}function Co(t,i,e,n){var o=t.getResolution(),r=t.constrainResolution(o,i,0);if(void 0!==r){var s=t.getResolutions();r=si(r,t.getMinResolution()||s[s.length-1],t.getMaxResolution()||s[0])}if(e&&void 0!==r&&r!==o){var a=t.getCenter(),h=t.calculateCenterZoom(r,e);h=t.constrainCenter(h),e=[(r*a[0]-o*h[0])/(r-o),(r*a[1]-o*h[1])/(r-o)]}Ro(t,r,e,n)}function Ro(t,i,e,n){if(i){var o=t.getResolution(),r=t.getCenter();if(void 0!==o&&r&&i!==o&&n)t.animate({resolution:i,anchor:e,duration:n,easing:Li});else{if(e){var s=t.calculateCenterZoom(i,e);t.setCenter(s)}t.setResolution(i)}}}var Io=function(t){function i(i){t.call(this),i.handleEvent&&(this.handleEvent=i.handleEvent),this.map_=null,this.setActive(!0)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.getActive=function(){return this.get(mo)},i.prototype.getMap=function(){return this.map_},i.prototype.handleEvent=function(t){return!0},i.prototype.setActive=function(t){this.set(mo,t)},i.prototype.setMap=function(t){this.map_=t},i}(G);function wo(t){var i=!1;if(t.type==J.DBLCLICK){var e=t.originalEvent,n=t.map,o=t.coordinate,r=e.shiftKey?-this.delta_:this.delta_;Co(n.getView(),r,o,this.duration_),t.preventDefault(),i=!0}return!i}var Mo=function(t){function i(i){t.call(this,{handleEvent:wo});var e=i||{};this.delta_=e.delta?e.delta:1,this.duration_=void 0!==e.duration?e.duration:250}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(Io),Oo=function(t){var i=t.originalEvent;return i.altKey&&!(i.metaKey||i.ctrlKey)&&i.shiftKey},bo=function(t){return t.target.getTargetElement()===document.activeElement},Po=R,Ao=function(t){var i=t.originalEvent;return 0==i.button&&!(Y&&H&&i.ctrlKey)},Lo=function(t){var i=t.originalEvent;return!i.altKey&&!(i.metaKey||i.ctrlKey)&&!i.shiftKey},Do=function(t){var i=t.originalEvent;return!i.altKey&&!(i.metaKey||i.ctrlKey)&&i.shiftKey},Fo=function(t){var i=t.originalEvent.target.tagName;return"INPUT"!==i&&"SELECT"!==i&&"TEXTAREA"!==i},No=function(t){var i=t.pointerEvent;return ii(void 0!==i,56),"mouse"==i.pointerType};function Go(t){for(var i=t.length,e=0,n=0,o=0;o<i;o++)e+=t[o].clientX,n+=t[o].clientY;return[e/i,n/i]}var Ko=function(t){function i(i){var e=i||{};t.call(this,e),e.handleDownEvent&&(this.handleDownEvent=e.handleDownEvent),e.handleDragEvent&&(this.handleDragEvent=e.handleDragEvent),e.handleMoveEvent&&(this.handleMoveEvent=e.handleMoveEvent),e.handleUpEvent&&(this.handleUpEvent=e.handleUpEvent),e.stopDown&&(this.stopDown=e.stopDown),this.handlingDownUpSequence=!1,this.trackedPointers_={},this.targetPointers=[]}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.handleDownEvent=function(t){return!1},i.prototype.handleDragEvent=function(t){},i.prototype.handleEvent=function(t){if(!t.pointerEvent)return!0;var i=!1;if(this.updateTrackedPointers_(t),this.handlingDownUpSequence){if(t.type==J.POINTERDRAG)this.handleDragEvent(t);else if(t.type==J.POINTERUP){var e=this.handleUpEvent(t);this.handlingDownUpSequence=e&&this.targetPointers.length>0}}else if(t.type==J.POINTERDOWN){var n=this.handleDownEvent(t);n&&t.preventDefault(),this.handlingDownUpSequence=n,i=this.stopDown(n)}else t.type==J.POINTERMOVE&&this.handleMoveEvent(t);return!i},i.prototype.handleMoveEvent=function(t){},i.prototype.handleUpEvent=function(t){return!1},i.prototype.stopDown=function(t){return t},i.prototype.updateTrackedPointers_=function(t){if(function(t){var i=t.type;return i===J.POINTERDOWN||i===J.POINTERDRAG||i===J.POINTERUP}(t)){var i=t.pointerEvent,e=i.pointerId.toString();t.type==J.POINTERUP?delete this.trackedPointers_[e]:t.type==J.POINTERDOWN?this.trackedPointers_[e]=i:e in this.trackedPointers_&&(this.trackedPointers_[e]=i),this.targetPointers=function(t){var i=[];for(var e in t)i.push(t[e]);return i}(this.trackedPointers_)}},i}(Io),Zo=function(t){function i(i){t.call(this,{stopDown:I});var e=i||{};this.kinetic_=e.kinetic,this.lastCentroid=null,this.lastPointersCount_,this.panning_=!1,this.condition_=e.condition?e.condition:Lo,this.noKinetic_=!1}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.handleDragEvent=function(t){this.panning_||(this.panning_=!0,this.getMap().getView().setHint(Ci,1));var i=this.targetPointers,e=Go(i);if(i.length==this.lastPointersCount_){if(this.kinetic_&&this.kinetic_.update(e[0],e[1]),this.lastCentroid){var n=this.lastCentroid[0]-e[0],o=e[1]-this.lastCentroid[1],r=t.map.getView(),s=[n,o];Pi(s,r.getResolution()),bi(s,r.getRotation()),Mi(s,r.getCenter()),s=r.constrainCenter(s),r.setCenter(s)}}else this.kinetic_&&this.kinetic_.begin();this.lastCentroid=e,this.lastPointersCount_=i.length},i.prototype.handleUpEvent=function(t){var i=t.map,e=i.getView();if(0===this.targetPointers.length){if(!this.noKinetic_&&this.kinetic_&&this.kinetic_.end()){var n=this.kinetic_.getDistance(),o=this.kinetic_.getAngle(),r=e.getCenter(),s=i.getPixelFromCoordinate(r),a=i.getCoordinateFromPixel([s[0]-n*Math.cos(o),s[1]-n*Math.sin(o)]);e.animate({center:e.constrainCenter(a),duration:500,easing:Li})}return this.panning_&&(this.panning_=!1,e.setHint(Ci,-1)),!1}return this.kinetic_&&this.kinetic_.begin(),this.lastCentroid=null,!0},i.prototype.handleDownEvent=function(t){if(this.targetPointers.length>0&&this.condition_(t)){var i=t.map.getView();return this.lastCentroid=null,i.getAnimating()&&i.setCenter(t.frameState.viewState.center),this.kinetic_&&this.kinetic_.begin(),this.noKinetic_=this.targetPointers.length>1,!0}return!1},i}(Ko),zo=function(t){function i(i){var e=i||{};t.call(this,{stopDown:I}),this.condition_=e.condition?e.condition:Oo,this.lastAngle_=void 0,this.duration_=void 0!==e.duration?e.duration:250}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.handleDragEvent=function(t){if(No(t)){var i=t.map,e=i.getView();if(e.getConstraints().rotation!==gi){var n=i.getSize(),o=t.pixel,r=Math.atan2(n[1]/2-o[1],o[0]-n[0]/2);if(void 0!==this.lastAngle_){var s=r-this.lastAngle_,a=e.getRotation();To(e,a-s)}this.lastAngle_=r}}},i.prototype.handleUpEvent=function(t){if(!No(t))return!0;var i=t.map.getView();i.setHint(Ci,-1);var e=i.getRotation();return Eo(i,e,void 0,this.duration_),!1},i.prototype.handleDownEvent=function(t){return!!No(t)&&(!(!Ao(t)||!this.condition_(t))&&(t.map.getView().setHint(Ci,1),this.lastAngle_=void 0,!0))},i}(Ko),Uo=function(t){function i(i){t.call(this),this.geometry_=null,this.element_=document.createElement("div"),this.element_.style.position="absolute",this.element_.className="ol-box "+i,this.map_=null,this.startPixel_=null,this.endPixel_=null}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.disposeInternal=function(){this.setMap(null)},i.prototype.render_=function(){var t=this.startPixel_,i=this.endPixel_,e=this.element_.style;e.left=Math.min(t[0],i[0])+"px",e.top=Math.min(t[1],i[1])+"px",e.width=Math.abs(i[0]-t[0])+"px",e.height=Math.abs(i[1]-t[1])+"px"},i.prototype.setMap=function(t){if(this.map_){this.map_.getOverlayContainer().removeChild(this.element_);var i=this.element_.style;i.left=i.top=i.width=i.height="inherit"}this.map_=t,this.map_&&this.map_.getOverlayContainer().appendChild(this.element_)},i.prototype.setPixels=function(t,i){this.startPixel_=t,this.endPixel_=i,this.createOrUpdateGeometry(),this.render_()},i.prototype.createOrUpdateGeometry=function(){var t=this.startPixel_,i=this.endPixel_,e=[t,[t[0],i[1]],i,[i[0],t[1]]].map(this.map_.getCoordinateFromPixel,this.map_);e[4]=e[0].slice(),this.geometry_?this.geometry_.setCoordinates([e]):this.geometry_=new Un([e])},i.prototype.getGeometry=function(){return this.geometry_},i}(C),xo="boxstart",jo="boxdrag",Vo="boxend",Bo=function(t){function i(i,e,n){t.call(this,i),this.coordinate=e,this.mapBrowserEvent=n}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(b);function Yo(){var t,i,e=this.getMap(),n=e.getView(),o=e.getSize(),r=this.getGeometry().getExtent();if(this.out_){var s=n.calculateExtent(o),a=(t=[e.getPixelFromCoordinate(te(r)),e.getPixelFromCoordinate(he(r))],$i(Wi(i),t));!function(t,i){var e=(t[2]-t[0])/2*(i-1),n=(t[3]-t[1])/2*(i-1);t[0]-=e,t[2]+=e,t[1]-=n,t[3]+=n}(s,1/n.getResolutionForExtent(a,o)),r=s}var h=n.constrainResolution(n.getResolutionForExtent(r,o)),u=ee(r);u=n.constrainCenter(u),n.animate({resolution:h,center:u,duration:this.duration_,easing:Li})}var Ho=function(t){function i(i){var e=i||{},n=e.condition?e.condition:Do;t.call(this,{condition:n,className:e.className||"ol-dragzoom",onBoxEnd:Yo}),this.duration_=void 0!==e.duration?e.duration:200,this.out_=void 0!==e.out&&e.out}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(function(t){function i(i){t.call(this);var e=i||{};this.box_=new Uo(e.className||"ol-dragbox"),this.minArea_=void 0!==e.minArea?e.minArea:64,this.onBoxEnd_=e.onBoxEnd?e.onBoxEnd:w,this.startPixel_=null,this.condition_=e.condition?e.condition:Po,this.boxEndCondition_=e.boxEndCondition?e.boxEndCondition:this.defaultBoxEndCondition}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.defaultBoxEndCondition=function(t,i,e){var n=e[0]-i[0],o=e[1]-i[1];return n*n+o*o>=this.minArea_},i.prototype.getGeometry=function(){return this.box_.getGeometry()},i.prototype.handleDragEvent=function(t){No(t)&&(this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new Bo(jo,t.coordinate,t)))},i.prototype.handleUpEvent=function(t){return!No(t)||(this.box_.setMap(null),this.boxEndCondition_(t,this.startPixel_,t.pixel)&&(this.onBoxEnd_(t),this.dispatchEvent(new Bo(Vo,t.coordinate,t))),!1)},i.prototype.handleDownEvent=function(t){return!!No(t)&&(!(!Ao(t)||!this.condition_(t))&&(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new Bo(xo,t.coordinate,t)),!0))},i}(Ko)),Wo={LEFT:37,UP:38,RIGHT:39,DOWN:40};function Xo(t){var i=!1;if(t.type==A.KEYDOWN){var e=t.originalEvent.keyCode;if(this.condition_(t)&&(e==Wo.DOWN||e==Wo.LEFT||e==Wo.RIGHT||e==Wo.UP)){var n=t.map.getView(),o=n.getResolution()*this.pixelDelta_,r=0,s=0;e==Wo.DOWN?s=-o:e==Wo.LEFT?r=-o:e==Wo.RIGHT?r=o:s=o;var a=[r,s];bi(a,n.getRotation()),function(t,i,e){var n=t.getCenter();if(n){var o=t.constrainCenter([n[0]+i[0],n[1]+i[1]]);e?t.animate({duration:e,easing:Fi,center:o}):t.setCenter(o)}}(n,a,this.duration_),t.preventDefault(),i=!0}}return!i}var qo=function(t){function i(i){t.call(this,{handleEvent:Xo});var e=i||{};this.defaultCondition_=function(t){return Lo(t)&&Fo(t)},this.condition_=void 0!==e.condition?e.condition:this.defaultCondition_,this.duration_=void 0!==e.duration?e.duration:100,this.pixelDelta_=void 0!==e.pixelDelta?e.pixelDelta:128}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(Io);function Qo(t){var i=!1;if(t.type==A.KEYDOWN||t.type==A.KEYPRESS){var e=t.originalEvent.charCode;if(this.condition_(t)&&(e=="+".charCodeAt(0)||e=="-".charCodeAt(0))){var n=t.map,o=e=="+".charCodeAt(0)?this.delta_:-this.delta_;Co(n.getView(),o,void 0,this.duration_),t.preventDefault(),i=!0}}return!i}var $o=function(t){function i(i){t.call(this,{handleEvent:Qo});var e=i||{};this.condition_=e.condition?e.condition:Fo,this.delta_=e.delta?e.delta:1,this.duration_=void 0!==e.duration?e.duration:100}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(Io),Jo="trackpad",ko="wheel",So=function(t){function i(i){var e=i||{};t.call(this,e),this.delta_=0,this.duration_=void 0!==e.duration?e.duration:250,this.timeout_=void 0!==e.timeout?e.timeout:80,this.useAnchor_=void 0===e.useAnchor||e.useAnchor,this.constrainResolution_=e.constrainResolution||!1,this.condition_=e.condition?e.condition:Po,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_,this.mode_=void 0,this.trackpadEventGap_=400,this.trackpadTimeoutId_,this.trackpadDeltaPerZoom_=300,this.trackpadZoomBuffer_=1.5}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.decrementInteractingHint_=function(){this.trackpadTimeoutId_=void 0,this.getMap().getView().setHint(Ci,-1)},i.prototype.handleEvent=function(t){if(!this.condition_(t))return!0;var i=t.type;if(i!==A.WHEEL&&i!==A.MOUSEWHEEL)return!0;t.preventDefault();var e,n=t.map,o=t.originalEvent;if(this.useAnchor_&&(this.lastAnchor_=t.coordinate),t.type==A.WHEEL?(e=o.deltaY,V&&o.deltaMode===WheelEvent.DOM_DELTA_PIXEL&&(e/=W),o.deltaMode===WheelEvent.DOM_DELTA_LINE&&(e*=40)):t.type==A.MOUSEWHEEL&&(e=-o.wheelDeltaY,B&&(e/=3)),0===e)return!1;var r=Date.now();if(void 0===this.startTime_&&(this.startTime_=r),(!this.mode_||r-this.startTime_>this.trackpadEventGap_)&&(this.mode_=Math.abs(e)<4?Jo:ko),this.mode_===Jo){var s=n.getView();this.trackpadTimeoutId_?clearTimeout(this.trackpadTimeoutId_):s.setHint(Ci,1),this.trackpadTimeoutId_=setTimeout(this.decrementInteractingHint_.bind(this),this.trackpadEventGap_);var a=s.getResolution()*Math.pow(2,e/this.trackpadDeltaPerZoom_),h=s.getMinResolution(),u=s.getMaxResolution(),p=0;if(a<h?(a=Math.max(a,h/this.trackpadZoomBuffer_),p=1):a>u&&(a=Math.min(a,u*this.trackpadZoomBuffer_),p=-1),this.lastAnchor_){var l=s.calculateCenterZoom(a,this.lastAnchor_);s.setCenter(s.constrainCenter(l))}return s.setResolution(a),0===p&&this.constrainResolution_&&s.animate({resolution:s.constrainResolution(a,e>0?-1:1),easing:Li,anchor:this.lastAnchor_,duration:this.duration_}),p>0?s.animate({resolution:h,easing:Li,anchor:this.lastAnchor_,duration:500}):p<0&&s.animate({resolution:u,easing:Li,anchor:this.lastAnchor_,duration:500}),this.startTime_=r,!1}this.delta_+=e;var c=Math.max(this.timeout_-(r-this.startTime_),0);return clearTimeout(this.timeoutId_),this.timeoutId_=setTimeout(this.handleWheelZoom_.bind(this,n),c),!1},i.prototype.handleWheelZoom_=function(t){var i=t.getView();i.getAnimating()&&i.cancelAnimations();Co(i,-si(this.delta_,-1,1),this.lastAnchor_,this.duration_),this.mode_=void 0,this.delta_=0,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_=void 0},i.prototype.setMouseAnchor=function(t){this.useAnchor_=t,t||(this.lastAnchor_=null)},i}(Io),tr=function(t){function i(i){var e=i||{},n=e;n.stopDown||(n.stopDown=I),t.call(this,n),this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.threshold_=void 0!==e.threshold?e.threshold:.3,this.duration_=void 0!==e.duration?e.duration:250}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.handleDragEvent=function(t){var i=0,e=this.targetPointers[0],n=this.targetPointers[1],o=Math.atan2(n.clientY-e.clientY,n.clientX-e.clientX);if(void 0!==this.lastAngle_){var r=o-this.lastAngle_;this.rotationDelta_+=r,!this.rotating_&&Math.abs(this.rotationDelta_)>this.threshold_&&(this.rotating_=!0),i=r}this.lastAngle_=o;var s=t.map,a=s.getView();if(a.getConstraints().rotation!==gi){var h=s.getViewport().getBoundingClientRect(),u=Go(this.targetPointers);if(u[0]-=h.left,u[1]-=h.top,this.anchor_=s.getCoordinateFromPixel(u),this.rotating_){var p=a.getRotation();s.render(),To(a,p+i,this.anchor_)}}},i.prototype.handleUpEvent=function(t){if(this.targetPointers.length<2){var i=t.map.getView();if(i.setHint(Ci,-1),this.rotating_){var e=i.getRotation();Eo(i,e,this.anchor_,this.duration_)}return!1}return!0},i.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var i=t.map;return this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.handlingDownUpSequence||i.getView().setHint(Ci,1),!0}return!1},i}(Ko),ir=function(t){function i(i){var e=i||{},n=e;n.stopDown||(n.stopDown=I),t.call(this,n),this.constrainResolution_=e.constrainResolution||!1,this.anchor_=null,this.duration_=void 0!==e.duration?e.duration:400,this.lastDistance_=void 0,this.lastScaleDelta_=1}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.handleDragEvent=function(t){var i=1,e=this.targetPointers[0],n=this.targetPointers[1],o=e.clientX-n.clientX,r=e.clientY-n.clientY,s=Math.sqrt(o*o+r*r);void 0!==this.lastDistance_&&(i=this.lastDistance_/s),this.lastDistance_=s;var a=t.map,h=a.getView(),u=h.getResolution(),p=h.getMaxResolution(),l=h.getMinResolution(),c=u*i;c>p?(i=p/u,c=p):c<l&&(i=l/u,c=l),1!=i&&(this.lastScaleDelta_=i);var _=a.getViewport().getBoundingClientRect(),d=Go(this.targetPointers);d[0]-=_.left,d[1]-=_.top,this.anchor_=a.getCoordinateFromPixel(d),a.render(),Ro(h,c,this.anchor_)},i.prototype.handleUpEvent=function(t){if(this.targetPointers.length<2){var i=t.map.getView();i.setHint(Ci,-1);var e=i.getResolution();if(this.constrainResolution_||e<i.getMinResolution()||e>i.getMaxResolution()){var n=this.lastScaleDelta_-1;!function(t,i,e,n,o){i=t.constrainResolution(i,0,o),Ro(t,i,e,n)}(i,e,this.anchor_,this.duration_,n)}return!1}return!0},i.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var i=t.map;return this.anchor_=null,this.lastDistance_=void 0,this.lastScaleDelta_=1,this.handlingDownUpSequence||i.getView().setHint(Ci,1),!0}return!1},i}(Ko);var er=.5,nr={IDLE:0,LOADING:1,LOADED:2,ERROR:3},or=function(t){function i(i,e,n,o,r){var s=void 0!==r?nr.IDLE:nr.LOADED;t.call(this,i,e,n,s),this.loader_=void 0!==r?r:null,this.canvas_=o,this.error_=null}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.getError=function(){return this.error_},i.prototype.handleLoad_=function(t){t?(this.error_=t,this.state=nr.ERROR):this.state=nr.LOADED,this.changed()},i.prototype.load=function(){this.state==nr.IDLE&&(this.state=nr.LOADING,this.changed(),this.loader_(this.handleLoad_.bind(this)))},i.prototype.getImage=function(){return this.canvas_},i}(function(t){function i(i,e,n,o){t.call(this),this.extent=i,this.pixelRatio_=n,this.resolution=e,this.state=o}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.changed=function(){this.dispatchEvent(A.CHANGE)},i.prototype.getExtent=function(){return this.extent},i.prototype.getImage=function(){return n()},i.prototype.getPixelRatio=function(){return this.pixelRatio_},i.prototype.getResolution=function(){return this.resolution},i.prototype.getState=function(){return this.state},i.prototype.load=function(){n()},i}(P)),rr={IMAGE:"IMAGE",TILE:"TILE",VECTOR_TILE:"VECTOR_TILE",VECTOR:"VECTOR"},sr="image",ar=function(t){function i(i,e,n,o,r){t.call(this,i),this.vectorContext=e,this.frameState=n,this.context=o,this.glContext=r}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(b),hr=function(t){function i(i){t.call(this),this.highWaterMark=void 0!==i?i:2048,this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.canExpireCache=function(){return this.getCount()>this.highWaterMark},i.prototype.clear=function(){this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null,this.dispatchEvent(A.CLEAR)},i.prototype.containsKey=function(t){return this.entries_.hasOwnProperty(t)},i.prototype.forEach=function(t,i){for(var e=this.oldest_;e;)t.call(i,e.value_,e.key_,this),e=e.newer},i.prototype.get=function(t){var i=this.entries_[t];return ii(void 0!==i,15),i===this.newest_?i.value_:(i===this.oldest_?(this.oldest_=this.oldest_.newer,this.oldest_.older=null):(i.newer.older=i.older,i.older.newer=i.newer),i.newer=null,i.older=this.newest_,this.newest_.newer=i,this.newest_=i,i.value_)},i.prototype.remove=function(t){var i=this.entries_[t];return ii(void 0!==i,15),i===this.newest_?(this.newest_=i.older,this.newest_&&(this.newest_.newer=null)):i===this.oldest_?(this.oldest_=i.newer,this.oldest_&&(this.oldest_.older=null)):(i.newer.older=i.older,i.older.newer=i.newer),delete this.entries_[t],--this.count_,i.value_},i.prototype.getCount=function(){return this.count_},i.prototype.getKeys=function(){var t,i=new Array(this.count_),e=0;for(t=this.newest_;t;t=t.older)i[e++]=t.key_;return i},i.prototype.getValues=function(){var t,i=new Array(this.count_),e=0;for(t=this.newest_;t;t=t.older)i[e++]=t.value_;return i},i.prototype.peekLast=function(){return this.oldest_.value_},i.prototype.peekLastKey=function(){return this.oldest_.key_},i.prototype.peekFirstKey=function(){return this.newest_.key_},i.prototype.pop=function(){var t=this.oldest_;return delete this.entries_[t.key_],t.newer&&(t.newer.older=null),this.oldest_=t.newer,this.oldest_||(this.newest_=null),--this.count_,t.value_},i.prototype.replace=function(t,i){this.get(t),this.entries_[t].value_=i},i.prototype.set=function(t,i){ii(!(t in this.entries_),16);var e={key_:t,newer:null,older:this.newest_,value_:i};this.newest_?this.newest_.newer=e:this.oldest_=e,this.newest_=e,this.entries_[t]=e,++this.count_},i.prototype.setSize=function(t){this.highWaterMark=t},i.prototype.prune=function(){for(;this.canExpireCache();)this.pop()},i}(P),ur=[0,0,0,1],pr=[],lr=[0,0,0,1],cr=[0,0,0,0],_r=new hr,dr={},fr=null,vr={},gr=function(){var t,i,e=60,n=dr,o="32px ",r=["monospace","serif"],s=r.length,a="wmytzilWMYTZIL@#/&?$%10";function h(t){for(var e=yr(),n=100;n<=700;n+=300){for(var h=n+" ",u=!0,p=0;p<s;++p){var l=r[p];if(e.font=h+o+l,i=e.measureText(a).width,t!=l){e.font=h+o+t+","+l;var c=e.measureText(a).width;u=u&&c!=i}}if(u)return!0}return!1}function u(){var i=!0;for(var o in n)n[o]<e&&(h(o)?(n[o]=e,l(vr),fr=null,_r.clear()):(++n[o],i=!1));i&&(clearInterval(t),t=void 0)}return function(i){var o=ho(i);if(o)for(var r=0,s=o.length;r<s;++r){var a=o[r];a in n||(n[a]=e,h(a)||(n[a]=0,void 0===t&&(t=setInterval(u,32))))}}}();function yr(){return fr||(fr=Hn(1,1)),fr}var mr,Er,Tr=(Er=vr,function(t){var i=Er[t];return null==i&&(mr||((mr=document.createElement("span")).textContent="M",mr.style.margin=mr.style.padding="0 !important",mr.style.position="absolute !important",mr.style.left="-99999px !important"),mr.style.font=t,document.body.appendChild(mr),i=Er[t]=mr.offsetHeight,document.body.removeChild(mr)),i});function Cr(t,i){var e=yr();return t!=e.font&&(e.font=t),e.measureText(i).width}function Rr(t,i,e,n){0!==i&&(t.translate(e,n),t.rotate(i),t.translate(-e,-n))}var Ir=[1,0,0,1,0,0];function wr(t,i,e,n,o,r,s,a,h,u,p){var l;1!=e&&(l=t.globalAlpha,t.globalAlpha=l*e),i&&t.setTransform.apply(t,i),t.drawImage(n,o,r,s,a,h,u,s*p,a*p),l&&(t.globalAlpha=l),i&&t.setTransform.apply(t,Ir)}var Mr=/^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i,Or=/^([a-z]*)$/i;function br(t){return"string"==typeof t?t:Ar(t)}!function(){var t={},i=0}();function Pr(t){return t[0]=si(t[0]+.5|0,0,255),t[1]=si(t[1]+.5|0,0,255),t[2]=si(t[2]+.5|0,0,255),t[3]=si(t[3],0,1),t}function Ar(t){var i=t[0];i!=(0|i)&&(i=i+.5|0);var e=t[1];e!=(0|e)&&(e=e+.5|0);var n=t[2];return n!=(0|n)&&(n=n+.5|0),"rgba("+i+","+e+","+n+","+(void 0===t[3]?1:t[3])+")"}function Lr(t){return Array.isArray(t)?Ar(t):t}var Dr=function(){};Dr.prototype.drawCustom=function(t,i,e){},Dr.prototype.drawGeometry=function(t){},Dr.prototype.setStyle=function(t){},Dr.prototype.drawCircle=function(t,i){},Dr.prototype.drawFeature=function(t,i){},Dr.prototype.drawGeometryCollection=function(t,i){},Dr.prototype.drawLineString=function(t,i){},Dr.prototype.drawMultiLineString=function(t,i){},Dr.prototype.drawMultiPoint=function(t,i){},Dr.prototype.drawMultiPolygon=function(t,i){},Dr.prototype.drawPoint=function(t,i){},Dr.prototype.drawPolygon=function(t,i){},Dr.prototype.drawText=function(t,i){},Dr.prototype.setFillStrokeStyle=function(t,i){},Dr.prototype.setImageStyle=function(t,i){},Dr.prototype.setTextStyle=function(t,i){};var Fr=Dr,Nr=function(t){function i(i,e,n,o,r){t.call(this),this.context_=i,this.pixelRatio_=e,this.extent_=n,this.transform_=o,this.viewRotation_=r,this.contextFillState_=null,this.contextStrokeState_=null,this.contextTextState_=null,this.fillState_=null,this.strokeState_=null,this.image_=null,this.imageAnchorX_=0,this.imageAnchorY_=0,this.imageHeight_=0,this.imageOpacity_=0,this.imageOriginX_=0,this.imageOriginY_=0,this.imageRotateWithView_=!1,this.imageRotation_=0,this.imageScale_=0,this.imageWidth_=0,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=!1,this.textRotation_=0,this.textScale_=0,this.textFillState_=null,this.textStrokeState_=null,this.textState_=null,this.pixelCoordinates_=[],this.tmpLocalTransform_=[1,0,0,1,0,0]}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.drawImages_=function(t,i,e,n){if(this.image_){var o=de(t,i,e,2,this.transform_,this.pixelCoordinates_),r=this.context_,s=this.tmpLocalTransform_,a=r.globalAlpha;1!=this.imageOpacity_&&(r.globalAlpha=a*this.imageOpacity_);var h=this.imageRotation_;this.imageRotateWithView_&&(h+=this.viewRotation_);for(var u=0,p=o.length;u<p;u+=2){var l=o[u]-this.imageAnchorX_,c=o[u+1]-this.imageAnchorY_;if(0!==h||1!=this.imageScale_){var _=l+this.imageAnchorX_,d=c+this.imageAnchorY_;sn(s,_,d,this.imageScale_,this.imageScale_,h,-_,-d),r.setTransform.apply(r,s)}r.drawImage(this.image_,this.imageOriginX_,this.imageOriginY_,this.imageWidth_,this.imageHeight_,l,c,this.imageWidth_,this.imageHeight_)}0===h&&1==this.imageScale_||r.setTransform(1,0,0,1,0,0),1!=this.imageOpacity_&&(r.globalAlpha=a)}},i.prototype.drawText_=function(t,i,e,n){if(this.textState_&&""!==this.text_){this.textFillState_&&this.setContextFillState_(this.textFillState_),this.textStrokeState_&&this.setContextStrokeState_(this.textStrokeState_),this.setContextTextState_(this.textState_);var o=de(t,i,e,n,this.transform_,this.pixelCoordinates_),r=this.context_,s=this.textRotation_;for(this.textRotateWithView_&&(s+=this.viewRotation_);i<e;i+=n){var a=o[i]+this.textOffsetX_,h=o[i+1]+this.textOffsetY_;if(0!==s||1!=this.textScale_){var u=sn(this.tmpLocalTransform_,a,h,this.textScale_,this.textScale_,s,-a,-h);r.setTransform.apply(r,u)}this.textStrokeState_&&r.strokeText(this.text_,a,h),this.textFillState_&&r.fillText(this.text_,a,h)}0===s&&1==this.textScale_||r.setTransform(1,0,0,1,0,0)}},i.prototype.moveToLineTo_=function(t,i,e,n,o){var r=this.context_,s=de(t,i,e,n,this.transform_,this.pixelCoordinates_);r.moveTo(s[0],s[1]);var a=s.length;o&&(a-=2);for(var h=2;h<a;h+=2)r.lineTo(s[h],s[h+1]);return o&&r.closePath(),e},i.prototype.drawRings_=function(t,i,e,n){for(var o=0,r=e.length;o<r;++o)i=this.moveToLineTo_(t,i,e[o],n,!0);return i},i.prototype.drawCircle=function(t){if(pe(this.extent_,t.getExtent())){if(this.fillState_||this.strokeState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var i=function(t,i,e){var n=t.getFlatCoordinates();if(n){var o=t.getStride();return de(n,0,n.length,o,i,e)}return null}(t,this.transform_,this.pixelCoordinates_),e=i[2]-i[0],n=i[3]-i[1],o=Math.sqrt(e*e+n*n),r=this.context_;r.beginPath(),r.arc(i[0],i[1],o,0,2*Math.PI),this.fillState_&&r.fill(),this.strokeState_&&r.stroke()}""!==this.text_&&this.drawText_(t.getCenter(),0,2,2)}},i.prototype.setStyle=function(t){this.setFillStrokeStyle(t.getFill(),t.getStroke()),this.setImageStyle(t.getImage()),this.setTextStyle(t.getText())},i.prototype.drawGeometry=function(t){switch(t.getType()){case ce.POINT:this.drawPoint(t);break;case ce.LINE_STRING:this.drawLineString(t);break;case ce.POLYGON:this.drawPolygon(t);break;case ce.MULTI_POINT:this.drawMultiPoint(t);break;case ce.MULTI_LINE_STRING:this.drawMultiLineString(t);break;case ce.MULTI_POLYGON:this.drawMultiPolygon(t);break;case ce.GEOMETRY_COLLECTION:this.drawGeometryCollection(t);break;case ce.CIRCLE:this.drawCircle(t)}},i.prototype.drawFeature=function(t,i){var e=i.getGeometryFunction()(t);e&&pe(this.extent_,e.getExtent())&&(this.setStyle(i),this.drawGeometry(e))},i.prototype.drawGeometryCollection=function(t){for(var i=t.getGeometriesArray(),e=0,n=i.length;e<n;++e)this.drawGeometry(i[e])},i.prototype.drawPoint=function(t){var i=t.getFlatCoordinates(),e=t.getStride();this.image_&&this.drawImages_(i,0,i.length,e),""!==this.text_&&this.drawText_(i,0,i.length,e)},i.prototype.drawMultiPoint=function(t){var i=t.getFlatCoordinates(),e=t.getStride();this.image_&&this.drawImages_(i,0,i.length,e),""!==this.text_&&this.drawText_(i,0,i.length,e)},i.prototype.drawLineString=function(t){if(pe(this.extent_,t.getExtent())){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);var i=this.context_,e=t.getFlatCoordinates();i.beginPath(),this.moveToLineTo_(e,0,e.length,t.getStride(),!1),i.stroke()}if(""!==this.text_){var n=t.getFlatMidpoint();this.drawText_(n,0,2,2)}}},i.prototype.drawMultiLineString=function(t){var i=t.getExtent();if(pe(this.extent_,i)){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);var e=this.context_,n=t.getFlatCoordinates(),o=0,r=t.getEnds(),s=t.getStride();e.beginPath();for(var a=0,h=r.length;a<h;++a)o=this.moveToLineTo_(n,o,r[a],s,!1);e.stroke()}if(""!==this.text_){var u=t.getFlatMidpoints();this.drawText_(u,0,u.length,2)}}},i.prototype.drawPolygon=function(t){if(pe(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var i=this.context_;i.beginPath(),this.drawRings_(t.getOrientedFlatCoordinates(),0,t.getEnds(),t.getStride()),this.fillState_&&i.fill(),this.strokeState_&&i.stroke()}if(""!==this.text_){var e=t.getFlatInteriorPoint();this.drawText_(e,0,2,2)}}},i.prototype.drawMultiPolygon=function(t){if(pe(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var i=this.context_,e=t.getOrientedFlatCoordinates(),n=0,o=t.getEndss(),r=t.getStride();i.beginPath();for(var s=0,a=o.length;s<a;++s){var h=o[s];n=this.drawRings_(e,n,h,r)}this.fillState_&&i.fill(),this.strokeState_&&i.stroke()}if(""!==this.text_){var u=t.getFlatInteriorPoints();this.drawText_(u,0,u.length,2)}}},i.prototype.setContextFillState_=function(t){var i=this.context_,e=this.contextFillState_;e?e.fillStyle!=t.fillStyle&&(e.fillStyle=i.fillStyle=t.fillStyle):(i.fillStyle=t.fillStyle,this.contextFillState_={fillStyle:t.fillStyle})},i.prototype.setContextStrokeState_=function(t){var i=this.context_,e=this.contextStrokeState_;e?(e.lineCap!=t.lineCap&&(e.lineCap=i.lineCap=t.lineCap),X&&(Zt(e.lineDash,t.lineDash)||i.setLineDash(e.lineDash=t.lineDash),e.lineDashOffset!=t.lineDashOffset&&(e.lineDashOffset=i.lineDashOffset=t.lineDashOffset)),e.lineJoin!=t.lineJoin&&(e.lineJoin=i.lineJoin=t.lineJoin),e.lineWidth!=t.lineWidth&&(e.lineWidth=i.lineWidth=t.lineWidth),e.miterLimit!=t.miterLimit&&(e.miterLimit=i.miterLimit=t.miterLimit),e.strokeStyle!=t.strokeStyle&&(e.strokeStyle=i.strokeStyle=t.strokeStyle)):(i.lineCap=t.lineCap,X&&(i.setLineDash(t.lineDash),i.lineDashOffset=t.lineDashOffset),i.lineJoin=t.lineJoin,i.lineWidth=t.lineWidth,i.miterLimit=t.miterLimit,i.strokeStyle=t.strokeStyle,this.contextStrokeState_={lineCap:t.lineCap,lineDash:t.lineDash,lineDashOffset:t.lineDashOffset,lineJoin:t.lineJoin,lineWidth:t.lineWidth,miterLimit:t.miterLimit,strokeStyle:t.strokeStyle})},i.prototype.setContextTextState_=function(t){var i=this.context_,e=this.contextTextState_,n=t.textAlign?t.textAlign:"center";e?(e.font!=t.font&&(e.font=i.font=t.font),e.textAlign!=n&&(e.textAlign=i.textAlign=n),e.textBaseline!=t.textBaseline&&(e.textBaseline=i.textBaseline=t.textBaseline)):(i.font=t.font,i.textAlign=n,i.textBaseline=t.textBaseline,this.contextTextState_={font:t.font,textAlign:n,textBaseline:t.textBaseline})},i.prototype.setFillStrokeStyle=function(t,i){if(t){var e=t.getColor();this.fillState_={fillStyle:Lr(e||ur)}}else this.fillState_=null;if(i){var n=i.getColor(),o=i.getLineCap(),r=i.getLineDash(),s=i.getLineDashOffset(),a=i.getLineJoin(),h=i.getWidth(),u=i.getMiterLimit();this.strokeState_={lineCap:void 0!==o?o:"round",lineDash:r||pr,lineDashOffset:s||0,lineJoin:void 0!==a?a:"round",lineWidth:this.pixelRatio_*(void 0!==h?h:1),miterLimit:void 0!==u?u:10,strokeStyle:Lr(n||lr)}}else this.strokeState_=null},i.prototype.setImageStyle=function(t){if(t){var i=t.getAnchor(),e=t.getImage(1),n=t.getOrigin(),o=t.getSize();this.imageAnchorX_=i[0],this.imageAnchorY_=i[1],this.imageHeight_=o[1],this.image_=e,this.imageOpacity_=t.getOpacity(),this.imageOriginX_=n[0],this.imageOriginY_=n[1],this.imageRotateWithView_=t.getRotateWithView(),this.imageRotation_=t.getRotation(),this.imageScale_=t.getScale()*this.pixelRatio_,this.imageWidth_=o[0]}else this.image_=null},i.prototype.setTextStyle=function(t){if(t){var i=t.getFill();if(i){var e=i.getColor();this.textFillState_={fillStyle:Lr(e||ur)}}else this.textFillState_=null;var n=t.getStroke();if(n){var o=n.getColor(),r=n.getLineCap(),s=n.getLineDash(),a=n.getLineDashOffset(),h=n.getLineJoin(),u=n.getWidth(),p=n.getMiterLimit();this.textStrokeState_={lineCap:void 0!==r?r:"round",lineDash:s||pr,lineDashOffset:a||0,lineJoin:void 0!==h?h:"round",lineWidth:void 0!==u?u:1,miterLimit:void 0!==p?p:10,strokeStyle:Lr(o||lr)}}else this.textStrokeState_=null;var l=t.getFont(),c=t.getOffsetX(),_=t.getOffsetY(),d=t.getRotateWithView(),f=t.getRotation(),v=t.getScale(),g=t.getText(),y=t.getTextAlign(),m=t.getTextBaseline();this.textState_={font:void 0!==l?l:"10px sans-serif",textAlign:void 0!==y?y:"center",textBaseline:void 0!==m?m:"middle"},this.text_=void 0!==g?g:"",this.textOffsetX_=void 0!==c?this.pixelRatio_*c:0,this.textOffsetY_=void 0!==_?this.pixelRatio_*_:0,this.textRotateWithView_=void 0!==d&&d,this.textRotation_=void 0!==f?f:0,this.textScale_=this.pixelRatio_*(void 0!==v?v:1)}else this.text_=""},i}(Fr),Gr=function(){this.cache_={},this.cacheSize_=0,this.maxCacheSize_=32};function Kr(t,i,e){return i+":"+t+":"+(e?br(e):"null")}Gr.prototype.clear=function(){this.cache_={},this.cacheSize_=0},Gr.prototype.expire=function(){if(this.cacheSize_>this.maxCacheSize_){var t=0;for(var i in this.cache_){var e=this.cache_[i];0!=(3&t++)||e.hasListener()||(delete this.cache_[i],--this.cacheSize_)}}},Gr.prototype.get=function(t,i,e){var n=Kr(t,i,e);return n in this.cache_?this.cache_[n]:null},Gr.prototype.set=function(t,i,e,n){var o=Kr(t,i,e);this.cache_[o]=n,++this.cacheSize_},Gr.prototype.setSize=function(t){this.maxCacheSize_=t,this.expire()};var Zr=new Gr;function zr(t,i){Zr.expire()}function Ur(t,i){return t.zIndex-i.zIndex}var xr=[],jr=function(t){function i(i){t.call(this,i);var e=i.getViewport();this.context_=Hn(),this.canvas_=this.context_.canvas,this.canvas_.style.width="100%",this.canvas_.style.height="100%",this.canvas_.style.display="block",this.canvas_.className=ro,e.insertBefore(this.canvas_,e.childNodes[0]||null),this.renderedVisible_=!0,this.transform_=[1,0,0,1,0,0]}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.dispatchRenderEvent=function(t,i){var e=this.getMap(),n=this.context_;if(e.hasListener(t)){var o=i.extent,r=i.pixelRatio,s=i.viewState.rotation,a=this.getTransform(i),h=new Nr(n,r,o,a,s),u=new ar(t,h,i,n,null);e.dispatchEvent(u)}},i.prototype.getTransform=function(t){var i=t.viewState,e=this.canvas_.width/2,n=this.canvas_.height/2,o=t.pixelRatio/i.resolution,r=-o,s=-i.rotation,a=-i.center[0],h=-i.center[1];return sn(this.transform_,e,n,o,r,s,a,h)},i.prototype.renderFrame=function(t){if(t){var i=this.context_,e=t.pixelRatio,n=Math.round(t.size[0]*e),o=Math.round(t.size[1]*e);this.canvas_.width!=n||this.canvas_.height!=o?(this.canvas_.width=n,this.canvas_.height=o):i.clearRect(0,0,n,o);var r=t.viewState.rotation;this.calculateMatrices2D(t),this.dispatchRenderEvent(Jt,t);var s=t.layerStatesArray;!function(t,i){var e,n=t.length,o=Array(t.length);for(e=0;e<n;e++)o[e]={index:e,value:t[e]};for(o.sort(function(t,e){return i(t.value,e.value)||t.index-e.index}),e=0;e<t.length;e++)t[e]=o[e].value}(s,Ur),r&&(i.save(),Rr(i,r,n/2,o/2));var a,h,u=t.viewState.resolution;for(a=0,h=s.length;a<h;++a){var p=s[a],l=p.layer,c=this.getLayerRenderer(l);uo(p,u)&&p.sourceState==$n.READY&&(c.prepareFrame(t,p)&&c.composeFrame(t,p,i))}r&&i.restore(),this.dispatchRenderEvent($t,t),this.renderedVisible_||(this.canvas_.style.display="",this.renderedVisible_=!0),this.scheduleRemoveUnusedLayerRenderers(t),this.scheduleExpireIconCache(t)}else this.renderedVisible_&&(this.canvas_.style.display="none",this.renderedVisible_=!1)},i.prototype.forEachLayerAtPixel=function(t,i,e,n,o,r,s){var a,h,u=i.viewState.resolution,p=i.layerStatesArray,l=p.length,c=nn(i.pixelToCoordinateTransform,t.slice());for(h=l-1;h>=0;--h){var _=p[h],d=_.layer;if(uo(_,u)&&r.call(s,d))if(a=this.getLayerRenderer(d).forEachLayerAtCoordinate(c,i,e,n,o))return a}},i.prototype.registerLayerRenderers=function(i){t.prototype.registerLayerRenderers.call(this,i);for(var e=0,n=i.length;e<n;++e){var o=i[e];r=o,xr.indexOf(r)>=0||xr.push(o)}var r},i}(function(t){function i(i){t.call(this),this.map_=i,this.layerRenderers_={},this.layerRendererListeners_={},this.layerRendererConstructors_=[]}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.dispatchRenderEvent=function(t,i){n()},i.prototype.registerLayerRenderers=function(t){this.layerRendererConstructors_.push.apply(this.layerRendererConstructors_,t)},i.prototype.calculateMatrices2D=function(t){var i=t.viewState,e=t.coordinateToPixelTransform,n=t.pixelToCoordinateTransform;sn(e,t.size[0]/2,t.size[1]/2,1/i.resolution,-1/i.resolution,-i.rotation,-i.center[0],-i.center[1]),function(t){var i,e=(i=t)[0]*i[3]-i[1]*i[2];ii(0!==e,32);var n=t[0],o=t[1],r=t[2],s=t[3],a=t[4],h=t[5];t[0]=s/e,t[1]=-o/e,t[2]=-r/e,t[3]=n/e,t[4]=(r*h-s*a)/e,t[5]=-(n*h-o*a)/e}(en(n,e))},i.prototype.removeLayerRenderers=function(){for(var t in this.layerRenderers_)this.removeLayerRendererByKey_(t).dispose()},i.prototype.forEachFeatureAtCoordinate=function(t,i,e,n,o,s,a){var h,u=i.viewState,p=u.resolution;function l(t,e){var s=i.layerStates[r(e)].managed;if(!(r(t)in i.skippedFeatureUids)||s)return n.call(o,t,s?e:null)}var c=u.projection,_=t;if(c.canWrapX()){var d=c.getExtent(),f=ue(d),v=t[0];if(v<d[0]||v>d[2])_=[v+f*Math.ceil((d[0]-v)/f),t[1]]}var g,y=i.layerStatesArray;for(g=y.length-1;g>=0;--g){var m=y[g],E=m.layer;if(uo(m,p)&&s.call(a,E)){var T=this.getLayerRenderer(E),C=E.getSource();if(C&&(h=T.forEachFeatureAtCoordinate(C.getWrapX()?_:t,i,e,l)),h)return h}}},i.prototype.forEachLayerAtPixel=function(t,i,e,o,r,s,a){return n()},i.prototype.hasFeatureAtCoordinate=function(t,i,e,n,o){return void 0!==this.forEachFeatureAtCoordinate(t,i,e,R,this,n,o)},i.prototype.getLayerRenderer=function(t){var i=r(t);if(i in this.layerRenderers_)return this.layerRenderers_[i];for(var e,n=0,o=this.layerRendererConstructors_.length;n<o;++n){var s=this.layerRendererConstructors_[n];if(s.handles(t)){e=s.create(this,t);break}}if(!e)throw new Error("Unable to create renderer for layer: "+t.getType());return this.layerRenderers_[i]=e,this.layerRendererListeners_[i]=g(e,A.CHANGE,this.handleLayerRendererChange_,this),e},i.prototype.getLayerRendererByKey=function(t){return this.layerRenderers_[t]},i.prototype.getLayerRenderers=function(){return this.layerRenderers_},i.prototype.getMap=function(){return this.map_},i.prototype.handleLayerRendererChange_=function(){this.map_.render()},i.prototype.removeLayerRendererByKey_=function(t){var i=this.layerRenderers_[t];return delete this.layerRenderers_[t],E(this.layerRendererListeners_[t]),delete this.layerRendererListeners_[t],i},i.prototype.removeUnusedLayerRenderers_=function(t,i){for(var e in this.layerRenderers_)i&&e in i.layerStates||this.removeLayerRendererByKey_(e).dispose()},i.prototype.renderFrame=function(t){n()},i.prototype.scheduleExpireIconCache=function(t){t.postRenderFunctions.push(zr)},i.prototype.scheduleRemoveUnusedLayerRenderers=function(t){for(var i in this.layerRenderers_)if(!(i in t.layerStates))return void t.postRenderFunctions.push(this.removeUnusedLayerRenderers_.bind(this))},i}(C)),Vr=function(t){function i(i){t.call(this,i),this.renderedResolution,this.transform_=[1,0,0,1,0,0]}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.clip=function(t,i,e){var n=i.pixelRatio,o=i.size[0]*n,r=i.size[1]*n,s=i.viewState.rotation,a=ae(e),h=he(e),u=ie(e),p=te(e);nn(i.coordinateToPixelTransform,a),nn(i.coordinateToPixelTransform,h),nn(i.coordinateToPixelTransform,u),nn(i.coordinateToPixelTransform,p),t.save(),Rr(t,-s,o/2,r/2),t.beginPath(),t.moveTo(a[0]*n,a[1]*n),t.lineTo(h[0]*n,h[1]*n),t.lineTo(u[0]*n,u[1]*n),t.lineTo(p[0]*n,p[1]*n),t.clip(),Rr(t,s,o/2,r/2)},i.prototype.dispatchComposeEvent_=function(t,i,e,n){var o=this.getLayer();if(o.hasListener(t)){var r=e.size[0]*e.pixelRatio,s=e.size[1]*e.pixelRatio,a=e.viewState.rotation;Rr(i,-a,r/2,s/2);var h=void 0!==n?n:this.getTransform(e,0),u=new Nr(i,e.pixelRatio,e.extent,h,e.viewState.rotation),p=new ar(t,u,e,i,null);o.dispatchEvent(p),Rr(i,a,r/2,s/2)}},i.prototype.forEachLayerAtCoordinate=function(t,i,e,n,o){return this.forEachFeatureAtCoordinate(t,i,e,R)?n.call(o,this.getLayer(),null):void 0},i.prototype.postCompose=function(t,i,e,n){this.dispatchComposeEvent_($t,t,i,n)},i.prototype.preCompose=function(t,i,e){this.dispatchComposeEvent_(Jt,t,i,e)},i.prototype.dispatchRenderEvent=function(t,i,e){this.dispatchComposeEvent_(kt,t,i,e)},i.prototype.getTransform=function(t,i){var e=t.viewState,n=t.pixelRatio,o=n*t.size[0]/2,r=n*t.size[1]/2,s=n/e.resolution,a=-s,h=-e.rotation,u=-e.center[0]+i,p=-e.center[1];return sn(this.transform_,o,r,s,a,h,u,p)},i.prototype.composeFrame=function(t,i,e){n()},i.prototype.prepareFrame=function(t,i){return n()},i}(function(t){function i(i){t.call(this),this.layer_=i}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.createLoadedTileFinder=function(t,i,e){return function(n,o){return t.forEachLoadedTile(i,n,o,function(t){e[n]||(e[n]={}),e[n][t.tileCoord.toString()]=t})}},i.prototype.forEachFeatureAtCoordinate=function(t,i,e,n){},i.prototype.getLayer=function(){return this.layer_},i.prototype.handleImageChange_=function(t){t.target.getState()===nr.LOADED&&this.renderIfReadyAndVisible()},i.prototype.hasFeatureAtCoordinate=function(t,i){return!1},i.prototype.loadImage=function(t){var i=t.getState();return i!=nr.LOADED&&i!=nr.ERROR&&g(t,A.CHANGE,this.handleImageChange_,this),i==nr.IDLE&&(t.load(),i=t.getState()),i==nr.LOADED},i.prototype.renderIfReadyAndVisible=function(){var t=this.getLayer();t.getVisible()&&t.getSourceState()==$n.READY&&this.changed()},i.prototype.scheduleExpireCache=function(t,i){if(i.canExpireCache()){var e=function(t,i,e){var n=r(t);n in e.usedTiles&&t.expireCache(e.viewState.projection,e.usedTiles[n])}.bind(null,i);t.postRenderFunctions.push(e)}},i.prototype.updateUsedTiles=function(t,i,e,n){var o=r(i),s=e.toString();o in t?s in t[o]?t[o][s].extend(n):t[o][s]=n:(t[o]={},t[o][s]=n)},i.prototype.manageTilePyramid=function(t,i,e,n,o,s,a,h,u,p){var l=r(i);l in t.wantedTiles||(t.wantedTiles[l]={});var c,_,d,f,v,g,y=t.wantedTiles[l],m=t.tileQueue;for(g=e.getMinZoom();g<=a;++g)for(_=e.getTileRangeForExtentAndZ(s,g,_),d=e.getResolution(g),f=_.minX;f<=_.maxX;++f)for(v=_.minY;v<=_.maxY;++v)a-g<=h?((c=i.getTile(g,f,v,n,o)).getState()==ti.IDLE&&(y[c.getKey()]=!0,m.isKeyQueued(c.getKey())||m.enqueue([c,l,e.getTileCoordCenter(c.tileCoord),d])),void 0!==u&&u.call(p,c)):i.useTile(g,f,v,o)},i}(L)),Br=function(t){function i(i){t.call(this,i),this.coordinateToCanvasPixelTransform=[1,0,0,1,0,0],this.hitCanvasContext_=null}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.composeFrame=function(t,i,e){this.preCompose(e,t);var n=this.getImage();if(n){var o=i.extent,r=void 0!==o&&!ji(o,t.extent)&&pe(o,t.extent);r&&this.clip(e,t,o);var s=this.getImageTransform(),a=e.globalAlpha;e.globalAlpha=i.opacity;var h=s[4],u=s[5],p=n.width*s[0],l=n.height*s[3];p>=.5&&l>=.5&&e.drawImage(n,0,0,+n.width,+n.height,Math.round(h),Math.round(u),Math.round(p),Math.round(l)),e.globalAlpha=a,r&&e.restore()}this.postCompose(e,t,i)},i.prototype.getImage=function(){return n()},i.prototype.getImageTransform=function(){return n()},i.prototype.forEachLayerAtCoordinate=function(t,i,e,n,o){if(this.getImage()){var r=nn(this.coordinateToCanvasPixelTransform,t.slice());Pi(r,i.viewState.resolution/this.renderedResolution),this.hitCanvasContext_||(this.hitCanvasContext_=Hn(1,1)),this.hitCanvasContext_.clearRect(0,0,1,1),this.hitCanvasContext_.drawImage(this.getImage(),r[0],r[1],1,1,0,0,1,1);var s=this.hitCanvasContext_.getImageData(0,0,1,1).data;return s[3]>0?n.call(o,this.getLayer(),s):void 0}},i}(Vr),Yr=function(t){function i(e){if(t.call(this,e),this.image_=null,this.imageTransform_=[1,0,0,1,0,0],this.skippedFeatures_=[],this.vectorRenderer_=null,e.getType()===rr.VECTOR)for(var n=0,o=xr.length;n<o;++n){var r=xr[n];if(r!==i&&r.handles(e)){this.vectorRenderer_=new r(e);break}}}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.disposeInternal=function(){this.vectorRenderer_&&this.vectorRenderer_.dispose(),t.prototype.disposeInternal.call(this)},i.prototype.getImage=function(){return this.image_?this.image_.getImage():null},i.prototype.getImageTransform=function(){return this.imageTransform_},i.prototype.prepareFrame=function(t,i){var e,n=t.pixelRatio,o=t.size,r=t.viewState,s=r.center,a=r.resolution,h=this.getLayer().getSource(),u=t.viewHints,l=this.vectorRenderer_,c=t.extent;if(l||void 0===i.extent||(c=se(c,i.extent)),!u[Ti]&&!u[Ci]&&!le(c)){var _=r.projection,d=this.skippedFeatures_;if(l){var f=l.context,v=p({},t,{size:[ue(c)/a,re(c)/a],viewState:p({},t.viewState,{rotation:0})}),g=Object.keys(v.skippedFeatureUids).sort();e=new or(c,a,n,f.canvas,function(t){!l.prepareFrame(v,i)||!l.replayGroupChanged&&Zt(d,g)||(f.canvas.width=v.size[0]*n,f.canvas.height=v.size[1]*n,l.compose(f,v,i),d=g,t())})}else e=h.getImage(c,a,n,_);e&&this.loadImage(e)&&(this.image_=e,this.skippedFeatures_=d)}if(this.image_){var y=(e=this.image_).getExtent(),m=e.getResolution(),E=e.getPixelRatio(),T=n*m/(a*E),C=sn(this.imageTransform_,n*o[0]/2,n*o[1]/2,T,T,0,E*(y[0]-s[0])/m,E*(s[1]-y[3])/m);sn(this.coordinateToCanvasPixelTransform,n*o[0]/2-C[4],n*o[1]/2-C[5],n/a,-n/a,0,-s[0],-s[1]),this.renderedResolution=m*n/E}return!!this.image_},i.prototype.forEachFeatureAtCoordinate=function(i,e,n,o){return this.vectorRenderer_?this.vectorRenderer_.forEachFeatureAtCoordinate(i,e,n,o):t.prototype.forEachFeatureAtCoordinate.call(this,i,e,n,o)},i}(Br);Yr.handles=function(t){return t.getType()===rr.IMAGE||t.getType()===rr.VECTOR&&t.getRenderMode()===sr},Yr.create=function(t,i){return new Yr(i)};var Hr=Yr,Wr=function(t,i,e,n){this.minX=t,this.maxX=i,this.minY=e,this.maxY=n};function Xr(t,i,e,n,o){return void 0!==o?(o.minX=t,o.maxX=i,o.minY=e,o.maxY=n,o):new Wr(t,i,e,n)}Wr.prototype.contains=function(t){return this.containsXY(t[1],t[2])},Wr.prototype.containsTileRange=function(t){return this.minX<=t.minX&&t.maxX<=this.maxX&&this.minY<=t.minY&&t.maxY<=this.maxY},Wr.prototype.containsXY=function(t,i){return this.minX<=t&&t<=this.maxX&&this.minY<=i&&i<=this.maxY},Wr.prototype.equals=function(t){return this.minX==t.minX&&this.minY==t.minY&&this.maxX==t.maxX&&this.maxY==t.maxY},Wr.prototype.extend=function(t){t.minX<this.minX&&(this.minX=t.minX),t.maxX>this.maxX&&(this.maxX=t.maxX),t.minY<this.minY&&(this.minY=t.minY),t.maxY>this.maxY&&(this.maxY=t.maxY)},Wr.prototype.getHeight=function(){return this.maxY-this.minY+1},Wr.prototype.getSize=function(){return[this.getWidth(),this.getHeight()]},Wr.prototype.getWidth=function(){return this.maxX-this.minX+1},Wr.prototype.intersects=function(t){return this.minX<=t.maxX&&this.maxX>=t.minX&&this.minY<=t.maxY&&this.maxY>=t.minY};var qr=Wr,Qr=function(t){function i(i,e){t.call(this,i),this.context=e?null:Hn(),this.oversampling_,this.renderedExtent_=null,this.renderedRevision,this.renderedTiles=[],this.newTiles_=!1,this.tmpExtent=[1/0,1/0,-1/0,-1/0],this.tmpTileRange_=new qr(0,0,0,0),this.imageTransform_=[1,0,0,1,0,0],this.zDirection=0}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.isDrawableTile_=function(t){var i=this.getLayer(),e=t.getState(),n=i.getUseInterimTilesOnError();return e==ti.LOADED||e==ti.EMPTY||e==ti.ERROR&&!n},i.prototype.getTile=function(t,i,e,n,o){var r=this.getLayer(),s=r.getSource().getTile(t,i,e,n,o);return s.getState()==ti.ERROR&&(r.getUseInterimTilesOnError()?r.getPreload()>0&&(this.newTiles_=!0):s.setState(ti.LOADED)),this.isDrawableTile_(s)||(s=s.getInterimTile()),s},i.prototype.prepareFrame=function(t,i){var e=t.pixelRatio,n=t.size,o=t.viewState,s=o.projection,a=o.resolution,h=o.center,u=this.getLayer(),p=u.getSource(),l=p.getRevision(),c=p.getTileGridForProjection(s),_=c.getZForResolution(a,this.zDirection),d=c.getResolution(_),f=Math.round(a/d)||1,v=t.extent;if(void 0!==i.extent&&(v=se(v,i.extent)),le(v))return!1;var g=c.getTileRangeForExtentAndZ(v,_),y=c.getTileRangeExtent(_,g),m=p.getTilePixelRatio(e),E={};E[_]={};var T,C,R,I=this.createLoadedTileFinder(p,s,E),w=t.viewHints,M=w[Ti]||w[Ci],O=this.tmpExtent,b=this.tmpTileRange_;for(this.newTiles_=!1,C=g.minX;C<=g.maxX;++C)for(R=g.minY;R<=g.maxY;++R)if(!(Date.now()-t.time>16&&M)){if(T=this.getTile(_,C,R,e,s),this.isDrawableTile_(T)){var P=r(this);if(T.getState()==ti.LOADED){E[_][T.tileCoord.toString()]=T;var A=T.inTransition(P);this.newTiles_||!A&&-1!==this.renderedTiles.indexOf(T)||(this.newTiles_=!0)}if(1===T.getAlpha(P,t.time))continue}var L=c.getTileCoordChildTileRange(T.tileCoord,b,O),D=!1;L&&(D=I(_+1,L)),D||c.forEachTileCoordParentTileRange(T.tileCoord,I,null,b,O)}var F=d*e/m*f;if(!(this.renderedResolution&&Date.now()-t.time>16&&M)&&(this.newTiles_||!this.renderedExtent_||!ji(this.renderedExtent_,v)||this.renderedRevision!=l||f!=this.oversampling_||!M&&F!=this.renderedResolution)){var N=this.context;if(N){var G=p.getTilePixelSize(_,e,s),K=Math.round(g.getWidth()*G[0]/f),Z=Math.round(g.getHeight()*G[1]/f),z=N.canvas;z.width!=K||z.height!=Z?(this.oversampling_=f,z.width=K,z.height=Z):(this.renderedExtent_&&!Xi(y,this.renderedExtent_)&&N.clearRect(0,0,K,Z),f=this.oversampling_)}this.renderedTiles.length=0;var U,x,j,V,B,Y,H,W,X,q,Q=Object.keys(E).map(Number);for(Q.sort(function(t,i){return t===_?1:i===_?-1:t>i?1:t<i?-1:0}),V=0,B=Q.length;V<B;++V)for(var $ in j=Q[V],x=p.getTilePixelSize(j,e,s),U=c.getResolution(j)/d,H=m*p.getGutterForProjection(s),W=E[j])T=W[$],C=((Y=c.getTileCoordExtent(T.getTileCoord(),O))[0]-y[0])/d*m/f,R=(y[3]-Y[3])/d*m/f,X=x[0]*U/f,q=x[1]*U/f,this.drawTileImage(T,t,i,C,R,X,q,H,_===j),this.renderedTiles.push(T);this.renderedRevision=l,this.renderedResolution=d*e/m*f,this.renderedExtent_=y}var J=this.renderedResolution/a,k=sn(this.imageTransform_,e*n[0]/2,e*n[1]/2,J,J,0,(this.renderedExtent_[0]-h[0])/this.renderedResolution*e,(h[1]-this.renderedExtent_[3])/this.renderedResolution*e);return sn(this.coordinateToCanvasPixelTransform,e*n[0]/2-k[4],e*n[1]/2-k[5],e/a,-e/a,0,-h[0],-h[1]),this.updateUsedTiles(t.usedTiles,p,_,g),this.manageTilePyramid(t,p,c,e,s,v,_,u.getPreload()),this.scheduleExpireCache(t,p),this.renderedTiles.length>0},i.prototype.drawTileImage=function(t,i,e,n,o,s,a,h,u){var p=this.getTileImage(t);if(p){var l=r(this),c=u?t.getAlpha(l,i.time):1,_=this.getLayer().getSource();1!==c||_.getOpaque(i.viewState.projection)||this.context.clearRect(n,o,s,a);var d=c!==this.context.globalAlpha;d&&(this.context.save(),this.context.globalAlpha=c),this.context.drawImage(p,h,h,p.width-2*h,p.height-2*h,n,o,s,a),d&&this.context.restore(),1!==c?i.animate=!0:u&&t.endTransition(l)}},i.prototype.getImage=function(){var t=this.context;return t?t.canvas:null},i.prototype.getImageTransform=function(){return this.imageTransform_},i.prototype.getTileImage=function(t){return t.getImage()},i}(Br);Qr.handles=function(t){return t.getType()===rr.TILE},Qr.create=function(t,i){return new Qr(i)},Qr.prototype.getLayer;var $r=Qr,Jr=e(0),kr=e.n(Jr),Sr=function(){};Sr.prototype.getReplay=function(t,i){return n()},Sr.prototype.isEmpty=function(){return n()},Sr.prototype.addDeclutter=function(t){return n()};var ts=Sr,is={CIRCLE:"Circle",DEFAULT:"Default",IMAGE:"Image",LINE_STRING:"LineString",POLYGON:"Polygon",TEXT:"Text"};function es(t,i,e,n){for(var o=t[i],r=t[i+1],s=0,a=i+n;a<e;a+=n){var h=t[a],u=t[a+1];s+=Math.sqrt((h-o)*(h-o)+(u-r)*(u-r)),o=h,r=u}return s}function ns(t,i,e,n,o,r,s,a){for(var h,u,p,l=[],c=t[i]>t[e-n],_=o.length,d=t[i],f=t[i+1],v=t[i+=n],g=t[i+1],y=0,m=Math.sqrt(Math.pow(v-d,2)+Math.pow(g-f,2)),E="",T=0,C=0;C<_;++C){u=c?_-C-1:C;var R=o.charAt(u),I=r(E=c?R+E:E+R)-T;T+=I;for(var w=s+I/2;i<e-n&&y+m<w;)d=v,f=g,v=t[i+=n],g=t[i+1],y+=m,m=Math.sqrt(Math.pow(v-d,2)+Math.pow(g-f,2));var M=w-y,O=Math.atan2(g-f,v-d);if(c&&(O+=O>0?-Math.PI:Math.PI),void 0!==p){var b=O-p;if(b+=b>Math.PI?-2*Math.PI:b<-Math.PI?2*Math.PI:0,Math.abs(b)>a)return null}var P=M/m,A=ci(d,v,P),L=ci(f,g,P);p==O?(c&&(h[0]=A,h[1]=L,h[2]=I/2),h[4]=E):(T=I,h=[A,L,I/2,O,E=R],c?l.unshift(h):l.push(h),p=O),s+=I}return l}var os={BEGIN_GEOMETRY:0,BEGIN_PATH:1,CIRCLE:2,CLOSE_PATH:3,CUSTOM:4,DRAW_CHARS:5,DRAW_IMAGE:6,END_GEOMETRY:7,FILL:8,MOVE_TO_LINE_TO:9,SET_FILL_STYLE:10,SET_STROKE_STYLE:11,STROKE:12},rs=[os.FILL],ss=[os.STROKE],as=[os.BEGIN_PATH],hs=[os.CLOSE_PATH],us=os,ps=[is.POLYGON,is.CIRCLE,is.LINE_STRING,is.IMAGE,is.TEXT,is.DEFAULT],ls={left:0,end:0,center:.5,right:1,start:1,top:0,middle:.5,hanging:.2,alphabetic:.8,ideographic:.8,bottom:1},cs=[1/0,1/0,-1/0,-1/0],_s=[1,0,0,1,0,0],ds=function(t){function i(i,e,n,o,r,s){t.call(this),this.declutterTree=s,this.tolerance=i,this.maxExtent=e,this.overlaps=r,this.pixelRatio=o,this.maxLineWidth=0,this.resolution=n,this.alignFill_,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_=null,this.bufferedMaxExtent_=null,this.instructions=[],this.coordinates=[],this.coordinateCache_={},this.renderedTransform_=[1,0,0,1,0,0],this.hitDetectionInstructions=[],this.pixelCoordinates_=null,this.state={},this.viewRotation_=0}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.replayTextBackground_=function(t,i,e,n,o,r,s){t.beginPath(),t.moveTo.apply(t,i),t.lineTo.apply(t,e),t.lineTo.apply(t,n),t.lineTo.apply(t,o),t.lineTo.apply(t,i),r&&(this.alignFill_=r[2],this.fill_(t)),s&&(this.setStrokeStyle_(t,s),t.stroke())},i.prototype.replayImage_=function(t,i,e,n,o,r,s,a,h,u,p,l,c,_,d,f,v,g){var y=v||g;i-=o*=c,e-=r*=c;var m,E,T,C,R=d+u>n.width?n.width-u:d,I=a+p>n.height?n.height-p:a,w=f[3]+R*c+f[1],M=f[0]+I*c+f[2],O=i-f[3],b=e-f[0];(y||0!==l)&&(m=[O,b],E=[O+w,b],T=[O+w,b+M],C=[O,b+M]);var P=null;if(0!==l){var A=i+o,L=e+r;P=sn(_s,A,L,1,1,l,-A,-L),Wi(cs),Qi(cs,nn(_s,m)),Qi(cs,nn(_s,E)),Qi(cs,nn(_s,T)),Qi(cs,nn(_s,C))}else Hi(O,b,O+w,b+M,cs);var D=t.canvas,F=g?g[2]*c/2:0,N=cs[0]-F<=D.width&&cs[2]+F>=0&&cs[1]-F<=D.height&&cs[3]+F>=0;if(_&&(i=Math.round(i),e=Math.round(e)),s){if(!N&&1==s[4])return;qi(s,cs);var G=N?[t,P?P.slice(0):null,h,n,u,p,R,I,i,e,c]:null;G&&y&&G.push(v,g,m,E,T,C),s.push(G)}else N&&(y&&this.replayTextBackground_(t,m,E,T,C,v,g),wr(t,P,h,n,u,p,R,I,i,e,c))},i.prototype.applyPixelRatio=function(t){var i=this.pixelRatio;return 1==i?t:t.map(function(t){return t*i})},i.prototype.appendFlatCoordinates=function(t,i,e,n,o,r){var s=this.coordinates.length,a=this.getBufferedMaxExtent();r&&(i+=n);var h,u,p,l=[t[i],t[i+1]],c=[NaN,NaN],_=!0;for(h=i+n;h<e;h+=n)c[0]=t[h],c[1]=t[h+1],(p=Bi(a,c))!==u?(_&&(this.coordinates[s++]=l[0],this.coordinates[s++]=l[1]),this.coordinates[s++]=c[0],this.coordinates[s++]=c[1],_=!1):p===Gi.INTERSECTING?(this.coordinates[s++]=c[0],this.coordinates[s++]=c[1],_=!1):_=!0,l[0]=c[0],l[1]=c[1],u=p;return(o&&_||h===i+n)&&(this.coordinates[s++]=l[0],this.coordinates[s++]=l[1]),s},i.prototype.drawCustomCoordinates_=function(t,i,e,n,o){for(var r=0,s=e.length;r<s;++r){var a=e[r],h=this.appendFlatCoordinates(t,i,a,n,!1,!1);o.push(h),i=a}return i},i.prototype.drawCustom=function(t,i,e){this.beginGeometry(t,i);var n,o,r,s,a,h=t.getType(),u=t.getStride(),p=this.coordinates.length;if(h==ce.MULTI_POLYGON){n=(t=t).getOrientedFlatCoordinates(),s=[];var l=t.getEndss();a=0;for(var c=0,_=l.length;c<_;++c){var d=[];a=this.drawCustomCoordinates_(n,a,l[c],u,d),s.push(d)}this.instructions.push([us.CUSTOM,p,s,t,e,Tn])}else h==ce.POLYGON||h==ce.MULTI_LINE_STRING?(r=[],n=h==ce.POLYGON?t.getOrientedFlatCoordinates():t.getFlatCoordinates(),a=this.drawCustomCoordinates_(n,0,t.getEnds(),u,r),this.instructions.push([us.CUSTOM,p,r,t,e,En])):h==ce.LINE_STRING||h==ce.MULTI_POINT?(n=t.getFlatCoordinates(),o=this.appendFlatCoordinates(n,0,n.length,u,!1,!1),this.instructions.push([us.CUSTOM,p,o,t,e,mn])):h==ce.POINT&&(n=t.getFlatCoordinates(),this.coordinates.push(n[0],n[1]),o=this.coordinates.length,this.instructions.push([us.CUSTOM,p,o,t,e]));this.endGeometry(t,i)},i.prototype.beginGeometry=function(t,i){this.beginGeometryInstruction1_=[us.BEGIN_GEOMETRY,i,0],this.instructions.push(this.beginGeometryInstruction1_),this.beginGeometryInstruction2_=[us.BEGIN_GEOMETRY,i,0],this.hitDetectionInstructions.push(this.beginGeometryInstruction2_)},i.prototype.finish=function(){},i.prototype.fill_=function(t){if(this.alignFill_){var i=nn(this.renderedTransform_,[0,0]),e=512*this.pixelRatio;t.translate(i[0]%e,i[1]%e),t.rotate(this.viewRotation_)}t.fill(),this.alignFill_&&t.setTransform.apply(t,Ir)},i.prototype.setStrokeStyle_=function(t,i){t.strokeStyle=i[1],t.lineWidth=i[2],t.lineCap=i[3],t.lineJoin=i[4],t.miterLimit=i[5],X&&(t.lineDashOffset=i[7],t.setLineDash(i[6]))},i.prototype.renderDeclutter_=function(t,i){if(t&&t.length>5){var e=t[4];if(1==e||e==t.length-5){var n={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3],value:i};if(!this.declutterTree.collides(n)){this.declutterTree.insert(n);for(var o=5,r=t.length;o<r;++o){var s=t[o];s&&(s.length>11&&this.replayTextBackground_(s[0],s[13],s[14],s[15],s[16],s[11],s[12]),wr.apply(void 0,s))}}t.length=5,Wi(t)}}},i.prototype.replay_=function(t,i,e,n,o,s,a){var h;this.pixelCoordinates_&&Zt(i,this.renderedTransform_)?h=this.pixelCoordinates_:(this.pixelCoordinates_||(this.pixelCoordinates_=[]),h=de(this.coordinates,0,this.coordinates.length,2,i,this.pixelCoordinates_),en(this.renderedTransform_,i));for(var u,p,l,_,d,f,v,g,y,m,E,T,C=!c(e),R=0,I=n.length,w=0,M=0,O=0,b=null,P=null,A=this.coordinateCache_,L=this.viewRotation_,D={context:t,pixelRatio:this.pixelRatio,resolution:this.resolution,rotation:L},F=this.instructions!=n||this.overlaps?0:200;R<I;){var N=n[R];switch(N[0]){case us.BEGIN_GEOMETRY:m=N[1],C&&e[r(m)]||!m.getGeometry()?R=N[2]:void 0===a||pe(a,m.getGeometry().getExtent())?++R:R=N[2]+1;break;case us.BEGIN_PATH:M>F&&(this.fill_(t),M=0),O>F&&(t.stroke(),O=0),M||O||(t.beginPath(),_=d=NaN),++R;break;case us.CIRCLE:var G=h[w=N[1]],K=h[w+1],Z=h[w+2]-G,z=h[w+3]-K,U=Math.sqrt(Z*Z+z*z);t.moveTo(G+U,K),t.arc(G,K,U,0,2*Math.PI,!0),++R;break;case us.CLOSE_PATH:t.closePath(),++R;break;case us.CUSTOM:w=N[1],u=N[2];var x=N[3],j=N[4],V=6==N.length?N[5]:void 0;D.geometry=x,D.feature=m,R in A||(A[R]=[]);var B=A[R];V?V(h,w,u,2,B):(B[0]=h[w],B[1]=h[w+1],B.length=2),j(B,D),++R;break;case us.DRAW_IMAGE:w=N[1],u=N[2],y=N[3],p=N[4],l=N[5],g=s?null:N[6];var Y=N[7],H=N[8],W=N[9],X=N[10],q=N[11],Q=N[12],$=N[13],J=N[14],k=void 0,S=void 0,tt=void 0;for(N.length>16?(k=N[15],S=N[16],tt=N[17]):(k=cr,S=tt=!1),q&&(Q+=L);w<u;w+=2)this.replayImage_(t,h[w],h[w+1],y,p,l,g,Y,H,W,X,Q,$,o,J,k,S?b:null,tt?P:null);this.renderDeclutter_(g,m),++R;break;case us.DRAW_CHARS:var it=N[1],et=N[2],nt=N[3];g=s?null:N[4];var ot=N[5],rt=N[6],st=N[7],at=N[8],ht=N[9],ut=N[10],pt=N[11],lt=N[12],ct=N[13],_t=N[14],dt=es(h,it,et,2),ft=at(lt);if(ot||ft<=dt){var vt=this.textStates[ct].textAlign,gt=ns(h,it,et,2,lt,at,(dt-ft)*ls[vt],st);if(gt){var yt=void 0,mt=void 0,Et=void 0,Tt=void 0,Ct=void 0;if(ut)for(yt=0,mt=gt.length;yt<mt;++yt)Et=(Ct=gt[yt])[4],Tt=this.getImage(Et,ct,"",ut),p=Ct[2]+pt,l=nt*Tt.height+2*(.5-nt)*pt-ht,this.replayImage_(t,Ct[0],Ct[1],Tt,p,l,g,Tt.height,1,0,0,Ct[3],_t,!1,Tt.width,cr,null,null);if(rt)for(yt=0,mt=gt.length;yt<mt;++yt)Et=(Ct=gt[yt])[4],Tt=this.getImage(Et,ct,rt,""),p=Ct[2],l=nt*Tt.height-ht,this.replayImage_(t,Ct[0],Ct[1],Tt,p,l,g,Tt.height,1,0,0,Ct[3],_t,!1,Tt.width,cr,null,null)}}this.renderDeclutter_(g,m),++R;break;case us.END_GEOMETRY:if(void 0!==s){var Rt=s(m=N[1]);if(Rt)return Rt}++R;break;case us.FILL:F?M++:this.fill_(t),++R;break;case us.MOVE_TO_LINE_TO:for(w=N[1],u=N[2],E=h[w],v=(T=h[w+1])+.5|0,(f=E+.5|0)===_&&v===d||(t.moveTo(E,T),_=f,d=v),w+=2;w<u;w+=2)f=(E=h[w])+.5|0,v=(T=h[w+1])+.5|0,w!=u-2&&f===_&&v===d||(t.lineTo(E,T),_=f,d=v);++R;break;case us.SET_FILL_STYLE:b=N,this.alignFill_=N[2],M&&(this.fill_(t),M=0,O&&(t.stroke(),O=0)),t.fillStyle=N[1],++R;break;case us.SET_STROKE_STYLE:P=N,O&&(t.stroke(),O=0),this.setStrokeStyle_(t,N),++R;break;case us.STROKE:F?O++:t.stroke(),++R;break;default:++R}}M&&this.fill_(t),O&&t.stroke()},i.prototype.replay=function(t,i,e,n,o){this.viewRotation_=e,this.replay_(t,i,n,this.instructions,o,void 0,void 0)},i.prototype.replayHitDetection=function(t,i,e,n,o,r){return this.viewRotation_=e,this.replay_(t,i,n,this.hitDetectionInstructions,!0,o,r)},i.prototype.reverseHitDetectionInstructions=function(){var t,i=this.hitDetectionInstructions;i.reverse();var e,n,o=i.length,r=-1;for(t=0;t<o;++t)(n=(e=i[t])[0])==us.END_GEOMETRY?r=t:n==us.BEGIN_GEOMETRY&&(e[2]=t,Gt(this.hitDetectionInstructions,r,t),r=-1)},i.prototype.setFillStrokeStyle=function(t,i){var e=this.state;if(t){var n=t.getColor();e.fillStyle=Lr(n||ur)}else e.fillStyle=void 0;if(i){var o=i.getColor();e.strokeStyle=Lr(o||lr);var r=i.getLineCap();e.lineCap=void 0!==r?r:"round";var s=i.getLineDash();e.lineDash=s?s.slice():pr;var a=i.getLineDashOffset();e.lineDashOffset=a||0;var h=i.getLineJoin();e.lineJoin=void 0!==h?h:"round";var u=i.getWidth();e.lineWidth=void 0!==u?u:1;var p=i.getMiterLimit();e.miterLimit=void 0!==p?p:10,e.lineWidth>this.maxLineWidth&&(this.maxLineWidth=e.lineWidth,this.bufferedMaxExtent_=null)}else e.strokeStyle=void 0,e.lineCap=void 0,e.lineDash=null,e.lineDashOffset=void 0,e.lineJoin=void 0,e.lineWidth=void 0,e.miterLimit=void 0},i.prototype.createFill=function(t,i){var e=t.fillStyle,n=[us.SET_FILL_STYLE,e];return"string"!=typeof e&&n.push(!0),n},i.prototype.applyStroke=function(t){this.instructions.push(this.createStroke(t))},i.prototype.createStroke=function(t){return[us.SET_STROKE_STYLE,t.strokeStyle,t.lineWidth*this.pixelRatio,t.lineCap,t.lineJoin,t.miterLimit,this.applyPixelRatio(t.lineDash),t.lineDashOffset*this.pixelRatio]},i.prototype.updateFillStyle=function(t,i,e){var n=t.fillStyle;"string"==typeof n&&t.currentFillStyle==n||(void 0!==n&&this.instructions.push(i.call(this,t,e)),t.currentFillStyle=n)},i.prototype.updateStrokeStyle=function(t,i){var e=t.strokeStyle,n=t.lineCap,o=t.lineDash,r=t.lineDashOffset,s=t.lineJoin,a=t.lineWidth,h=t.miterLimit;(t.currentStrokeStyle!=e||t.currentLineCap!=n||o!=t.currentLineDash&&!Zt(t.currentLineDash,o)||t.currentLineDashOffset!=r||t.currentLineJoin!=s||t.currentLineWidth!=a||t.currentMiterLimit!=h)&&(void 0!==e&&i.call(this,t),t.currentStrokeStyle=e,t.currentLineCap=n,t.currentLineDash=o,t.currentLineDashOffset=r,t.currentLineJoin=s,t.currentLineWidth=a,t.currentMiterLimit=h)},i.prototype.endGeometry=function(t,i){this.beginGeometryInstruction1_[2]=this.instructions.length,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_[2]=this.hitDetectionInstructions.length,this.beginGeometryInstruction2_=null;var e=[us.END_GEOMETRY,i];this.instructions.push(e),this.hitDetectionInstructions.push(e)},i.prototype.getBufferedMaxExtent=function(){if(!this.bufferedMaxExtent_&&(this.bufferedMaxExtent_=zi(this.maxExtent),this.maxLineWidth>0)){var t=this.resolution*(this.maxLineWidth+1)/2;Zi(this.bufferedMaxExtent_,t,this.bufferedMaxExtent_)}return this.bufferedMaxExtent_},i}(Fr),fs=function(t){function i(i,e,n,o,r,s){t.call(this,i,e,n,o,r,s),this.declutterGroup_=null,this.hitDetectionImage_=null,this.image_=null,this.anchorX_=void 0,this.anchorY_=void 0,this.height_=void 0,this.opacity_=void 0,this.originX_=void 0,this.originY_=void 0,this.rotateWithView_=void 0,this.rotation_=void 0,this.scale_=void 0,this.width_=void 0}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.drawCoordinates_=function(t,i,e,n){return this.appendFlatCoordinates(t,i,e,n,!1,!1)},i.prototype.drawPoint=function(t,i){if(this.image_){this.beginGeometry(t,i);var e=t.getFlatCoordinates(),n=t.getStride(),o=this.coordinates.length,r=this.drawCoordinates_(e,0,e.length,n);this.instructions.push([us.DRAW_IMAGE,o,r,this.image_,this.anchorX_,this.anchorY_,this.declutterGroup_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_*this.pixelRatio,this.width_]),this.hitDetectionInstructions.push([us.DRAW_IMAGE,o,r,this.hitDetectionImage_,this.anchorX_,this.anchorY_,this.declutterGroup_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_,this.width_]),this.endGeometry(t,i)}},i.prototype.drawMultiPoint=function(t,i){if(this.image_){this.beginGeometry(t,i);var e=t.getFlatCoordinates(),n=t.getStride(),o=this.coordinates.length,r=this.drawCoordinates_(e,0,e.length,n);this.instructions.push([us.DRAW_IMAGE,o,r,this.image_,this.anchorX_,this.anchorY_,this.declutterGroup_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_*this.pixelRatio,this.width_]),this.hitDetectionInstructions.push([us.DRAW_IMAGE,o,r,this.hitDetectionImage_,this.anchorX_,this.anchorY_,this.declutterGroup_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_,this.width_]),this.endGeometry(t,i)}},i.prototype.finish=function(){this.reverseHitDetectionInstructions(),this.anchorX_=void 0,this.anchorY_=void 0,this.hitDetectionImage_=null,this.image_=null,this.height_=void 0,this.scale_=void 0,this.opacity_=void 0,this.originX_=void 0,this.originY_=void 0,this.rotateWithView_=void 0,this.rotation_=void 0,this.width_=void 0},i.prototype.setImageStyle=function(t,i){var e=t.getAnchor(),n=t.getSize(),o=t.getHitDetectionImage(1),r=t.getImage(1),s=t.getOrigin();this.anchorX_=e[0],this.anchorY_=e[1],this.declutterGroup_=i,this.hitDetectionImage_=o,this.image_=r,this.height_=n[1],this.opacity_=t.getOpacity(),this.originX_=s[0],this.originY_=s[1],this.rotateWithView_=t.getRotateWithView(),this.rotation_=t.getRotation(),this.scale_=t.getScale(),this.width_=n[0]},i}(ds),vs=function(t){function i(i,e,n,o,r,s){t.call(this,i,e,n,o,r,s)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.drawFlatCoordinates_=function(t,i,e,n){var o=this.coordinates.length,r=this.appendFlatCoordinates(t,i,e,n,!1,!1),s=[us.MOVE_TO_LINE_TO,o,r];return this.instructions.push(s),this.hitDetectionInstructions.push(s),e},i.prototype.drawLineString=function(t,i){var e=this.state,n=e.strokeStyle,o=e.lineWidth;if(void 0!==n&&void 0!==o){this.updateStrokeStyle(e,this.applyStroke),this.beginGeometry(t,i),this.hitDetectionInstructions.push([us.SET_STROKE_STYLE,e.strokeStyle,e.lineWidth,e.lineCap,e.lineJoin,e.miterLimit,e.lineDash,e.lineDashOffset],as);var r=t.getFlatCoordinates(),s=t.getStride();this.drawFlatCoordinates_(r,0,r.length,s),this.hitDetectionInstructions.push(ss),this.endGeometry(t,i)}},i.prototype.drawMultiLineString=function(t,i){var e=this.state,n=e.strokeStyle,o=e.lineWidth;if(void 0!==n&&void 0!==o){this.updateStrokeStyle(e,this.applyStroke),this.beginGeometry(t,i),this.hitDetectionInstructions.push([us.SET_STROKE_STYLE,e.strokeStyle,e.lineWidth,e.lineCap,e.lineJoin,e.miterLimit,e.lineDash,e.lineDashOffset],as);for(var r=t.getEnds(),s=t.getFlatCoordinates(),a=t.getStride(),h=0,u=0,p=r.length;u<p;++u)h=this.drawFlatCoordinates_(s,h,r[u],a);this.hitDetectionInstructions.push(ss),this.endGeometry(t,i)}},i.prototype.finish=function(){var t=this.state;null!=t.lastStroke&&t.lastStroke!=this.coordinates.length&&this.instructions.push(ss),this.reverseHitDetectionInstructions(),this.state=null},i.prototype.applyStroke=function(i){null!=i.lastStroke&&i.lastStroke!=this.coordinates.length&&(this.instructions.push(ss),i.lastStroke=this.coordinates.length),i.lastStroke=0,t.prototype.applyStroke.call(this,i),this.instructions.push(as)},i}(ds),gs=function(t){function i(i,e,n,o,r,s){t.call(this,i,e,n,o,r,s)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.drawFlatCoordinatess_=function(t,i,e,n){var o=this.state,r=void 0!==o.fillStyle,s=null!=o.strokeStyle,a=e.length;this.instructions.push(as),this.hitDetectionInstructions.push(as);for(var h=0;h<a;++h){var u=e[h],p=this.coordinates.length,l=this.appendFlatCoordinates(t,i,u,n,!0,!s),c=[us.MOVE_TO_LINE_TO,p,l];this.instructions.push(c),this.hitDetectionInstructions.push(c),s&&(this.instructions.push(hs),this.hitDetectionInstructions.push(hs)),i=u}return r&&(this.instructions.push(rs),this.hitDetectionInstructions.push(rs)),s&&(this.instructions.push(ss),this.hitDetectionInstructions.push(ss)),i},i.prototype.drawCircle=function(t,i){var e=this.state,n=e.fillStyle,o=e.strokeStyle;if(void 0!==n||void 0!==o){this.setFillStrokeStyles_(t),this.beginGeometry(t,i),void 0!==e.fillStyle&&this.hitDetectionInstructions.push([us.SET_FILL_STYLE,br(ur)]),void 0!==e.strokeStyle&&this.hitDetectionInstructions.push([us.SET_STROKE_STYLE,e.strokeStyle,e.lineWidth,e.lineCap,e.lineJoin,e.miterLimit,e.lineDash,e.lineDashOffset]);var r=t.getFlatCoordinates(),s=t.getStride(),a=this.coordinates.length;this.appendFlatCoordinates(r,0,r.length,s,!1,!1);var h=[us.CIRCLE,a];this.instructions.push(as,h),this.hitDetectionInstructions.push(as,h),this.hitDetectionInstructions.push(rs),void 0!==e.fillStyle&&this.instructions.push(rs),void 0!==e.strokeStyle&&(this.instructions.push(ss),this.hitDetectionInstructions.push(ss)),this.endGeometry(t,i)}},i.prototype.drawPolygon=function(t,i){var e=this.state,n=e.fillStyle,o=e.strokeStyle;if(void 0!==n||void 0!==o){this.setFillStrokeStyles_(t),this.beginGeometry(t,i),void 0!==e.fillStyle&&this.hitDetectionInstructions.push([us.SET_FILL_STYLE,br(ur)]),void 0!==e.strokeStyle&&this.hitDetectionInstructions.push([us.SET_STROKE_STYLE,e.strokeStyle,e.lineWidth,e.lineCap,e.lineJoin,e.miterLimit,e.lineDash,e.lineDashOffset]);var r=t.getEnds(),s=t.getOrientedFlatCoordinates(),a=t.getStride();this.drawFlatCoordinatess_(s,0,r,a),this.endGeometry(t,i)}},i.prototype.drawMultiPolygon=function(t,i){var e=this.state,n=e.fillStyle,o=e.strokeStyle;if(void 0!==n||void 0!==o){this.setFillStrokeStyles_(t),this.beginGeometry(t,i),void 0!==e.fillStyle&&this.hitDetectionInstructions.push([us.SET_FILL_STYLE,br(ur)]),void 0!==e.strokeStyle&&this.hitDetectionInstructions.push([us.SET_STROKE_STYLE,e.strokeStyle,e.lineWidth,e.lineCap,e.lineJoin,e.miterLimit,e.lineDash,e.lineDashOffset]);for(var r=t.getEndss(),s=t.getOrientedFlatCoordinates(),a=t.getStride(),h=0,u=0,p=r.length;u<p;++u)h=this.drawFlatCoordinatess_(s,h,r[u],a);this.endGeometry(t,i)}},i.prototype.finish=function(){this.reverseHitDetectionInstructions(),this.state=null;var t=this.tolerance;if(0!==t)for(var i=this.coordinates,e=0,n=i.length;e<n;++e)i[e]=Rn(i[e],t)},i.prototype.setFillStrokeStyles_=function(t){var i=this.state;void 0!==i.fillStyle&&this.updateFillStyle(i,this.createFill,t),void 0!==i.strokeStyle&&this.updateStrokeStyle(i,this.applyStroke)},i}(ds);function ys(t,i,e,n,o){var r,s,a,h,u,p,l,c,_,d=e,f=e,v=0,g=0,y=e;for(r=e;r<n;r+=o){var m=i[r],E=i[r+1];void 0!==h&&(c=m-h,_=E-u,a=Math.sqrt(c*c+_*_),void 0!==p&&(g+=s,Math.acos((p*c+l*_)/(s*a))>t&&(g>v&&(v=g,d=y,f=r),g=0,y=r-o)),s=a,p=c,l=_),h=m,u=E}return(g+=a)>v?[y,r]:[d,f]}var ms="line";var Es={Circle:gs,Default:ds,Image:fs,LineString:vs,Polygon:gs,Text:function(t){function i(i,e,n,o,r,s){t.call(this,i,e,n,o,r,s),this.declutterGroup_,this.labels_=null,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=void 0,this.textRotation_=0,this.textFillState_=null,this.fillStates={},this.textStrokeState_=null,this.strokeStates={},this.textState_={},this.textStates={},this.textKey_="",this.fillKey_="",this.strokeKey_="",this.widths_={},_r.prune()}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.drawText=function(t,i){var e=this.textFillState_,n=this.textStrokeState_,o=this.textState_;if(""!==this.text_&&o&&(e||n)){var r,s,a=this.coordinates.length,h=t.getType(),u=null,p=2,l=2;if(o.placement===ms){if(!pe(this.getBufferedMaxExtent(),t.getExtent()))return;var c;if(u=t.getFlatCoordinates(),l=t.getStride(),h==ce.LINE_STRING)c=[u.length];else if(h==ce.MULTI_LINE_STRING)c=t.getEnds();else if(h==ce.POLYGON)c=t.getEnds().slice(0,1);else if(h==ce.MULTI_POLYGON){var _=t.getEndss();for(c=[],r=0,s=_.length;r<s;++r)c.push(_[r][0])}this.beginGeometry(t,i);for(var d,f=o.textAlign,v=0,g=0,y=c.length;g<y;++g){if(null==f){var m=ys(o.maxAngle,u,v,c[g],l);v=m[0],d=m[1]}else d=c[g];for(r=v;r<d;r+=l)this.coordinates.push(u[r],u[r+1]);p=this.coordinates.length,v=c[g],this.drawChars_(a,p,this.declutterGroup_),a=p}this.endGeometry(t,i)}else{var E=this.getImage(this.text_,this.textKey_,this.fillKey_,this.strokeKey_),T=E.width/this.pixelRatio;switch(h){case ce.POINT:case ce.MULTI_POINT:p=(u=t.getFlatCoordinates()).length;break;case ce.LINE_STRING:u=t.getFlatMidpoint();break;case ce.CIRCLE:u=t.getCenter();break;case ce.MULTI_LINE_STRING:p=(u=t.getFlatMidpoints()).length;break;case ce.POLYGON:if(u=t.getFlatInteriorPoint(),!o.overflow&&u[2]/this.resolution<T)return;l=3;break;case ce.MULTI_POLYGON:var C=t.getFlatInteriorPoints();for(u=[],r=0,s=C.length;r<s;r+=3)(o.overflow||C[r+2]/this.resolution>=T)&&u.push(C[r],C[r+1]);if(0==(p=u.length))return}p=this.appendFlatCoordinates(u,0,p,l,!1,!1),(o.backgroundFill||o.backgroundStroke)&&(this.setFillStrokeStyle(o.backgroundFill,o.backgroundStroke),o.backgroundFill&&(this.updateFillStyle(this.state,this.createFill,t),this.hitDetectionInstructions.push(this.createFill(this.state,t))),o.backgroundStroke&&(this.updateStrokeStyle(this.state,this.applyStroke),this.hitDetectionInstructions.push(this.createStroke(this.state)))),this.beginGeometry(t,i),this.drawTextImage_(E,a,p),this.endGeometry(t,i)}}},i.prototype.getImage=function(t,i,e,n){var o,r=n+i+t+e+this.pixelRatio;if(!_r.containsKey(r)){var s=n?this.strokeStates[n]||this.textStrokeState_:null,a=e?this.fillStates[e]||this.textFillState_:null,h=this.textStates[i]||this.textState_,u=this.pixelRatio,p=h.scale*u,l=ls[h.textAlign||"center"],c=n&&s.lineWidth?s.lineWidth:0,_=t.split("\n"),d=_.length,f=[],v=function(t,i,e){for(var n=i.length,o=0,r=0;r<n;++r){var s=Cr(t,i[r]);o=Math.max(o,s),e.push(s)}return o}(h.font,_,f),g=Tr(h.font),y=g*d,m=v+c,E=Hn(Math.ceil(m*p),Math.ceil((y+c)*p));o=E.canvas,_r.set(r,o),1!=p&&E.scale(p,p),E.font=h.font,n&&(E.strokeStyle=s.strokeStyle,E.lineWidth=c,E.lineCap=s.lineCap,E.lineJoin=s.lineJoin,E.miterLimit=s.miterLimit,X&&s.lineDash.length&&(E.setLineDash(s.lineDash),E.lineDashOffset=s.lineDashOffset)),e&&(E.fillStyle=a.fillStyle),E.textBaseline="middle",E.textAlign="center";var T,C=.5-l,R=l*o.width/p+C*c;if(n)for(T=0;T<d;++T)E.strokeText(_[T],R+C*f[T],.5*(c+g)+T*g);if(e)for(T=0;T<d;++T)E.fillText(_[T],R+C*f[T],.5*(c+g)+T*g)}return _r.get(r)},i.prototype.drawTextImage_=function(t,i,e){var n=this.textState_,o=this.textStrokeState_,r=this.pixelRatio,s=ls[n.textAlign||"center"],a=ls[n.textBaseline],h=o&&o.lineWidth?o.lineWidth:0,u=s*t.width/r+2*(.5-s)*h,p=a*t.height/r+2*(.5-a)*h;this.instructions.push([us.DRAW_IMAGE,i,e,t,(u-this.textOffsetX_)*r,(p-this.textOffsetY_)*r,this.declutterGroup_,t.height,1,0,0,this.textRotateWithView_,this.textRotation_,1,t.width,n.padding==cr?cr:n.padding.map(function(t){return t*r}),!!n.backgroundFill,!!n.backgroundStroke]),this.hitDetectionInstructions.push([us.DRAW_IMAGE,i,e,t,(u-this.textOffsetX_)*r,(p-this.textOffsetY_)*r,this.declutterGroup_,t.height,1,0,0,this.textRotateWithView_,this.textRotation_,1/r,t.width,n.padding,!!n.backgroundFill,!!n.backgroundStroke])},i.prototype.drawChars_=function(t,i,e){var n=this.textStrokeState_,o=this.textState_,r=this.textFillState_,s=this.strokeKey_;n&&(s in this.strokeStates||(this.strokeStates[s]={strokeStyle:n.strokeStyle,lineCap:n.lineCap,lineDashOffset:n.lineDashOffset,lineWidth:n.lineWidth,lineJoin:n.lineJoin,miterLimit:n.miterLimit,lineDash:n.lineDash}));var a=this.textKey_;this.textKey_ in this.textStates||(this.textStates[this.textKey_]={font:o.font,textAlign:o.textAlign||"center",scale:o.scale});var h=this.fillKey_;r&&(h in this.fillStates||(this.fillStates[h]={fillStyle:r.fillStyle}));var u=this.pixelRatio,p=ls[o.textBaseline],l=this.textOffsetY_*u,c=this.text_,_=o.font,d=o.scale,f=n?n.lineWidth*d/2:0,v=this.widths_[_];v||(this.widths_[_]=v={}),this.instructions.push([us.DRAW_CHARS,t,i,p,e,o.overflow,h,o.maxAngle,function(t){var i=v[t];return i||(i=v[t]=Cr(_,t)),i*d*u},l,s,f*u,c,a,1]),this.hitDetectionInstructions.push([us.DRAW_CHARS,t,i,p,e,o.overflow,h,o.maxAngle,function(t){var i=v[t];return i||(i=v[t]=Cr(_,t)),i*d},l,s,f,c,a,1/u])},i.prototype.setTextStyle=function(t,i){var e,n,o;if(t){this.declutterGroup_=i;var s=t.getFill();s?((n=this.textFillState_)||(n=this.textFillState_={}),n.fillStyle=Lr(s.getColor()||ur)):n=this.textFillState_=null;var a=t.getStroke();if(a){(o=this.textStrokeState_)||(o=this.textStrokeState_={});var h=a.getLineDash(),u=a.getLineDashOffset(),p=a.getWidth(),l=a.getMiterLimit();o.lineCap=a.getLineCap()||"round",o.lineDash=h?h.slice():pr,o.lineDashOffset=void 0===u?0:u,o.lineJoin=a.getLineJoin()||"round",o.lineWidth=void 0===p?1:p,o.miterLimit=void 0===l?10:l,o.strokeStyle=Lr(a.getColor()||lr)}else o=this.textStrokeState_=null;e=this.textState_;var c=t.getFont()||"10px sans-serif";gr(c);var _=t.getScale();e.overflow=t.getOverflow(),e.font=c,e.maxAngle=t.getMaxAngle(),e.placement=t.getPlacement(),e.textAlign=t.getTextAlign(),e.textBaseline=t.getTextBaseline()||"middle",e.backgroundFill=t.getBackgroundFill(),e.backgroundStroke=t.getBackgroundStroke(),e.padding=t.getPadding()||cr,e.scale=void 0===_?1:_;var d=t.getOffsetX(),f=t.getOffsetY(),v=t.getRotateWithView(),g=t.getRotation();this.text_=t.getText()||"",this.textOffsetX_=void 0===d?0:d,this.textOffsetY_=void 0===f?0:f,this.textRotateWithView_=void 0!==v&&v,this.textRotation_=void 0===g?0:g,this.strokeKey_=o?("string"==typeof o.strokeStyle?o.strokeStyle:r(o.strokeStyle))+o.lineCap+o.lineDashOffset+"|"+o.lineWidth+o.lineJoin+o.miterLimit+"["+o.lineDash.join()+"]":"",this.textKey_=e.font+e.scale+(e.textAlign||"?"),this.fillKey_=n?"string"==typeof n.fillStyle?n.fillStyle:"|"+r(n.fillStyle):""}else this.text_=""},i}(ds)},Ts=function(t){function i(i,e,n,o,r,s,a){t.call(this),this.declutterTree_=s,this.declutterGroup_=null,this.tolerance_=i,this.maxExtent_=e,this.overlaps_=r,this.pixelRatio_=o,this.resolution_=n,this.renderBuffer_=a,this.replaysByZIndex_={},this.hitDetectionContext_=Hn(1,1),this.hitDetectionTransform_=[1,0,0,1,0,0]}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.addDeclutter=function(t){var i=null;return this.declutterTree_&&(t?(i=this.declutterGroup_)[4]++:(i=this.declutterGroup_=[1/0,1/0,-1/0,-1/0]).push(1)),i},i.prototype.clip=function(t,i){var e=this.getClipCoords(i);t.beginPath(),t.moveTo(e[0],e[1]),t.lineTo(e[2],e[3]),t.lineTo(e[4],e[5]),t.lineTo(e[6],e[7]),t.clip()},i.prototype.hasReplays=function(t){for(var i in this.replaysByZIndex_)for(var e=this.replaysByZIndex_[i],n=0,o=t.length;n<o;++n)if(t[n]in e)return!0;return!1},i.prototype.finish=function(){for(var t in this.replaysByZIndex_){var i=this.replaysByZIndex_[t];for(var e in i)i[e].finish()}},i.prototype.forEachFeatureAtCoordinate=function(t,i,e,n,o,r,s){var a,h=2*(n=Math.round(n))+1,u=sn(this.hitDetectionTransform_,n+.5,n+.5,1/i,-1/i,-e,-t[0],-t[1]),p=this.hitDetectionContext_;p.canvas.width!==h||p.canvas.height!==h?(p.canvas.width=h,p.canvas.height=h):p.clearRect(0,0,h,h),void 0!==this.renderBuffer_&&(Qi(a=[1/0,1/0,-1/0,-1/0],t),Zi(a,i*(this.renderBuffer_+n),a));var l,c,_=function(t){if(void 0!==Cs[t])return Cs[t];for(var i=2*t+1,e=new Array(i),n=0;n<i;n++)e[n]=new Array(i);var o=t,r=0,s=0;for(;o>=r;)Rs(e,t+o,t+r),Rs(e,t+r,t+o),Rs(e,t-r,t+o),Rs(e,t-o,t+r),Rs(e,t-o,t-r),Rs(e,t-r,t-o),Rs(e,t+r,t-o),Rs(e,t+o,t-r),2*((s+=1+2*++r)-o)+1>0&&(s+=1-2*(o-=1));return Cs[t]=e,e}(n);function d(t){for(var i=p.getImageData(0,0,h,h).data,e=0;e<h;e++)for(var n=0;n<h;n++)if(_[e][n]&&i[4*(n*h+e)+3]>0){var o=void 0;return(!l||c!=is.IMAGE&&c!=is.TEXT||-1!==l.indexOf(t))&&(o=r(t)),o||void p.clearRect(0,0,h,h)}}this.declutterTree_&&(l=this.declutterTree_.all().map(function(t){return t.value}));var f,v,g,y,m,E=Object.keys(this.replaysByZIndex_).map(Number);for(E.sort(Ft),f=E.length-1;f>=0;--f){var T=E[f].toString();for(g=this.replaysByZIndex_[T],v=ps.length-1;v>=0;--v)if(void 0!==(y=g[c=ps[v]]))if(!s||c!=is.IMAGE&&c!=is.TEXT){if(m=y.replayHitDetection(p,u,e,o,d,a))return m}else{var C=s[T];C?C.push(y,u.slice(0)):s[T]=[y,u.slice(0)]}}},i.prototype.getClipCoords=function(t){var i=this.maxExtent_,e=i[0],n=i[1],o=i[2],r=i[3],s=[e,n,e,r,o,r,o,n];return de(s,0,8,2,t,s),s},i.prototype.getReplay=function(t,i){var e=void 0!==t?t.toString():"0",n=this.replaysByZIndex_[e];void 0===n&&(n={},this.replaysByZIndex_[e]=n);var o=n[i];void 0===o&&(o=new(0,Es[i])(this.tolerance_,this.maxExtent_,this.resolution_,this.pixelRatio_,this.overlaps_,this.declutterTree_),n[i]=o);return o},i.prototype.getReplays=function(){return this.replaysByZIndex_},i.prototype.isEmpty=function(){return c(this.replaysByZIndex_)},i.prototype.replay=function(t,i,e,n,o,r,s){var a=Object.keys(this.replaysByZIndex_).map(Number);a.sort(Ft),t.save(),this.clip(t,i);var h,u,p,l,c,_,d=r||ps;for(h=0,u=a.length;h<u;++h){var f=a[h].toString();for(c=this.replaysByZIndex_[f],p=0,l=d.length;p<l;++p){var v=d[p];if(_=c[v],void 0!==_)if(!s||v!=is.IMAGE&&v!=is.TEXT)_.replay(t,i,e,n,o);else{var g=s[f];g?g.push(_,i.slice(0)):s[f]=[_,i.slice(0)]}}}t.restore()},i}(ts),Cs={0:[[!0]]};function Rs(t,i,e){var n,o=Math.floor(t.length/2);if(i>=o)for(n=o;n<i;n++)t[n][e]=!0;else if(i<o)for(n=i+1;n<o;n++)t[n][e]=!0}var Is=Ts,ws=.5,Ms={Point:function(t,i,e,n){var o=e.getImage();if(o){if(o.getImageState()!=nr.LOADED)return;var r=t.getReplay(e.getZIndex(),is.IMAGE);r.setImageStyle(o,t.addDeclutter(!1)),r.drawPoint(i,n)}var s=e.getText();if(s){var a=t.getReplay(e.getZIndex(),is.TEXT);a.setTextStyle(s,t.addDeclutter(!!o)),a.drawText(i,n)}},LineString:function(t,i,e,n){var o=e.getStroke();if(o){var r=t.getReplay(e.getZIndex(),is.LINE_STRING);r.setFillStrokeStyle(null,o),r.drawLineString(i,n)}var s=e.getText();if(s){var a=t.getReplay(e.getZIndex(),is.TEXT);a.setTextStyle(s,t.addDeclutter(!1)),a.drawText(i,n)}},Polygon:function(t,i,e,n){var o=e.getFill(),r=e.getStroke();if(o||r){var s=t.getReplay(e.getZIndex(),is.POLYGON);s.setFillStrokeStyle(o,r),s.drawPolygon(i,n)}var a=e.getText();if(a){var h=t.getReplay(e.getZIndex(),is.TEXT);h.setTextStyle(a,t.addDeclutter(!1)),h.drawText(i,n)}},MultiPoint:function(t,i,e,n){var o=e.getImage();if(o){if(o.getImageState()!=nr.LOADED)return;var r=t.getReplay(e.getZIndex(),is.IMAGE);r.setImageStyle(o,t.addDeclutter(!1)),r.drawMultiPoint(i,n)}var s=e.getText();if(s){var a=t.getReplay(e.getZIndex(),is.TEXT);a.setTextStyle(s,t.addDeclutter(!!o)),a.drawText(i,n)}},MultiLineString:function(t,i,e,n){var o=e.getStroke();if(o){var r=t.getReplay(e.getZIndex(),is.LINE_STRING);r.setFillStrokeStyle(null,o),r.drawMultiLineString(i,n)}var s=e.getText();if(s){var a=t.getReplay(e.getZIndex(),is.TEXT);a.setTextStyle(s,t.addDeclutter(!1)),a.drawText(i,n)}},MultiPolygon:function(t,i,e,n){var o=e.getFill(),r=e.getStroke();if(r||o){var s=t.getReplay(e.getZIndex(),is.POLYGON);s.setFillStrokeStyle(o,r),s.drawMultiPolygon(i,n)}var a=e.getText();if(a){var h=t.getReplay(e.getZIndex(),is.TEXT);h.setTextStyle(a,t.addDeclutter(!1)),h.drawText(i,n)}},GeometryCollection:function(t,i,e,n){var o,r,s=i.getGeometriesArray();for(o=0,r=s.length;o<r;++o){var a=Ms[s[o].getType()];a(t,s[o],e,n)}},Circle:function(t,i,e,n){var o=e.getFill(),r=e.getStroke();if(o||r){var s=t.getReplay(e.getZIndex(),is.CIRCLE);s.setFillStrokeStyle(o,r),s.drawCircle(i,n)}var a=e.getText();if(a){var h=t.getReplay(e.getZIndex(),is.TEXT);h.setTextStyle(a,t.addDeclutter(!1)),h.drawText(i,n)}}};function Os(t,i){return parseInt(r(t),10)-parseInt(r(i),10)}function bs(t,i){var e=Ps(t,i);return e*e}function Ps(t,i){return ws*t/i}function As(t,i,e,n,o,r){var s=!1,a=e.getImage();if(a){var h=a.getImageState();h==nr.LOADED||h==nr.ERROR?a.unlistenImageChange(o,r):(h==nr.IDLE&&a.load(),h=a.getImageState(),a.listenImageChange(o,r),s=!0)}return function(t,i,e,n){var o=e.getGeometryFunction()(i);if(!o)return;var r=o.getSimplifiedGeometry(n);if(e.getRenderer())!function t(i,e,n,o){if(e.getType()==ce.GEOMETRY_COLLECTION){for(var r=e.getGeometries(),s=0,a=r.length;s<a;++s)t(i,r[s],n,o);return}var h=i.getReplay(n.getZIndex(),is.DEFAULT);h.drawCustom(e,o,n.getRenderer())}(t,r,e,i);else{var s=Ms[r.getType()];s(t,r,e,i)}}(t,i,e,n),s}var Ls=function(t){function i(i){t.call(this,i),this.declutterTree_=i.getDeclutter()?kr()(9,void 0):null,this.dirty_=!1,this.renderedRevision_=-1,this.renderedResolution_=NaN,this.renderedExtent_=[1/0,1/0,-1/0,-1/0],this.renderedRenderOrder_=null,this.replayGroup_=null,this.replayGroupChanged=!0,this.context=Hn(),g(_r,A.CLEAR,this.handleFontsChanged_,this)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.disposeInternal=function(){m(_r,A.CLEAR,this.handleFontsChanged_,this),t.prototype.disposeInternal.call(this)},i.prototype.compose=function(t,i,e){var n=i.extent,o=i.pixelRatio,r=e.managed?i.skippedFeatureUids:{},s=i.viewState,a=s.projection,h=s.rotation,u=a.getExtent(),p=this.getLayer().getSource(),l=this.getTransform(i,0),c=e.extent,_=void 0!==c;_&&this.clip(t,i,c);var d=this.replayGroup_;if(d&&!d.isEmpty()){this.declutterTree_&&this.declutterTree_.clear();var f,v=this.getLayer(),g=0,y=0,m=1!==e.opacity,E=v.hasListener(kt);if(m||E){var T=t.canvas.width,C=t.canvas.height;if(h){var R=Math.round(Math.sqrt(T*T+C*C));g=(R-T)/2,y=(R-C)/2,T=C=R}this.context.canvas.width=T,this.context.canvas.height=C,f=this.context}else f=t;var I=f.globalAlpha;m||(f.globalAlpha=e.opacity),f!=t&&f.translate(g,y);var w=i.viewHints,M=!(w[Ti]||w[Ci]),O=i.size[0]*o,b=i.size[1]*o;if(Rr(f,-h,O/2,b/2),d.replay(f,l,h,r,M),p.getWrapX()&&a.canWrapX()&&!ji(u,n)){for(var P,A=n[0],L=ue(u),D=0;A<u[0];)P=L*--D,l=this.getTransform(i,P),d.replay(f,l,h,r,M),A+=L;for(D=0,A=n[2];A>u[2];)P=L*++D,l=this.getTransform(i,P),d.replay(f,l,h,r,M),A-=L}if(Rr(f,h,O/2,b/2),E&&this.dispatchRenderEvent(f,i,l),f!=t){if(m){var F=t.globalAlpha;t.globalAlpha=e.opacity,t.drawImage(f.canvas,-g,-y),t.globalAlpha=F}else t.drawImage(f.canvas,-g,-y);f.translate(-g,-y)}m||(f.globalAlpha=I)}_&&t.restore()},i.prototype.composeFrame=function(t,i,e){var n=this.getTransform(t,0);this.preCompose(e,t,n),this.compose(e,t,i),this.postCompose(e,t,i,n)},i.prototype.forEachFeatureAtCoordinate=function(t,i,e,n,o){if(this.replayGroup_){var s=i.viewState.resolution,a=i.viewState.rotation,h=this.getLayer(),u={};return this.replayGroup_.forEachFeatureAtCoordinate(t,s,a,e,{},function(t){var i=r(t);if(!(i in u))return u[i]=!0,n.call(o,t,h)},null)}},i.prototype.handleFontsChanged_=function(t){var i=this.getLayer();i.getVisible()&&this.replayGroup_&&i.changed()},i.prototype.handleStyleImageChange_=function(t){this.renderIfReadyAndVisible()},i.prototype.prepareFrame=function(t,i){var e=this.getLayer(),n=e.getSource(),o=t.viewHints[Ti],r=t.viewHints[Ci],s=e.getUpdateWhileAnimating(),a=e.getUpdateWhileInteracting();if(!this.dirty_&&!s&&o||!a&&r)return!0;var h=t.extent,u=t.viewState,p=u.projection,l=u.resolution,c=t.pixelRatio,_=e.getRevision(),d=e.getRenderBuffer(),f=e.getRenderOrder();void 0===f&&(f=Os);var v=Zi(h,d*l),g=u.projection.getExtent();if(n.getWrapX()&&u.projection.canWrapX()&&!ji(g,t.extent)){var y=ue(g),m=Math.max(ue(v)/2,y);v[0]=g[0]-m,v[2]=g[2]+m}if(!this.dirty_&&this.renderedResolution_==l&&this.renderedRevision_==_&&this.renderedRenderOrder_==f&&ji(this.renderedExtent_,v))return this.replayGroupChanged=!1,!0;this.replayGroup_=null,this.dirty_=!1;var E=new Is(Ps(l,c),v,l,c,n.getOverlaps(),this.declutterTree_,e.getRenderBuffer());n.loadFeatures(v,l,p);var T=function(t){var i,n=t.getStyleFunction()||e.getStyleFunction();if(n&&(i=n(t,l)),i){var o=this.renderFeature(t,l,c,i,E);this.dirty_=this.dirty_||o}}.bind(this);if(f){var C=[];n.forEachFeatureInExtent(v,function(t){C.push(t)}),C.sort(f);for(var R=0,I=C.length;R<I;++R)T(C[R])}else n.forEachFeatureInExtent(v,T);return E.finish(),this.renderedResolution_=l,this.renderedRevision_=_,this.renderedRenderOrder_=f,this.renderedExtent_=v,this.replayGroup_=E,this.replayGroupChanged=!0,!0},i.prototype.renderFeature=function(t,i,e,n,o){if(!n)return!1;var r=!1;if(Array.isArray(n))for(var s=0,a=n.length;s<a;++s)r=As(o,t,n[s],bs(i,e),this.handleStyleImageChange_,this)||r;else r=As(o,t,n,bs(i,e),this.handleStyleImageChange_,this);return r},i}(Vr);Ls.handles=function(t){return t.getType()===rr.VECTOR},Ls.create=function(t,i){return new Ls(i)};var Ds=Ls,Fs={IMAGE:"image",HYBRID:"hybrid",VECTOR:"vector"},Ns={image:[is.POLYGON,is.CIRCLE,is.LINE_STRING,is.IMAGE,is.TEXT],hybrid:[is.POLYGON,is.LINE_STRING]},Gs={image:[is.DEFAULT],hybrid:[is.IMAGE,is.TEXT,is.DEFAULT],vector:ps},Ks=function(t){function i(i){t.call(this,i,!0),this.declutterTree_=i.getDeclutter()?kr()(9,void 0):null,this.dirty_=!1,this.renderedLayerRevision_,this.tmpTransform_=[1,0,0,1,0,0];var e=i.getRenderMode();this.zDirection=e===Fs.VECTOR?1:0,e!==Fs.VECTOR&&(this.context=Hn()),g(_r,A.CLEAR,this.handleFontsChanged_,this)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.disposeInternal=function(){m(_r,A.CLEAR,this.handleFontsChanged_,this),t.prototype.disposeInternal.call(this)},i.prototype.getTile=function(i,e,n,o,r){var s=t.prototype.getTile.call(this,i,e,n,o,r);return s.getState()===ti.LOADED&&(this.createReplayGroup_(s,o,r),this.context&&this.renderTileImage_(s,o,r)),s},i.prototype.getTileImage=function(t){var i=this.getLayer();return t.getImage(i)},i.prototype.prepareFrame=function(i,e){var n=this.getLayer().getRevision();return this.renderedLayerRevision_!=n&&(this.renderedTiles.length=0),this.renderedLayerRevision_=n,t.prototype.prepareFrame.call(this,i,e)},i.prototype.createReplayGroup_=function(t,i,e){var n=this,o=this.getLayer(),r=o.getRevision(),s=o.getRenderOrder()||null,a=t.getReplayState(o);if(a.dirty||a.renderedRevision!=r||a.renderedRenderOrder!=s){for(var h=o.getSource(),u=h.getTileGrid(),p=h.getTileGridForProjection(e).getResolution(t.tileCoord[0]),l=t.extent,c=function(r,c){var _=t.getTile(t.tileKeys[r]);if(_.getState()==ti.LOADED){var d=_.tileCoord,f=u.getTileCoordExtent(d),v=se(l,f),g=Xi(f,v)?null:Zi(v,o.getRenderBuffer()*p,n.tmpExtent),y=_.getProjection(),m=!1;Xe(e,y)||(m=!0,_.setProjection(e)),a.dirty=!1;var E=new Is(0,v,p,i,h.getOverlaps(),n.declutterTree_,o.getRenderBuffer()),T=bs(p,i),C=function(t){var i,e=t.getStyleFunction()||o.getStyleFunction();if(e&&(i=e(t,p)),i){var n=this.renderFeature(t,T,i,E);this.dirty_=this.dirty_||n,a.dirty=a.dirty||n}},R=_.getFeatures();s&&s!==a.renderedRenderOrder&&R.sort(s);for(var I=0,w=R.length;I<w;++I){var M=R[I];m&&(y.getUnits()==me.TILE_PIXELS&&(y.setWorldExtent(f),y.setExtent(_.getExtent())),M.getGeometry().transform(y,e)),g&&!pe(g,M.getGeometry().getExtent())||C.call(n,M)}E.finish(),_.setReplayGroup(o,t.tileCoord.toString(),E)}},_=0,d=t.tileKeys.length;_<d;++_)c(_);a.renderedRevision=r,a.renderedRenderOrder=s}},i.prototype.forEachFeatureAtCoordinate=function(t,i,e,n,o){var s=i.viewState.resolution,a=i.viewState.rotation;e=null==e?0:e;var h,u,p,l,c=this.getLayer(),_={},d=this.renderedTiles;for(p=0,l=d.length;p<l;++p){var f=d[p];if(xi(h=Zi(f.extent,e*s,h),t))for(var v=0,g=f.tileKeys.length;v<g;++v){var y=f.getTile(f.tileKeys[v]);if(y.getState()==ti.LOADED){var m=y.getReplayGroup(c,f.tileCoord.toString());u=u||m.forEachFeatureAtCoordinate(t,s,a,e,{},function(t){var i=r(t);if(!(i in _))return _[i]=!0,n.call(o,t,c)},null)}}}return u},i.prototype.getReplayTransform_=function(t,i){var e=this.getLayer().getSource().getTileGrid(),n=t.tileCoord,o=e.getResolution(n[0]),r=i.viewState,s=i.pixelRatio,a=r.resolution/s,h=e.getTileCoordExtent(n,this.tmpExtent),u=r.center,p=ae(h),l=i.size,c=Math.round(s*l[0]/2),_=Math.round(s*l[1]/2);return sn(this.tmpTransform_,c,_,o/a,o/a,r.rotation,(p[0]-u[0])/o,(u[1]-p[1])/o)},i.prototype.handleFontsChanged_=function(t){var i=this.getLayer();i.getVisible()&&void 0!==this.renderedLayerRevision_&&i.changed()},i.prototype.handleStyleImageChange_=function(t){this.renderIfReadyAndVisible()},i.prototype.postCompose=function(i,e,n){var o=this.getLayer(),r=o.getRenderMode();if(r!=Fs.IMAGE){var s,a,h=o.getDeclutter()?{}:null,u=o.getSource(),p=Gs[r],l=e.pixelRatio,c=e.viewState.rotation,_=e.size;c&&Rr(i,-c,s=Math.round(l*_[0]/2),a=Math.round(l*_[1]/2)),h&&this.declutterTree_.clear();for(var d=e.viewHints,f=!(d[Ti]||d[Ci]),v=this.renderedTiles,g=u.getTileGridForProjection(e.viewState.projection),y=[],m=[],E=v.length-1;E>=0;--E){var T=v[E];if(T.getState()!=ti.ABORT)for(var C=T.tileCoord,R=g.getTileCoordExtent(C,this.tmpExtent)[0]-T.extent[0],I=void 0,w=0,M=T.tileKeys.length;w<M;++w){var O=T.getTile(T.tileKeys[w]);if(O.getState()==ti.LOADED){var b=O.getReplayGroup(o,C.toString());if(b&&b.hasReplays(p)){I||(I=this.getTransform(e,R));var P=O.tileCoord[0],A=b.getClipCoords(I);i.save(),i.globalAlpha=n.opacity;for(var L=0,D=y.length;L<D;++L){var F=y[L];P<m[L]&&(i.beginPath(),i.moveTo(A[0],A[1]),i.lineTo(A[2],A[3]),i.lineTo(A[4],A[5]),i.lineTo(A[6],A[7]),i.moveTo(F[6],F[7]),i.lineTo(F[4],F[5]),i.lineTo(F[2],F[3]),i.lineTo(F[0],F[1]),i.clip())}b.replay(i,I,c,{},f,p,h),i.restore(),y.push(A),m.push(P)}}}}h&&function(t,i,e,n){for(var o=Object.keys(t).map(Number).sort(Ft),r={},s=0,a=o.length;s<a;++s)for(var h=t[o[s].toString()],u=0,p=h.length;u<p;){var l=h[u++],c=h[u++];l.replay(i,c,e,r,n)}}(h,i,c,f),c&&Rr(i,c,s,a)}t.prototype.postCompose.call(this,i,e,n)},i.prototype.renderFeature=function(t,i,e,n){if(!e)return!1;var o=!1;if(Array.isArray(e))for(var r=0,s=e.length;r<s;++r)o=As(n,t,e[r],i,this.handleStyleImageChange_,this)||o;else o=As(n,t,e,i,this.handleStyleImageChange_,this);return o},i.prototype.renderTileImage_=function(t,i,e){var n=this.getLayer(),o=t.getReplayState(n),r=n.getRevision(),s=Ns[n.getRenderMode()];if(s&&o.renderedTileRevision!==r){o.renderedTileRevision=r;var a=t.wrappedTileCoord,h=a[0],u=n.getSource(),p=u.getTileGridForProjection(e),l=p.getResolution(h),c=t.getContext(n),_=u.getTilePixelSize(h,i,e);c.canvas.width=_[0],c.canvas.height=_[1];for(var d=p.getTileCoordExtent(a,this.tmpExtent),f=0,v=t.tileKeys.length;f<v;++f){var g=t.getTile(t.tileKeys[f]);if(g.getState()==ti.LOADED){var y=i/l,m=ke(this.tmpTransform_);on(m,y,-y),rn(m,-d[0],-d[3]),g.getReplayGroup(n,t.tileCoord.toString()).replay(c,m,0,{},!0,s)}}}},i}($r);Ks.handles=function(t){return t.getType()===rr.VECTOR_TILE},Ks.create=function(t,i){return new Ks(i)};var Zs=Ks,zs=function(t){function i(i){(i=p({},i)).controls||(i.controls=function(t){var i=t||{},e=new z;return(void 0===i.zoom||i.zoom)&&e.push(new vo(i.zoomOptions)),(void 0===i.rotate||i.rotate)&&e.push(new fo(i.rotateOptions)),(void 0===i.attribution||i.attribution)&&e.push(new co(i.attributionOptions)),e}()),i.interactions||(i.interactions=function(t){var i=t||{},e=new z,n=new yo(-.005,.05,100);return(void 0===i.altShiftDragRotate||i.altShiftDragRotate)&&e.push(new zo),(void 0===i.doubleClickZoom||i.doubleClickZoom)&&e.push(new Mo({delta:i.zoomDelta,duration:i.zoomDuration})),(void 0===i.dragPan||i.dragPan)&&e.push(new Zo({condition:i.onFocusOnly?bo:void 0,kinetic:n})),(void 0===i.pinchRotate||i.pinchRotate)&&e.push(new tr),(void 0===i.pinchZoom||i.pinchZoom)&&e.push(new ir({constrainResolution:i.constrainResolution,duration:i.zoomDuration})),(void 0===i.keyboard||i.keyboard)&&(e.push(new qo),e.push(new $o({delta:i.zoomDelta,duration:i.zoomDuration}))),(void 0===i.mouseWheelZoom||i.mouseWheelZoom)&&e.push(new So({condition:i.onFocusOnly?bo:void 0,constrainResolution:i.constrainResolution,duration:i.zoomDuration})),(void 0===i.shiftDragZoom||i.shiftDragZoom)&&e.push(new Ho({duration:i.zoomDuration})),e}()),t.call(this,i)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.createRenderer=function(){var t=new jr(this);return t.registerLayerRenderers([Hr,$r,Ds,Zs]),t},i}(to),Us=0;function xs(t,i){setTimeout(function(){t(i)},0)}function js(t){return!(t.sourceCenter&&t.targetCenter&&!Oi(t.sourceCenter,t.targetCenter))&&(t.sourceResolution===t.targetResolution&&t.sourceRotation===t.targetRotation)}var Vs=function(t){function i(i){t.call(this);var e=p({},i);this.hints_=[0,0],this.animations_=[],this.updateAnimationKey_,this.updateAnimations_=this.updateAnimations_.bind(this),this.projection_=We(e.projection,"EPSG:3857"),this.applyOptions_(e)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.applyOptions_=function(t){var i={};i[Ri]=void 0!==t.center?t.center:null;var e=function(t){var i,e,n,o=void 0!==t.minZoom?t.minZoom:Us,r=void 0!==t.maxZoom?t.maxZoom:28,s=void 0!==t.zoomFactor?t.zoomFactor:2;if(void 0!==t.resolutions){var a=t.resolutions;e=a[o],n=void 0!==a[r]?a[r]:a[a.length-1],i=fi(a)}else{var h=We(t.projection,"EPSG:3857"),u=h.getExtent(),p=u?Math.max(ue(u),re(u)):360*ye[me.DEGREES]/h.getMetersPerUnit(),l=p/ri/Math.pow(2,Us),c=l/Math.pow(2,28-Us);void 0!==(e=t.maxResolution)?o=0:e=l/Math.pow(s,o),void 0===(n=t.minResolution)&&(n=void 0!==t.maxZoom?void 0!==t.maxResolution?e/Math.pow(s,r):l/Math.pow(s,r):c),r=o+Math.floor(Math.log(e/n)/Math.log(s)),n=e/Math.pow(s,r-o),i=vi(s,e,r-o)}return{constraint:i,maxResolution:e,minResolution:n,minZoom:o,zoomFactor:s}}(t);this.maxResolution_=e.maxResolution,this.minResolution_=e.minResolution,this.zoomFactor_=e.zoomFactor,this.resolutions_=t.resolutions,this.minZoom_=e.minZoom;var n=function(t){return void 0!==t.extent?_i(t.extent):di}(t),o=e.constraint,r=function(t){if(void 0===t.enableRotation||t.enableRotation){var i=t.constrainRotation;return void 0===i||!0===i?Ei():!1===i?yi:"number"==typeof i?mi(i):yi}return gi}(t);this.constraints_={center:n,resolution:o,rotation:r},void 0!==t.resolution?i[Ii]=t.resolution:void 0!==t.zoom&&(i[Ii]=this.constrainResolution(this.maxResolution_,t.zoom-this.minZoom_),this.resolutions_&&(i[Ii]=si(Number(this.getResolution()||i[Ii]),this.minResolution_,this.maxResolution_))),i[wi]=void 0!==t.rotation?t.rotation:0,this.setProperties(i),this.options_=t},i.prototype.getUpdatedOptions_=function(t){var i=p({},this.options_);return void 0!==i.resolution?i.resolution=this.getResolution():i.zoom=this.getZoom(),i.center=this.getCenter(),i.rotation=this.getRotation(),p({},i,t)},i.prototype.animate=function(t){var i,e=arguments,n=arguments.length;if(n>1&&"function"==typeof arguments[n-1]&&(i=arguments[n-1],--n),!this.isDef()){var o=arguments[n-1];return o.center&&this.setCenter(o.center),void 0!==o.zoom&&this.setZoom(o.zoom),void 0!==o.rotation&&this.setRotation(o.rotation),void(i&&xs(i,!0))}for(var r=Date.now(),s=this.getCenter().slice(),a=this.getResolution(),h=this.getRotation(),u=[],p=0;p<n;++p){var l=e[p],c={start:r,complete:!1,anchor:l.anchor,duration:void 0!==l.duration?l.duration:1e3,easing:l.easing||Di};if(l.center&&(c.sourceCenter=s,c.targetCenter=l.center,s=c.targetCenter),void 0!==l.zoom?(c.sourceResolution=a,c.targetResolution=this.constrainResolution(this.maxResolution_,l.zoom-this.minZoom_,0),a=c.targetResolution):l.resolution&&(c.sourceResolution=a,c.targetResolution=l.resolution,a=c.targetResolution),void 0!==l.rotation){c.sourceRotation=h;var _=li(l.rotation-h+Math.PI,2*Math.PI)-Math.PI;c.targetRotation=h+_,h=c.targetRotation}c.callback=i,js(c)?c.complete=!0:r+=c.duration,u.push(c)}this.animations_.push(u),this.setHint(Ti,1),this.updateAnimations_()},i.prototype.getAnimating=function(){return this.hints_[Ti]>0},i.prototype.getInteracting=function(){return this.hints_[Ci]>0},i.prototype.cancelAnimations=function(){this.setHint(Ti,-this.hints_[Ti]);for(var t=0,i=this.animations_.length;t<i;++t){var e=this.animations_[t];e[0].callback&&xs(e[0].callback,!1)}this.animations_.length=0},i.prototype.updateAnimations_=function(){if(void 0!==this.updateAnimationKey_&&(cancelAnimationFrame(this.updateAnimationKey_),this.updateAnimationKey_=void 0),this.getAnimating()){for(var t=Date.now(),i=!1,e=this.animations_.length-1;e>=0;--e){for(var n=this.animations_[e],o=!0,r=0,s=n.length;r<s;++r){var a=n[r];if(!a.complete){var h=t-a.start,u=a.duration>0?h/a.duration:1;u>=1?(a.complete=!0,u=1):o=!1;var p=a.easing(u);if(a.sourceCenter){var l=a.sourceCenter[0],c=a.sourceCenter[1],_=l+p*(a.targetCenter[0]-l),d=c+p*(a.targetCenter[1]-c);this.set(Ri,[_,d])}if(a.sourceResolution&&a.targetResolution){var f=1===p?a.targetResolution:a.sourceResolution+p*(a.targetResolution-a.sourceResolution);a.anchor&&this.set(Ri,this.calculateCenterZoom(f,a.anchor)),this.set(Ii,f)}if(void 0!==a.sourceRotation&&void 0!==a.targetRotation){var v=1===p?li(a.targetRotation+Math.PI,2*Math.PI)-Math.PI:a.sourceRotation+p*(a.targetRotation-a.sourceRotation);a.anchor&&this.set(Ri,this.calculateCenterRotate(v,a.anchor)),this.set(wi,v)}if(i=!0,!a.complete)break}}if(o){this.animations_[e]=null,this.setHint(Ti,-1);var g=n[0].callback;g&&xs(g,!0)}}this.animations_=this.animations_.filter(Boolean),i&&void 0===this.updateAnimationKey_&&(this.updateAnimationKey_=requestAnimationFrame(this.updateAnimations_))}},i.prototype.calculateCenterRotate=function(t,i){var e,n=this.getCenter();return void 0!==n&&(bi(e=[n[0]-i[0],n[1]-i[1]],t-this.getRotation()),Mi(e,i)),e},i.prototype.calculateCenterZoom=function(t,i){var e,n=this.getCenter(),o=this.getResolution();void 0!==n&&void 0!==o&&(e=[i[0]-t*(i[0]-n[0])/o,i[1]-t*(i[1]-n[1])/o]);return e},i.prototype.getSizeFromViewport_=function(){var t=[100,100],i='.ol-viewport[data-view="'+r(this)+'"]',e=document.querySelector(i);if(e){var n=getComputedStyle(e);t[0]=parseInt(n.width,10),t[1]=parseInt(n.height,10)}return t},i.prototype.constrainCenter=function(t){return this.constraints_.center(t)},i.prototype.constrainResolution=function(t,i,e){var n=i||0,o=e||0;return this.constraints_.resolution(t,n,o)},i.prototype.constrainRotation=function(t,i){var e=i||0;return this.constraints_.rotation(t,e)},i.prototype.getCenter=function(){return this.get(Ri)},i.prototype.getConstraints=function(){return this.constraints_},i.prototype.getHints=function(t){return void 0!==t?(t[0]=this.hints_[0],t[1]=this.hints_[1],t):this.hints_.slice()},i.prototype.calculateExtent=function(t){var i=t||this.getSizeFromViewport_(),e=this.getCenter();ii(e,1);var n=this.getResolution();ii(void 0!==n,2);var o=this.getRotation();return ii(void 0!==o,3),oe(e,n,o,i)},i.prototype.getMaxResolution=function(){return this.maxResolution_},i.prototype.getMinResolution=function(){return this.minResolution_},i.prototype.getMaxZoom=function(){return this.getZoomForResolution(this.minResolution_)},i.prototype.setMaxZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({maxZoom:t}))},i.prototype.getMinZoom=function(){return this.getZoomForResolution(this.maxResolution_)},i.prototype.setMinZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({minZoom:t}))},i.prototype.getProjection=function(){return this.projection_},i.prototype.getResolution=function(){return this.get(Ii)},i.prototype.getResolutions=function(){return this.resolutions_},i.prototype.getResolutionForExtent=function(t,i){var e=i||this.getSizeFromViewport_(),n=ue(t)/e[0],o=re(t)/e[1];return Math.max(n,o)},i.prototype.getResolutionForValueFunction=function(t){var i=t||2,e=this.maxResolution_,n=this.minResolution_,o=Math.log(e/n)/Math.log(i);return function(t){return e/Math.pow(i,t*o)}},i.prototype.getRotation=function(){return this.get(wi)},i.prototype.getValueForResolutionFunction=function(t){var i=t||2,e=this.maxResolution_,n=this.minResolution_,o=Math.log(e/n)/Math.log(i);return function(t){return Math.log(e/t)/Math.log(i)/o}},i.prototype.getState=function(t){var i=this.getCenter(),e=this.getProjection(),n=this.getResolution(),o=n/t,r=this.getRotation();return{center:[Math.round(i[0]/o)*o,Math.round(i[1]/o)*o],projection:void 0!==e?e:null,resolution:n,rotation:r,zoom:this.getZoom()}},i.prototype.getZoom=function(){var t,i=this.getResolution();return void 0!==i&&(t=this.getZoomForResolution(i)),t},i.prototype.getZoomForResolution=function(t){var i,e,n=this.minZoom_||0;if(this.resolutions_){var o=Nt(this.resolutions_,t,1);n=o,i=this.resolutions_[o],e=o==this.resolutions_.length-1?2:i/this.resolutions_[o+1]}else i=this.maxResolution_,e=this.zoomFactor_;return n+Math.log(i/t)/Math.log(e)},i.prototype.getResolutionForZoom=function(t){return this.constrainResolution(this.maxResolution_,t-this.minZoom_,0)},i.prototype.fit=function(t,i){var e,n=i||{},o=n.size;o||(o=this.getSizeFromViewport_()),ii(Array.isArray(t)||"function"==typeof t.getSimplifiedGeometry,24),Array.isArray(t)?(ii(!le(t),25),e=xn(t)):t.getType()===ce.CIRCLE?(e=xn(t=t.getExtent())).rotate(this.getRotation(),ee(t)):e=t;var r,s=void 0!==n.padding?n.padding:[0,0,0,0],a=void 0===n.constrainResolution||n.constrainResolution,h=void 0!==n.nearest&&n.nearest;r=void 0!==n.minResolution?n.minResolution:void 0!==n.maxZoom?this.constrainResolution(this.maxResolution_,n.maxZoom-this.minZoom_,0):0;for(var u=e.getFlatCoordinates(),p=this.getRotation(),l=Math.cos(-p),c=Math.sin(-p),_=1/0,d=1/0,f=-1/0,v=-1/0,g=e.getStride(),y=0,m=u.length;y<m;y+=g){var E=u[y]*l-u[y+1]*c,T=u[y]*c+u[y+1]*l;_=Math.min(_,E),d=Math.min(d,T),f=Math.max(f,E),v=Math.max(v,T)}var C=this.getResolutionForExtent([_,d,f,v],[o[0]-s[1]-s[3],o[1]-s[0]-s[2]]);if(C=isNaN(C)?r:Math.max(C,r),a){var R=this.constrainResolution(C,0,0);!h&&R<C&&(R=this.constrainResolution(R,-1,0)),C=R}c=-c;var I=(_+f)/2,M=(d+v)/2,O=[(I+=(s[1]-s[3])/2*C)*l-(M+=(s[0]-s[2])/2*C)*c,M*l+I*c],b=n.callback?n.callback:w;void 0!==n.duration?this.animate({resolution:C,center:O,duration:n.duration,easing:n.easing},b):(this.setResolution(C),this.setCenter(O),xs(b,!0))},i.prototype.centerOn=function(t,i,e){var n=this.getRotation(),o=Math.cos(-n),r=Math.sin(-n),s=t[0]*o-t[1]*r,a=t[1]*o+t[0]*r,h=this.getResolution(),u=(s+=(i[0]/2-e[0])*h)*o-(a+=(e[1]-i[1]/2)*h)*(r=-r),p=a*o+s*r;this.setCenter([u,p])},i.prototype.isDef=function(){return!!this.getCenter()&&void 0!==this.getResolution()},i.prototype.rotate=function(t,i){if(void 0!==i){var e=this.calculateCenterRotate(t,i);this.setCenter(e)}this.setRotation(t)},i.prototype.setCenter=function(t){this.set(Ri,t),this.getAnimating()&&this.cancelAnimations()},i.prototype.setHint=function(t,i){return this.hints_[t]+=i,this.changed(),this.hints_[t]},i.prototype.setResolution=function(t){this.set(Ii,t),this.getAnimating()&&this.cancelAnimations()},i.prototype.setRotation=function(t){this.set(wi,t),this.getAnimating()&&this.cancelAnimations()},i.prototype.setZoom=function(t){this.setResolution(this.getResolutionForZoom(t))},i}(G),Bs=function(t){function i(i,e,n){t.call(this);var o=n||{};this.tileCoord=i,this.state=e,this.interimTile=null,this.key="",this.transition_=void 0===o.transition?250:o.transition,this.transitionStarts_={}}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.changed=function(){this.dispatchEvent(A.CHANGE)},i.prototype.getKey=function(){return this.key+"/"+this.tileCoord},i.prototype.getInterimTile=function(){if(!this.interimTile)return this;var t=this.interimTile;do{if(t.getState()==ti.LOADED)return t;t=t.interimTile}while(t);return this},i.prototype.refreshInterimChain=function(){if(this.interimTile){var t=this.interimTile,i=this;do{if(t.getState()==ti.LOADED){t.interimTile=null;break}t.getState()==ti.LOADING?i=t:t.getState()==ti.IDLE?i.interimTile=t.interimTile:i=t,t=i.interimTile}while(t)}},i.prototype.getTileCoord=function(){return this.tileCoord},i.prototype.getState=function(){return this.state},i.prototype.setState=function(t){this.state=t,this.changed()},i.prototype.load=function(){},i.prototype.getAlpha=function(t,i){if(!this.transition_)return 1;var e=this.transitionStarts_[t];if(e){if(-1===e)return 1}else e=i,this.transitionStarts_[t]=e;var n=i-e+1e3/60;return n>=this.transition_?1:Ai(n/this.transition_)},i.prototype.inTransition=function(t){return!!this.transition_&&-1!==this.transitionStarts_[t]},i.prototype.endTransition=function(t){this.transition_&&(this.transitionStarts_[t]=-1)},i}(P);function Ys(){var t=Hn(1,1);return t.fillStyle="rgba(0,0,0,0)",t.fillRect(0,0,1,1),t.canvas}var Hs=function(t){function i(i,e,n,o,r,s){t.call(this,i,e,s),this.crossOrigin_=o,this.src_=n,this.image_=new Image,null!==o&&(this.image_.crossOrigin=o),this.imageListenerKeys_=null,this.tileLoadFunction_=r}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.disposeInternal=function(){this.state==ti.LOADING&&(this.unlistenImage_(),this.image_=Ys()),this.interimTile&&this.interimTile.dispose(),this.state=ti.ABORT,this.changed(),t.prototype.disposeInternal.call(this)},i.prototype.getImage=function(){return this.image_},i.prototype.getKey=function(){return this.src_},i.prototype.handleImageError_=function(){this.state=ti.ERROR,this.unlistenImage_(),this.image_=Ys(),this.changed()},i.prototype.handleImageLoad_=function(){var t=this.image_;t.naturalWidth&&t.naturalHeight?this.state=ti.LOADED:this.state=ti.EMPTY,this.unlistenImage_(),this.changed()},i.prototype.load=function(){this.state==ti.ERROR&&(this.state=ti.IDLE,this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)),this.state==ti.IDLE&&(this.state=ti.LOADING,this.changed(),this.imageListenerKeys_=[y(this.image_,A.ERROR,this.handleImageError_,this),y(this.image_,A.LOAD,this.handleImageLoad_,this)],this.tileLoadFunction_(this,this.src_))},i.prototype.unlistenImage_=function(){this.imageListenerKeys_.forEach(E),this.imageListenerKeys_=null},i}(Bs);function Ws(t,i,e,n){return void 0!==n?(n[0]=t,n[1]=i,n[2]=e,n):[t,i,e]}function Xs(t,i,e){return t+"/"+i+"/"+e}function qs(t){return Xs(t[0],t[1],t[2])}var Qs=function(t){function i(i){t.call(this,i)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.expireCache=function(t){for(;this.canExpireCache();){var i=this.peekLast(),e=i.tileCoord[0].toString();if(e in t&&t[e].contains(i.tileCoord))break;this.pop().dispose()}},i.prototype.pruneExceptNewestZ=function(){if(0!==this.getCount()){var t=function(t){return t.split("/").map(Number)}(this.peekFirstKey())[0];this.forEach(function(i){i.tileCoord[0]!==t&&(this.remove(qs(i.tileCoord)),i.dispose())},this)}},i}(hr);function $s(t,i,e,n){var o=e-t,r=n-i,s=Math.sqrt(o*o+r*r);return[Math.round(e+o/s),Math.round(n+r/s)]}function Js(t,i,e,n,o,r,s,a,h,u,p){var l=Hn(Math.round(e*t),Math.round(e*i));if(0===h.length)return l.canvas;l.scale(e,e);var c=[1/0,1/0,-1/0,-1/0];h.forEach(function(t,i,e){qi(c,t.extent)});var _=ue(c),d=re(c),f=Hn(Math.round(e*_/n),Math.round(e*d/n)),v=e/n;h.forEach(function(t,i,e){var n=t.extent[0]-c[0],o=-(t.extent[3]-c[3]),r=ue(t.extent),s=re(t.extent);f.drawImage(t.image,u,u,t.image.width-2*u,t.image.height-2*u,n*v,o*v,r*v,s*v)});var g=ae(s);return a.getTriangles().forEach(function(t,i,o){var s=t.source,a=t.target,h=s[0][0],u=s[0][1],p=s[1][0],_=s[1][1],d=s[2][0],v=s[2][1],y=(a[0][0]-g[0])/r,m=-(a[0][1]-g[1])/r,E=(a[1][0]-g[0])/r,T=-(a[1][1]-g[1])/r,C=(a[2][0]-g[0])/r,R=-(a[2][1]-g[1])/r,I=h,w=u;h=0,u=0;var M=function(t){for(var i=t.length,e=0;e<i;e++){for(var n=e,o=Math.abs(t[e][e]),r=e+1;r<i;r++){var s=Math.abs(t[r][e]);s>o&&(o=s,n=r)}if(0===o)return null;var a=t[n];t[n]=t[e],t[e]=a;for(var h=e+1;h<i;h++)for(var u=-t[h][e]/t[e][e],p=e;p<i+1;p++)e==p?t[h][p]=0:t[h][p]+=u*t[e][p]}for(var l=new Array(i),c=i-1;c>=0;c--){l[c]=t[c][i]/t[c][c];for(var _=c-1;_>=0;_--)t[_][i]-=t[_][c]*l[c]}return l}([[p-=I,_-=w,0,0,E-y],[d-=I,v-=w,0,0,C-y],[0,0,p,_,T-m],[0,0,d,v,R-m]]);if(M){l.save(),l.beginPath();var O=(y+E+C)/3,b=(m+T+R)/3,P=$s(O,b,y,m),A=$s(O,b,E,T),L=$s(O,b,C,R);l.moveTo(A[0],A[1]),l.lineTo(P[0],P[1]),l.lineTo(L[0],L[1]),l.clip(),l.transform(M[0],M[2],M[1],M[3],y,m),l.translate(c[0]-I,c[3]-w),l.scale(n/e,-n/e),l.drawImage(f.canvas,0,0),l.restore()}}),p&&(l.save(),l.strokeStyle="black",l.lineWidth=1,a.getTriangles().forEach(function(t,i,e){var n=t.target,o=(n[0][0]-g[0])/r,s=-(n[0][1]-g[1])/r,a=(n[1][0]-g[0])/r,h=-(n[1][1]-g[1])/r,u=(n[2][0]-g[0])/r,p=-(n[2][1]-g[1])/r;l.beginPath(),l.moveTo(a,h),l.lineTo(o,s),l.lineTo(u,p),l.closePath(),l.stroke()}),l.restore()),l.canvas}var ks=function(t,i,e,n,o){this.sourceProj_=t,this.targetProj_=i;var r={},s=Qe(this.targetProj_,this.sourceProj_);this.transformInv_=function(t){var i=t[0]+"/"+t[1];return r[i]||(r[i]=s(t)),r[i]},this.maxSourceExtent_=n,this.errorThresholdSquared_=o*o,this.triangles_=[],this.wrapsXInSource_=!1,this.canWrapXInSource_=this.sourceProj_.canWrapX()&&!!n&&!!this.sourceProj_.getExtent()&&ue(n)==ue(this.sourceProj_.getExtent()),this.sourceWorldWidth_=this.sourceProj_.getExtent()?ue(this.sourceProj_.getExtent()):null,this.targetWorldWidth_=this.targetProj_.getExtent()?ue(this.targetProj_.getExtent()):null;var a=ae(e),h=he(e),u=ie(e),p=te(e),l=this.transformInv_(a),c=this.transformInv_(h),_=this.transformInv_(u),d=this.transformInv_(p);if(this.addQuad_(a,h,u,p,l,c,_,d,10),this.wrapsXInSource_){var f=1/0;this.triangles_.forEach(function(t,i,e){f=Math.min(f,t.source[0][0],t.source[1][0],t.source[2][0])}),this.triangles_.forEach(function(t){if(Math.max(t.source[0][0],t.source[1][0],t.source[2][0])-f>this.sourceWorldWidth_/2){var i=[[t.source[0][0],t.source[0][1]],[t.source[1][0],t.source[1][1]],[t.source[2][0],t.source[2][1]]];i[0][0]-f>this.sourceWorldWidth_/2&&(i[0][0]-=this.sourceWorldWidth_),i[1][0]-f>this.sourceWorldWidth_/2&&(i[1][0]-=this.sourceWorldWidth_),i[2][0]-f>this.sourceWorldWidth_/2&&(i[2][0]-=this.sourceWorldWidth_);var e=Math.min(i[0][0],i[1][0],i[2][0]);Math.max(i[0][0],i[1][0],i[2][0])-e<this.sourceWorldWidth_/2&&(t.source=i)}}.bind(this))}r={}};ks.prototype.addTriangle_=function(t,i,e,n,o,r){this.triangles_.push({source:[n,o,r],target:[t,i,e]})},ks.prototype.addQuad_=function(t,i,e,n,o,r,s,a,h){var u=Ki([o,r,s,a]),p=this.sourceWorldWidth_?ue(u)/this.sourceWorldWidth_:null,l=this.sourceWorldWidth_,c=this.sourceProj_.canWrapX()&&p>.5&&p<1,_=!1;if(h>0){if(this.targetProj_.isGlobal()&&this.targetWorldWidth_)_=ue(Ki([t,i,e,n]))/this.targetWorldWidth_>.25||_;!c&&this.sourceProj_.isGlobal()&&p&&(_=p>.25||_)}if(_||!this.maxSourceExtent_||pe(u,this.maxSourceExtent_)){if(!(_||isFinite(o[0])&&isFinite(o[1])&&isFinite(r[0])&&isFinite(r[1])&&isFinite(s[0])&&isFinite(s[1])&&isFinite(a[0])&&isFinite(a[1]))){if(!(h>0))return;_=!0}if(h>0){if(!_){var d,f=[(t[0]+e[0])/2,(t[1]+e[1])/2],v=this.transformInv_(f);if(c)d=(li(o[0],l)+li(s[0],l))/2-li(v[0],l);else d=(o[0]+s[0])/2-v[0];var g=(o[1]+s[1])/2-v[1];_=d*d+g*g>this.errorThresholdSquared_}if(_){if(Math.abs(t[0]-e[0])<=Math.abs(t[1]-e[1])){var y=[(i[0]+e[0])/2,(i[1]+e[1])/2],m=this.transformInv_(y),E=[(n[0]+t[0])/2,(n[1]+t[1])/2],T=this.transformInv_(E);this.addQuad_(t,i,y,E,o,r,m,T,h-1),this.addQuad_(E,y,e,n,T,m,s,a,h-1)}else{var C=[(t[0]+i[0])/2,(t[1]+i[1])/2],R=this.transformInv_(C),I=[(e[0]+n[0])/2,(e[1]+n[1])/2],w=this.transformInv_(I);this.addQuad_(t,C,I,n,o,R,w,a,h-1),this.addQuad_(C,i,e,I,R,r,s,w,h-1)}return}}if(c){if(!this.canWrapXInSource_)return;this.wrapsXInSource_=!0}this.addTriangle_(t,e,n,o,s,a),this.addTriangle_(t,i,e,o,r,s)}},ks.prototype.calculateSourceExtent=function(){var t=[1/0,1/0,-1/0,-1/0];return this.triangles_.forEach(function(i,e,n){var o=i.source;Qi(t,o[0]),Qi(t,o[1]),Qi(t,o[2])}),t},ks.prototype.getTriangles=function(){return this.triangles_};var Ss=ks,ta=function(t){function i(i,e,n,o,r,s,a,h,u,p,l){t.call(this,r,ti.IDLE),this.renderEdges_=void 0!==l&&l,this.pixelRatio_=a,this.gutter_=h,this.canvas_=null,this.sourceTileGrid_=e,this.targetTileGrid_=o,this.wrappedTileCoord_=s||r,this.sourceTiles_=[],this.sourcesListenerKeys_=null,this.sourceZ_=0;var c=o.getTileCoordExtent(this.wrappedTileCoord_),_=this.targetTileGrid_.getExtent(),d=this.sourceTileGrid_.getExtent(),f=_?se(c,_):c;if(0!==Si(f)){var v=i.getExtent();v&&(d=d?se(d,v):v);var g=o.getResolution(this.wrappedTileCoord_[0]),y=function(t,i,e,n){var o=$e(e,i,t),r=Ye(i,n,e),s=i.getMetersPerUnit();void 0!==s&&(r*=s);var a=t.getMetersPerUnit();void 0!==a&&(r/=a);var h=t.getExtent();if(!h||xi(h,o)){var u=Ye(t,r,o)/r;isFinite(u)&&u>0&&(r/=u)}return r}(i,n,ee(f),g);if(!isFinite(y)||y<=0)this.state=ti.EMPTY;else{var m=void 0!==p?p:er;if(this.triangulation_=new Ss(i,n,f,d,y*m),0!==this.triangulation_.getTriangles().length){this.sourceZ_=e.getZForResolution(y);var E=this.triangulation_.calculateSourceExtent();if(d&&(i.canWrapX()?(E[1]=si(E[1],d[1],d[3]),E[3]=si(E[3],d[1],d[3])):E=se(E,d)),Si(E)){for(var T=e.getTileRangeForExtentAndZ(E,this.sourceZ_),C=T.minX;C<=T.maxX;C++)for(var R=T.minY;R<=T.maxY;R++){var I=u(this.sourceZ_,C,R,a);I&&this.sourceTiles_.push(I)}0===this.sourceTiles_.length&&(this.state=ti.EMPTY)}else this.state=ti.EMPTY}else this.state=ti.EMPTY}}else this.state=ti.EMPTY}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.disposeInternal=function(){this.state==ti.LOADING&&this.unlistenSources_(),t.prototype.disposeInternal.call(this)},i.prototype.getImage=function(){return this.canvas_},i.prototype.reproject_=function(){var t=[];if(this.sourceTiles_.forEach(function(i,e,n){i&&i.getState()==ti.LOADED&&t.push({extent:this.sourceTileGrid_.getTileCoordExtent(i.tileCoord),image:i.getImage()})}.bind(this)),this.sourceTiles_.length=0,0===t.length)this.state=ti.ERROR;else{var i=this.wrappedTileCoord_[0],e=this.targetTileGrid_.getTileSize(i),n="number"==typeof e?e:e[0],o="number"==typeof e?e:e[1],r=this.targetTileGrid_.getResolution(i),s=this.sourceTileGrid_.getResolution(this.sourceZ_),a=this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);this.canvas_=Js(n,o,this.pixelRatio_,s,this.sourceTileGrid_.getExtent(),r,a,this.triangulation_,t,this.gutter_,this.renderEdges_),this.state=ti.LOADED}this.changed()},i.prototype.load=function(){if(this.state==ti.IDLE){this.state=ti.LOADING,this.changed();var t=0;this.sourcesListenerKeys_=[],this.sourceTiles_.forEach(function(i,e,n){var o=i.getState();if(o==ti.IDLE||o==ti.LOADING){t++;var r=g(i,A.CHANGE,function(e){var n=i.getState();n!=ti.LOADED&&n!=ti.ERROR&&n!=ti.EMPTY||(E(r),0===--t&&(this.unlistenSources_(),this.reproject_()))},this);this.sourcesListenerKeys_.push(r)}}.bind(this)),this.sourceTiles_.forEach(function(t,i,e){t.getState()==ti.IDLE&&t.load()}),0===t&&setTimeout(this.reproject_.bind(this),0)}},i.prototype.unlistenSources_=function(){this.sourcesListenerKeys_.forEach(E),this.sourcesListenerKeys_=null},i}(Bs);function ia(t,i){var e=/\{z\}/g,n=/\{x\}/g,o=/\{y\}/g,r=/\{-y\}/g;return function(s,a,h){return s?t.replace(e,s[0].toString()).replace(n,s[1].toString()).replace(o,function(){return(-s[2]-1).toString()}).replace(r,function(){var t=s[0],e=i.getFullTileRange(t);return ii(e,55),(e.getHeight()+s[2]).toString()}):void 0}}function ea(t,i){for(var e=t.length,n=new Array(e),o=0;o<e;++o)n[o]=ia(t[o],i);return function(t){if(1===t.length)return t[0];return function(i,e,n){if(i){var o=function(t){return(t[1]<<t[0])+t[2]}(i),r=li(o,t.length);return t[r](i,e,n)}}}(n)}function na(t,i,e){}function oa(t){return t?Array.isArray(t)?function(i){return t}:"function"==typeof t?t:function(i){return[t]}:null}var ra=function(t){function i(i){t.call(this),this.projection_=Be(i.projection),this.attributions_=oa(i.attributions),this.attributionsCollapsible_=void 0===i.attributionsCollapsible||i.attributionsCollapsible,this.loading=!1,this.state_=void 0!==i.state?i.state:$n.READY,this.wrapX_=void 0!==i.wrapX&&i.wrapX}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.getAttributions=function(){return this.attributions_},i.prototype.getAttributionsCollapsible=function(){return this.attributionsCollapsible_},i.prototype.getProjection=function(){return this.projection_},i.prototype.getResolutions=function(){return n()},i.prototype.getState=function(){return this.state_},i.prototype.getWrapX=function(){return this.wrapX_},i.prototype.refresh=function(){this.changed()},i.prototype.setAttributions=function(t){this.attributions_=oa(t),this.changed()},i.prototype.setState=function(t){this.state_=t,this.changed()},i}(G),sa=[0,0,0],aa=function(t){var i,e,n,o;if(this.minZoom=void 0!==t.minZoom?t.minZoom:0,this.resolutions_=t.resolutions,ii((i=this.resolutions_,e=!0,n=function(t,i){return i-t}||Ft,i.every(function(t,o){if(0===o)return!0;var r=n(i[o-1],t);return!(r>0||e&&0===r)})),17),!t.origins)for(var r=0,s=this.resolutions_.length-1;r<s;++r)if(o){if(this.resolutions_[r]/this.resolutions_[r+1]!==o){o=void 0;break}}else o=this.resolutions_[r]/this.resolutions_[r+1];this.zoomFactor_=o,this.maxZoom=this.resolutions_.length-1,this.origin_=void 0!==t.origin?t.origin:null,this.origins_=null,void 0!==t.origins&&(this.origins_=t.origins,ii(this.origins_.length==this.resolutions_.length,20));var a=t.extent;void 0===a||this.origin_||this.origins_||(this.origin_=ae(a)),ii(!this.origin_&&this.origins_||this.origin_&&!this.origins_,18),this.tileSizes_=null,void 0!==t.tileSizes&&(this.tileSizes_=t.tileSizes,ii(this.tileSizes_.length==this.resolutions_.length,19)),this.tileSize_=void 0!==t.tileSize?t.tileSize:this.tileSizes_?null:ri,ii(!this.tileSize_&&this.tileSizes_||this.tileSize_&&!this.tileSizes_,22),this.extent_=void 0!==a?a:null,this.fullTileRanges_=null,this.tmpSize_=[0,0],void 0!==t.sizes?this.fullTileRanges_=t.sizes.map(function(t,i){return new qr(Math.min(0,t[0]),Math.max(t[0]-1,-1),Math.min(0,t[1]),Math.max(t[1]-1,-1))},this):a&&this.calculateTileRanges_(a)};aa.prototype.forEachTileCoord=function(t,i,e){for(var n=this.getTileRangeForExtentAndZ(t,i),o=n.minX,r=n.maxX;o<=r;++o)for(var s=n.minY,a=n.maxY;s<=a;++s)e([i,o,s])},aa.prototype.forEachTileCoordParentTileRange=function(t,i,e,n,o){var r,s,a,h=null,u=t[0]-1;for(2===this.zoomFactor_?(s=t[1],a=t[2]):h=this.getTileCoordExtent(t,o);u>=this.minZoom;){if(r=2===this.zoomFactor_?Xr(s=Math.floor(s/2),s,a=Math.floor(a/2),a,n):this.getTileRangeForExtentAndZ(h,u,n),i.call(e,u,r))return!0;--u}return!1},aa.prototype.getExtent=function(){return this.extent_},aa.prototype.getMaxZoom=function(){return this.maxZoom},aa.prototype.getMinZoom=function(){return this.minZoom},aa.prototype.getOrigin=function(t){return this.origin_?this.origin_:this.origins_[t]},aa.prototype.getResolution=function(t){return this.resolutions_[t]},aa.prototype.getResolutions=function(){return this.resolutions_},aa.prototype.getTileCoordChildTileRange=function(t,i,e){if(t[0]<this.maxZoom){if(2===this.zoomFactor_){var n=2*t[1],o=2*t[2];return Xr(n,n+1,o,o+1,i)}var r=this.getTileCoordExtent(t,e);return this.getTileRangeForExtentAndZ(r,t[0]+1,i)}return null},aa.prototype.getTileRangeExtent=function(t,i,e){var n=this.getOrigin(t),o=this.getResolution(t),r=Sn(this.getTileSize(t),this.tmpSize_),s=n[0]+i.minX*r[0]*o,a=n[0]+(i.maxX+1)*r[0]*o;return Hi(s,n[1]+i.minY*r[1]*o,a,n[1]+(i.maxY+1)*r[1]*o,e)},aa.prototype.getTileRangeForExtentAndZ=function(t,i,e){var n=sa;this.getTileCoordForXYAndZ_(t[0],t[1],i,!1,n);var o=n[1],r=n[2];return this.getTileCoordForXYAndZ_(t[2],t[3],i,!0,n),Xr(o,n[1],r,n[2],e)},aa.prototype.getTileCoordCenter=function(t){var i=this.getOrigin(t[0]),e=this.getResolution(t[0]),n=Sn(this.getTileSize(t[0]),this.tmpSize_);return[i[0]+(t[1]+.5)*n[0]*e,i[1]+(t[2]+.5)*n[1]*e]},aa.prototype.getTileCoordExtent=function(t,i){var e=this.getOrigin(t[0]),n=this.getResolution(t[0]),o=Sn(this.getTileSize(t[0]),this.tmpSize_),r=e[0]+t[1]*o[0]*n,s=e[1]+t[2]*o[1]*n;return Hi(r,s,r+o[0]*n,s+o[1]*n,i)},aa.prototype.getTileCoordForCoordAndResolution=function(t,i,e){return this.getTileCoordForXYAndResolution_(t[0],t[1],i,!1,e)},aa.prototype.getTileCoordForXYAndResolution_=function(t,i,e,n,o){var r=this.getZForResolution(e),s=e/this.getResolution(r),a=this.getOrigin(r),h=Sn(this.getTileSize(r),this.tmpSize_),u=n?.5:0,p=n?0:.5,l=Math.floor((t-a[0])/e+u),c=Math.floor((i-a[1])/e+p),_=s*l/h[0],d=s*c/h[1];return n?(_=Math.ceil(_)-1,d=Math.ceil(d)-1):(_=Math.floor(_),d=Math.floor(d)),Ws(r,_,d,o)},aa.prototype.getTileCoordForXYAndZ_=function(t,i,e,n,o){var r=this.getOrigin(e),s=this.getResolution(e),a=Sn(this.getTileSize(e),this.tmpSize_),h=n?.5:0,u=n?0:.5,p=Math.floor((t-r[0])/s+h),l=Math.floor((i-r[1])/s+u),c=p/a[0],_=l/a[1];return n?(c=Math.ceil(c)-1,_=Math.ceil(_)-1):(c=Math.floor(c),_=Math.floor(_)),Ws(e,c,_,o)},aa.prototype.getTileCoordForCoordAndZ=function(t,i,e){return this.getTileCoordForXYAndZ_(t[0],t[1],i,!1,e)},aa.prototype.getTileCoordResolution=function(t){return this.resolutions_[t[0]]},aa.prototype.getTileSize=function(t){return this.tileSize_?this.tileSize_:this.tileSizes_[t]},aa.prototype.getFullTileRange=function(t){return this.fullTileRanges_?this.fullTileRanges_[t]:null},aa.prototype.getZForResolution=function(t,i){return si(Nt(this.resolutions_,t,i||0),this.minZoom,this.maxZoom)},aa.prototype.calculateTileRanges_=function(t){for(var i=this.resolutions_.length,e=new Array(i),n=this.minZoom;n<i;++n)e[n]=this.getTileRangeForExtentAndZ(t,n);this.fullTileRanges_=e};var ha=aa;function ua(t){var i=t.getDefaultTileGrid();return i||(i=function(t,i,e,n){return function(t,i,e,n){var o=void 0!==n?n:Ni.TOP_LEFT,r=pa(t,i,e);return new ha({extent:t,origin:ne(t,o),resolutions:r,tileSize:e})}(la(t),i,e,n)}(t),t.setDefaultTileGrid(i)),i}function pa(t,i,e){for(var n=void 0!==i?i:oi,o=re(t),r=ue(t),s=Sn(void 0!==e?e:ri),a=Math.max(r/s[0],o/s[1]),h=n+1,u=new Array(h),p=0;p<h;++p)u[p]=a/Math.pow(2,p);return u}function la(t){var i=(t=Be(t)).getExtent();if(!i){var e=180*ye[me.DEGREES]/t.getMetersPerUnit();i=Hi(-e,-e,e,e)}return i}var ca=function(t){function i(i){t.call(this,{attributions:i.attributions,attributionsCollapsible:i.attributionsCollapsible,projection:i.projection,state:i.state,wrapX:i.wrapX}),this.opaque_=void 0!==i.opaque&&i.opaque,this.tilePixelRatio_=void 0!==i.tilePixelRatio?i.tilePixelRatio:1,this.tileGrid=void 0!==i.tileGrid?i.tileGrid:null,this.tileCache=new Qs(i.cacheSize),this.tmpSize=[0,0],this.key_=i.key||"",this.tileOptions={transition:i.transition}}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.canExpireCache=function(){return this.tileCache.canExpireCache()},i.prototype.expireCache=function(t,i){var e=this.getTileCacheForProjection(t);e&&e.expireCache(i)},i.prototype.forEachLoadedTile=function(t,i,e,n){var o=this.getTileCacheForProjection(t);if(!o)return!1;for(var r,s,a,h=!0,u=e.minX;u<=e.maxX;++u)for(var p=e.minY;p<=e.maxY;++p)s=Xs(i,u,p),a=!1,o.containsKey(s)&&(a=(r=o.get(s)).getState()===ti.LOADED)&&(a=!1!==n(r)),a||(h=!1);return h},i.prototype.getGutterForProjection=function(t){return 0},i.prototype.getKey=function(){return this.key_},i.prototype.setKey=function(t){this.key_!==t&&(this.key_=t,this.changed())},i.prototype.getOpaque=function(t){return this.opaque_},i.prototype.getResolutions=function(){return this.tileGrid.getResolutions()},i.prototype.getTile=function(t,i,e,o,r){return n()},i.prototype.getTileGrid=function(){return this.tileGrid},i.prototype.getTileGridForProjection=function(t){return this.tileGrid?this.tileGrid:ua(t)},i.prototype.getTileCacheForProjection=function(t){var i=this.getProjection();return i&&!Xe(i,t)?null:this.tileCache},i.prototype.getTilePixelRatio=function(t){return this.tilePixelRatio_},i.prototype.getTilePixelSize=function(t,i,e){var n,o,r,s=this.getTileGridForProjection(e),a=this.getTilePixelRatio(i),h=Sn(s.getTileSize(t),this.tmpSize);return 1==a?h:(n=h,o=a,void 0===(r=this.tmpSize)&&(r=[0,0]),r[0]=n[0]*o+.5|0,r[1]=n[1]*o+.5|0,r)},i.prototype.getTileCoordForTileUrlFunction=function(t,i){var e=void 0!==i?i:this.getProjection(),n=this.getTileGridForProjection(e);return this.getWrapX()&&e.isGlobal()&&(t=function(t,i,e){var n=i[0],o=t.getTileCoordCenter(i),r=la(e);if(xi(r,o))return i;var s=ue(r),a=Math.ceil((r[0]-o[0])/s);return o[0]+=s*a,t.getTileCoordForCoordAndZ(o,n)}(n,t,e)),function(t,i){var e=t[0],n=t[1],o=t[2];if(i.getMinZoom()>e||e>i.getMaxZoom())return!1;var r,s=i.getExtent();return!(r=s?i.getTileRangeForExtentAndZ(s,e):i.getFullTileRange(e))||r.containsXY(n,o)}(t,n)?t:null},i.prototype.refresh=function(){this.tileCache.clear(),this.changed()},i.prototype.useTile=function(t,i,e,n){},i}(ra),_a=function(t){function i(i,e){t.call(this,i),this.tile=e}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(b),da="tileloadstart",fa="tileloadend",va="tileloaderror";function ga(t,i){t.getImage().src=i}var ya='&#169; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors.',ma=function(t){function i(i){var e,n=i||{};e=void 0!==n.attributions?n.attributions:[ya];var o=void 0!==n.crossOrigin?n.crossOrigin:"anonymous",r=void 0!==n.url?n.url:"https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png";t.call(this,{attributions:e,cacheSize:n.cacheSize,crossOrigin:o,opaque:void 0===n.opaque||n.opaque,maxZoom:void 0!==n.maxZoom?n.maxZoom:19,reprojectionErrorThreshold:n.reprojectionErrorThreshold,tileLoadFunction:n.tileLoadFunction,url:r,wrapX:n.wrapX,attributionsCollapsible:!1})}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(function(t){function i(i){var e=i||{},n=void 0!==e.projection?e.projection:"EPSG:3857",o=void 0!==e.tileGrid?e.tileGrid:function(t){var i=t||{},e=i.extent||Be("EPSG:3857").getExtent(),n={extent:e,minZoom:i.minZoom,tileSize:i.tileSize,resolutions:pa(e,i.maxZoom,i.tileSize)};return new ha(n)}({extent:la(n),maxZoom:e.maxZoom,minZoom:e.minZoom,tileSize:e.tileSize});t.call(this,{attributions:e.attributions,cacheSize:e.cacheSize,crossOrigin:e.crossOrigin,opaque:e.opaque,projection:n,reprojectionErrorThreshold:e.reprojectionErrorThreshold,tileGrid:o,tileLoadFunction:e.tileLoadFunction,tilePixelRatio:e.tilePixelRatio,tileUrlFunction:e.tileUrlFunction,url:e.url,urls:e.urls,wrapX:void 0===e.wrapX||e.wrapX,transition:e.transition,attributionsCollapsible:e.attributionsCollapsible})}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(function(t){function i(i){t.call(this,{attributions:i.attributions,cacheSize:i.cacheSize,opaque:i.opaque,projection:i.projection,state:i.state,tileGrid:i.tileGrid,tileLoadFunction:i.tileLoadFunction?i.tileLoadFunction:ga,tilePixelRatio:i.tilePixelRatio,tileUrlFunction:i.tileUrlFunction,url:i.url,urls:i.urls,wrapX:i.wrapX,transition:i.transition,key:i.key,attributionsCollapsible:i.attributionsCollapsible}),this.crossOrigin=void 0!==i.crossOrigin?i.crossOrigin:null,this.tileClass=void 0!==i.tileClass?i.tileClass:Hs,this.tileCacheForProjection={},this.tileGridForProjection={},this.reprojectionErrorThreshold_=i.reprojectionErrorThreshold,this.renderReprojectionEdges_=!1}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.canExpireCache=function(){if(this.tileCache.canExpireCache())return!0;for(var t in this.tileCacheForProjection)if(this.tileCacheForProjection[t].canExpireCache())return!0;return!1},i.prototype.expireCache=function(t,i){var e=this.getTileCacheForProjection(t);for(var n in this.tileCache.expireCache(this.tileCache==e?i:{}),this.tileCacheForProjection){var o=this.tileCacheForProjection[n];o.expireCache(o==e?i:{})}},i.prototype.getGutterForProjection=function(t){return this.getProjection()&&t&&!Xe(this.getProjection(),t)?0:this.getGutter()},i.prototype.getGutter=function(){return 0},i.prototype.getOpaque=function(i){return!(this.getProjection()&&i&&!Xe(this.getProjection(),i))&&t.prototype.getOpaque.call(this,i)},i.prototype.getTileGridForProjection=function(t){var i=this.getProjection();if(!this.tileGrid||i&&!Xe(i,t)){var e=r(t);return e in this.tileGridForProjection||(this.tileGridForProjection[e]=ua(t)),this.tileGridForProjection[e]}return this.tileGrid},i.prototype.getTileCacheForProjection=function(t){var i=this.getProjection();if(!i||Xe(i,t))return this.tileCache;var e=r(t);return e in this.tileCacheForProjection||(this.tileCacheForProjection[e]=new Qs(this.tileCache.highWaterMark)),this.tileCacheForProjection[e]},i.prototype.createTile_=function(t,i,e,n,o,r){var s=[t,i,e],a=this.getTileCoordForTileUrlFunction(s,o),h=a?this.tileUrlFunction(a,n,o):void 0,u=new this.tileClass(s,void 0!==h?ti.IDLE:ti.EMPTY,void 0!==h?h:"",this.crossOrigin,this.tileLoadFunction,this.tileOptions);return u.key=r,g(u,A.CHANGE,this.handleTileChange,this),u},i.prototype.getTile=function(t,i,e,n,o){var r=this.getProjection();if(r&&o&&!Xe(r,o)){var s,a=this.getTileCacheForProjection(o),h=[t,i,e],u=qs(h);a.containsKey(u)&&(s=a.get(u));var p=this.getKey();if(s&&s.key==p)return s;var l=this.getTileGridForProjection(r),c=this.getTileGridForProjection(o),_=this.getTileCoordForTileUrlFunction(h,o),d=new ta(r,l,o,c,h,_,this.getTilePixelRatio(n),this.getGutter(),function(t,i,e,n){return this.getTileInternal(t,i,e,n,r)}.bind(this),this.reprojectionErrorThreshold_,this.renderReprojectionEdges_);return d.key=p,s?(d.interimTile=s,d.refreshInterimChain(),a.replace(u,d)):a.set(u,d),d}return this.getTileInternal(t,i,e,n,r||o)},i.prototype.getTileInternal=function(t,i,e,n,o){var r=null,s=Xs(t,i,e),a=this.getKey();if(this.tileCache.containsKey(s)){if((r=this.tileCache.get(s)).key!=a){var h=r;r=this.createTile_(t,i,e,n,o,a),h.getState()==ti.IDLE?r.interimTile=h.interimTile:r.interimTile=h,r.refreshInterimChain(),this.tileCache.replace(s,r)}}else r=this.createTile_(t,i,e,n,o,a),this.tileCache.set(s,r);return r},i.prototype.setRenderReprojectionEdges=function(t){if(this.renderReprojectionEdges_!=t){for(var i in this.renderReprojectionEdges_=t,this.tileCacheForProjection)this.tileCacheForProjection[i].clear();this.changed()}},i.prototype.setTileGridForProjection=function(t,i){var e=Be(t);if(e){var n=r(e);n in this.tileGridForProjection||(this.tileGridForProjection[n]=i)}},i}(function(t){function i(i){t.call(this,{attributions:i.attributions,cacheSize:i.cacheSize,opaque:i.opaque,projection:i.projection,state:i.state,tileGrid:i.tileGrid,tilePixelRatio:i.tilePixelRatio,wrapX:i.wrapX,transition:i.transition,key:i.key,attributionsCollapsible:i.attributionsCollapsible}),this.generateTileUrlFunction_=!i.tileUrlFunction,this.tileLoadFunction=i.tileLoadFunction,this.tileUrlFunction=i.tileUrlFunction?i.tileUrlFunction.bind(this):na,this.urls=null,i.urls?this.setUrls(i.urls):i.url&&this.setUrl(i.url),i.tileUrlFunction&&this.setTileUrlFunction(i.tileUrlFunction,this.key_),this.tileLoadingKeys_={}}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.getTileLoadFunction=function(){return this.tileLoadFunction},i.prototype.getTileUrlFunction=function(){return this.tileUrlFunction},i.prototype.getUrls=function(){return this.urls},i.prototype.handleTileChange=function(t){var i,e=t.target,n=r(e),o=e.getState();o==ti.LOADING?(this.tileLoadingKeys_[n]=!0,i=da):n in this.tileLoadingKeys_&&(delete this.tileLoadingKeys_[n],i=o==ti.ERROR?va:o==ti.LOADED||o==ti.ABORT?fa:void 0),null!=i&&this.dispatchEvent(new _a(i,e))},i.prototype.setTileLoadFunction=function(t){this.tileCache.clear(),this.tileLoadFunction=t,this.changed()},i.prototype.setTileUrlFunction=function(t,i){this.tileUrlFunction=t,this.tileCache.pruneExceptNewestZ(),void 0!==i?this.setKey(i):this.changed()},i.prototype.setUrl=function(t){var i=this.urls=function(t){var i=[],e=/\{([a-z])-([a-z])\}/.exec(t);if(e){var n,o=e[1].charCodeAt(0),r=e[2].charCodeAt(0);for(n=o;n<=r;++n)i.push(t.replace(e[0],String.fromCharCode(n)));return i}if(e=e=/\{(\d+)-(\d+)\}/.exec(t)){for(var s=parseInt(e[2],10),a=parseInt(e[1],10);a<=s;a++)i.push(t.replace(e[0],a.toString()));return i}return i.push(t),i}(t);this.setUrls(i)},i.prototype.setUrls=function(t){this.urls=t;var i=t.join("\n");this.generateTileUrlFunction_?this.setTileUrlFunction(ea(t,this.tileGrid),i):this.setKey(i)},i.prototype.useTile=function(t,i,e){var n=Xs(t,i,e);this.tileCache.containsKey(n)&&this.tileCache.get(n)},i}(ca)))),Ea="preload",Ta="useInterimTilesOnError",Ca=function(t){function i(i){var e=i||{},n=p({},e);delete n.preload,delete n.useInterimTilesOnError,t.call(this,n),this.setPreload(void 0!==e.preload?e.preload:0),this.setUseInterimTilesOnError(void 0===e.useInterimTilesOnError||e.useInterimTilesOnError),this.type=rr.TILE}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.getPreload=function(){return this.get(Ea)},i.prototype.setPreload=function(t){this.set(Ea,t)},i.prototype.getUseInterimTilesOnError=function(){return this.get(Ta)},i.prototype.setUseInterimTilesOnError=function(t){this.set(Ta,t)},i}(po);Ca.prototype.getSource;new zs({target:"map",layers:[new Ca({source:new ma})],view:new Vs({center:[0,0],zoom:4})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,